<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数模作业</title>
      <link href="/2020/02/23/%E6%95%B0%E6%A8%A1%E4%BD%9C%E4%B8%9A/"/>
      <url>/2020/02/23/%E6%95%B0%E6%A8%A1%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h1 id="作业："><a href="#作业：" class="headerlink" title="作业："></a>作业：</h1><h2 id="1-估计一个人体内血液的总量"><a href="#1-估计一个人体内血液的总量" class="headerlink" title="1. 估计一个人体内血液的总量"></a>1. 估计一个人体内血液的总量</h2><ul><li><p>准备的数据资料：</p><ul><li>人体血量因人而异，但是血液在人体中的比重基本不变。</li><li>医学上有一种药理学方法测量人体血量：静脉注射只在血液中分布的药物（个人建议早上空腹注射）。待其扩布至全身血管后测量血液中该药物的浓度，根据注射前药物浓度和体积以及注射后血药浓度可以计算出血液体积。</li></ul></li><li><p>需要做的观察：我们只需要观察并记录注射药物的体积，注射药物的浓度与提取出的血药浓度。</p></li><li><p>数学模型：</p></li></ul><p>\mathtt{V}<em>药 \mathtt{C}</em>药 = \mathtt{V}血\mathtt{C}血（\mathtt{V}_血即为所求）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注射药物体积×注射药物浓度＝血液体积×血药浓度</span><br></pre></td></tr></tbody></table></figure></div><h1 id="作业：-1"><a href="#作业：-1" class="headerlink" title="作业："></a>作业：</h1><h2 id="1-估计一个人体内血液的总量-1"><a href="#1-估计一个人体内血液的总量-1" class="headerlink" title="1. 估计一个人体内血液的总量"></a>1. 估计一个人体内血液的总量</h2><ul><li><p>准备的数据资料：</p><ul><li>人体血量因人而异，但是血液在人体中的比重基本不变。</li><li>医学上有一种药理学方法测量人体血量：静脉注射只在血液中分布的药物（个人建议早上空腹注射）。待其扩布至全身血管后测量血液中该药物的浓度，根据注射前药物浓度和体积以及注射后血药浓度可以计算出血液体积。</li></ul></li><li><p>需要做的观察：我们只需要观察并记录注射药物的体积，注射药物的浓度与提取出的血药浓度。</p></li><li><p>数学模型：</p><p>​     注射药物体积×注射药物浓度＝血液体积×血药浓度</p></li></ul><script type="math/tex; mode=display">\mathtt{V}_药 \mathtt{C}_药 = \mathtt{V}血\mathtt{C}血（\mathtt{V}_血即为所求）</script><h2 id="2-包饺子问题"><a href="#2-包饺子问题" class="headerlink" title="2. 包饺子问题"></a>2. 包饺子问题</h2><h4 id="新增条件：饺子越大，饺子皮越厚。"><a href="#新增条件：饺子越大，饺子皮越厚。" class="headerlink" title="新增条件：饺子越大，饺子皮越厚。"></a>新增条件：饺子越大，饺子皮越厚。</h4><h4 id="假设：-面皮厚度h与面积s关系成立某种线性关系："><a href="#假设：-面皮厚度h与面积s关系成立某种线性关系：" class="headerlink" title="假设： 面皮厚度h与面积s关系成立某种线性关系："></a>假设： 面皮厚度h与面积s关系成立某种线性关系：</h4><script type="math/tex; mode=display">s = \mathtt{K}_0h</script><h4 id="建模："><a href="#建模：" class="headerlink" title="建模："></a>建模：</h4><p>此时总面块体积V满足：</p><script type="math/tex; mode=display">V = SH = \sum_{i=1}^n\mathtt{s}_i\mathtt{h}_i = nsh</script><p>有上述二式可得大饺子和小饺子的表面积关系</p><script type="math/tex; mode=display">\mathtt{S}^2 = n\mathtt{s}^2</script><p>大饺子与小饺子的体积分别为</p><script type="math/tex; mode=display">V = kS^\frac32</script><script type="math/tex; mode=display">v = ks^\frac32</script><p>以上三式联立得</p><script type="math/tex; mode=display">V = n^\frac34v</script><h4 id="应用-100个饺子包1kg馅，50个饺子能包多少？"><a href="#应用-100个饺子包1kg馅，50个饺子能包多少？" class="headerlink" title="应用: 100个饺子包1kg馅，50个饺子能包多少？"></a>应用: 100个饺子包1kg馅，50个饺子能包多少？</h4><p>用此模型得出来的结果大约为0.88kg</p></body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>笔记————电路与电子技术第五版（主编：张虹)</title>
      <link href="/2020/02/22/%E7%94%B5%E8%B7%AF%E4%B8%8E%E7%94%B5%E5%AD%90%E8%AE%BE%E8%AE%A1/"/>
      <url>/2020/02/22/%E7%94%B5%E8%B7%AF%E4%B8%8E%E7%94%B5%E5%AD%90%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h1 id="第一章电路基本概念"><a href="#第一章电路基本概念" class="headerlink" title="第一章电路基本概念"></a>第一章电路基本概念</h1><h2 id="文章内容提要"><a href="#文章内容提要" class="headerlink" title="文章内容提要"></a>文章内容提要</h2><ul><li>电路理论基础</li><li>电流的参考方向和典雅的参考极性</li><li>电阻。电容。电感元件的特性</li><li>电压源。电流源的特性</li><li>受控源与独立源的异同</li></ul><hr><h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><ul><li><h3 id="电路模型的概念及科学建模："><a href="#电路模型的概念及科学建模：" class="headerlink" title="电路模型的概念及科学建模："></a>电路模型的概念及科学建模：</h3></li></ul><h3 id="1-电路"><a href="#1-电路" class="headerlink" title="1.电路"></a>1.电路</h3><h4 id="（1）电路的分类"><a href="#（1）电路的分类" class="headerlink" title="（1）电路的分类"></a>（1）电路的分类</h4><p>其一，集总参数电路和分布参数电路：将实际电路的几何尺寸d与其中的工信号波长λ比较，满族d<<λ的称为集总参数电路，不满足的成为分布参数电路。</p><p>几何尺寸：电路板的最大长度，比如你研究教室里照明电路时，电路的尺寸大小就是教室的大小。</p><p>工信号波长：</p><p>  其二，线性电路和非线性电路：若描述电路特征的所有方程都是线性代数方程或先行为记分方程，则称为线性电路，否则非线性电路。可以理解，但是还不清楚方程是啥样。</p><p>  其三，时不变电路和时变电路：食不点电路中元件参数不随时间变化，描述其电路的方程式常系数的代数方程或常系数的微积分方程，而时变电路是由变系数的代数方程或微积分方程描述的电路。</p><h4 id="（2）电路的功能"><a href="#（2）电路的功能" class="headerlink" title="（2）电路的功能"></a>（2）电路的功能</h4><p>  电路的异种功能室实现电能的传输和转换。</p><p>   电路的另一种功能是实现电信号的传输、处理和存储。</p><h4 id="（3）电路的定义"><a href="#（3）电路的定义" class="headerlink" title="（3）电路的定义"></a>（3）电路的定义</h4><p>  所有的实际电路是由电气设备和元器件按照一定的方式连接起来，为电流的流通提供路径的总体，也称网络。</p><h3 id="2-电路模型"><a href="#2-电路模型" class="headerlink" title="2.电路模型"></a>2.电路模型</h3><h4 id="（1）理想元件"><a href="#（1）理想元件" class="headerlink" title="（1）理想元件"></a>（1）理想元件</h4><p>   了便于对实际电路进行分析，通常是将实际电路器件理想化（或称模型化），即在一定条件下，突出其主要的电磁性质，忽略其次要因素，将其近似地看做理想电路元件（简称“理想元件”），并用规定的图形符号表示。</p><p>这个可以理解。忽略次要因素。</p><h4 id="（2）电路模型"><a href="#（2）电路模型" class="headerlink" title="（2）电路模型"></a>（2）电路模型</h4><p>由理想元件组成的电路，就称为实际电路的电路模型。图1-1（b）即为图（a）的电路模型。</p><p><a href="https://i.loli.net/2020/02/17/dViKRzFxucYqE95.png" data-fancybox="group" data-caption="此处加入图片" class="fancybox"><img alt="此处加入图片" title="此处加入图片" data-src="https://i.loli.net/2020/02/17/dViKRzFxucYqE95.png" class="lazyload"></a></p><h4 id="（3）建模"><a href="#（3）建模" class="headerlink" title="（3）建模"></a>（3）建模</h4><p>以上用</p><h2 id="1-2-电路基本物理量"><a href="#1-2-电路基本物理量" class="headerlink" title="1.2 电路基本物理量"></a>1.2 电路基本物理量</h2><h3 id="1-2-1-电流"><a href="#1-2-1-电流" class="headerlink" title="1.2.1 电流"></a>1.2.1 电流</h3><h4 id="（1）定义"><a href="#（1）定义" class="headerlink" title="（1）定义"></a>（1）定义</h4><p>电荷的定向运动形成电流。</p><h4 id="（2）大小"><a href="#（2）大小" class="headerlink" title="（2）大小"></a>（2）大小</h4><p>电流的大小用电流强度衡量</p><p><a href="https://i.loli.net/2020/02/17/GWeLCM38hotbAyK.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2020/02/17/GWeLCM38hotbAyK.png" class="lazyload"></a></p><h4 id="（3）实际方向"><a href="#（3）实际方向" class="headerlink" title="（3）实际方向"></a>（3）实际方向</h4><p>正电荷的运动方向</p><h4 id="（4）分类"><a href="#（4）分类" class="headerlink" title="（4）分类"></a>（4）分类</h4><p>恒定电流（直流DC）和 时变电流，分别用l和i表示。交流（AC）是时变电流的特例，周期性变化，电流平均值为0.</p><h4 id="（5）参考方向"><a href="#（5）参考方向" class="headerlink" title="（5）参考方向"></a>（5）参考方向</h4><p>  参考方向具有任意性，参考方向为实线，实际方向为虚线，实际方向与参考方向相同，电流值大于零，反之亦然。</p><h4 id="（4）关联参考方向"><a href="#（4）关联参考方向" class="headerlink" title="（4）关联参考方向"></a>（4）关联参考方向</h4><p> 即将电流的参考方向由电压的+指向-。这样为关联参考方向，反之不是。</p><h3 id="1-2-2-电压"><a href="#1-2-2-电压" class="headerlink" title="1.2.2 电压"></a>1.2.2 电压</h3><h4 id="（1）大小描述"><a href="#（1）大小描述" class="headerlink" title="（1）大小描述"></a>（1）大小描述</h4><p>在数值上，电路中任意a,b两点之间的电压等于电场力由a点移动单位正电荷到b点所做的功</p><p><a href="https://i.loli.net/2020/02/17/a2C6zDwVUsTZdIH.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/02/17/a2C6zDwVUsTZdIH.png" class="lazyload"></a></p><h4 id="（2）-电位"><a href="#（2）-电位" class="headerlink" title="（2） 电位"></a>（2） 电位</h4><p>电路中任选一点作为参考点，则其他各点到参考点的电压叫做该点的电位。</p><p>用符号V表示 且有关系：</p><ul><li>​    U<em>ab = </em>V<em>a - </em>V*b</li></ul><h4 id="（3）电压参考极性"><a href="#（3）电压参考极性" class="headerlink" title="（3）电压参考极性"></a>（3）电压参考极性</h4><p> 同电流。</p><h4 id="（4）关联参考方向-1"><a href="#（4）关联参考方向-1" class="headerlink" title="（4）关联参考方向"></a>（4）关联参考方向</h4><p>即将电流的参考方向由电压的+指向-。这样为关联参考方向，反之不是。</p><h3 id="1-2-3-功率与能量"><a href="#1-2-3-功率与能量" class="headerlink" title="1.2.3 功率与能量"></a>1.2.3 功率与能量</h3><h4 id="（1）功率的定义"><a href="#（1）功率的定义" class="headerlink" title="（1）功率的定义"></a>（1）功率的定义</h4><p>  单位是W（瓦）</p><p><a href="https://i.loli.net/2020/02/17/JAgvhQbnUOyIHMC.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/02/17/JAgvhQbnUOyIHMC.png" class="lazyload"></a></p><h4 id="（2）功率的计算"><a href="#（2）功率的计算" class="headerlink" title="（2）功率的计算"></a>（2）功率的计算</h4><p> 首先需要判断u，i 的参考方向是否为关联方向。</p><p>如果关联，则p = ui；否则 p = -ui。</p><p>结果若大于0则为实际消耗功率，反之为实际发出功率。</p><p>注：吸收功率等于发出功率</p><h4 id="（3）能量"><a href="#（3）能量" class="headerlink" title="（3）能量"></a>（3）能量</h4><p>能量是功率表对时间的积累，其表达式可写：</p><p><a href="https://i.loli.net/2020/02/17/OteYfTc9BdvF4AH.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://i.loli.net/2020/02/17/OteYfTc9BdvF4AH.png" class="lazyload"></a></p><h2 id="1-3-电路基本元件"><a href="#1-3-电路基本元件" class="headerlink" title="1.3 电路基本元件"></a>1.3 电路基本元件</h2><h3 id="1-3-1-电阻元件"><a href="#1-3-1-电阻元件" class="headerlink" title="1.3.1 电阻元件"></a>1.3.1 电阻元件</h3><h4 id="1-电阻元件的电压，电流关系及功率"><a href="#1-电阻元件的电压，电流关系及功率" class="headerlink" title="1. 电阻元件的电压，电流关系及功率"></a>1. 电阻元件的电压，电流关系及功率</h4><p>如果电阻的伏安关系是一条通过原点的直线。则称为线行驶不变电阻，其电压电流关系（VCR）为:</p><p>关联方向时： u = Ri 或 i = Gu</p><p>非关联方向时： u = -Ri 或 i = -Gu</p><p>在任意时刻，电阻上消耗的功率为：</p><p><a href="https://i.loli.net/2020/02/22/sbYNTig7ZLodIJB.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/02/22/sbYNTig7ZLodIJB.png" class="lazyload"></a></p><p>注：G 是电导，电阻的倒数</p><h3 id="1-3-2-电容元件"><a href="#1-3-2-电容元件" class="headerlink" title="1.3.2 电容元件"></a>1.3.2 电容元件</h3><h4 id="（1）电容元件的电容量"><a href="#（1）电容元件的电容量" class="headerlink" title="（1）电容元件的电容量"></a>（1）电容元件的电容量</h4><p>电容是一种能够存储电场能量的元件。电容单位为法【拉】，用F表示。</p><p>1F = 106 <em>µ</em>F = 109 nF = 1012 pF</p><p>对于线性电容而言，其极板上存储的电荷量q与两极板间建立起的电压u成正比。</p><p>q<em> = </em>C u*</p><h4 id="（2）电容元件的电压，电流关系。"><a href="#（2）电容元件的电压，电流关系。" class="headerlink" title="（2）电容元件的电压，电流关系。"></a>（2）电容元件的电压，电流关系。</h4><p>当电压，电流选为关联方向时，其伏安关系为：</p><p><a href="https://i.loli.net/2020/02/22/m7cVdjCMDwoEKIL.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/02/22/m7cVdjCMDwoEKIL.png" class="lazyload"></a></p><h4 id="（3）电容的储能"><a href="#（3）电容的储能" class="headerlink" title="（3）电容的储能"></a>（3）电容的储能</h4><p>电容的储能公式为：</p><p><a href="https://i.loli.net/2020/02/22/fnUTiyDhV7Mwlgr.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/02/22/fnUTiyDhV7Mwlgr.png" class="lazyload"></a></p><p><strong>上式表明：任意时刻电容的储能总是大于或等于零，由此可知，电容属于无源元件。</strong></p><h4 id="（4）电容元件的连接"><a href="#（4）电容元件的连接" class="headerlink" title="（4）电容元件的连接"></a>（4）电容元件的连接</h4><p>电容并联：相当于增大极板面积，所以增大了点用量，等效电容等于各电容加和。</p><p>电容串联： 等效电容的倒数等于各串联电容倒数之和。</p><p>电容可采用既有并联又有串联的接法，以获得所需要的电容量和耐压。</p><h3 id="1-3-3-电感元件"><a href="#1-3-3-电感元件" class="headerlink" title="1.3.3 电感元件"></a>1.3.3 电感元件</h3><p><a href="https://i.loli.net/2020/02/22/WXQZc7fvURhr93M.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/02/22/WXQZc7fvURhr93M.png" class="lazyload"></a></p><h4 id="（1）电感元件的电感系数。"><a href="#（1）电感元件的电感系数。" class="headerlink" title="（1）电感元件的电感系数。"></a>（1）电感元件的电感系数。</h4><p>用L表示。国际单位制，单位为亨【利】，用H表示。</p><p>1H = 103 mH = 106 µH  </p><p>对于线性电感，电感的磁链与电流成正比。</p><h4 id="（2）电感元件的电压与电流的关系"><a href="#（2）电感元件的电压与电流的关系" class="headerlink" title="（2）电感元件的电压与电流的关系"></a>（2）电感元件的电压与电流的关系</h4><p>电压与电流关联方向：</p><p><a href="https://i.loli.net/2020/02/22/jZdJMIG27DnAfNU.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/02/22/jZdJMIG27DnAfNU.png" class="lazyload"></a></p><p><strong>注意：由上式可知，电流的变化率越大，则u越大。倘若电流不变化，则u等于0。电感相当于短路。因此电感具有通低频、阻高频的作用。</strong></p><h4 id="（3）电感的储能"><a href="#（3）电感的储能" class="headerlink" title="（3）电感的储能"></a>（3）电感的储能</h4><p>储能公式：</p><p><a href="https://i.loli.net/2020/02/22/mEswMaeuZblQLt9.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/02/22/mEswMaeuZblQLt9.png" class="lazyload"></a></p><p>任意时刻电感的储能总是大于或等于0，电感也属于无源元件。</p><h4 id="（4）电感元件的连接"><a href="#（4）电感元件的连接" class="headerlink" title="（4）电感元件的连接"></a>（4）电感元件的连接</h4><p>对于无互感的电感，其等效电感与电容的串并联正好相反。</p><p>硬件理论体系支撑</p><p>​</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 上课笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 上课笔记 </tag>
            
            <tag> 电路与电子技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法，由浅入深，最全攻略，笔记神奇。</title>
      <link href="/2020/02/19/markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/02/19/markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h1 id="一、markdown简介"><a href="#一、markdown简介" class="headerlink" title="一、markdown简介"></a>一、markdown简介</h1><p>（注：如果对markdown有一定了解。可以略过此处，第一章主要对markdown基础知识做个补充,摘自菜鸟教程<a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">此处原文档</a> ）</p><h2 id="1-1-markdown背景"><a href="#1-1-markdown背景" class="headerlink" title="1.1 markdown背景"></a>1.1 markdown背景</h2><h3 id="1-markdown是一种轻量级标记语言，她与徐人们使用易读易写的纯文本格式编写文档。"><a href="#1-markdown是一种轻量级标记语言，她与徐人们使用易读易写的纯文本格式编写文档。" class="headerlink" title="1. markdown是一种轻量级标记语言，她与徐人们使用易读易写的纯文本格式编写文档。"></a>1. markdown是一种轻量级标记语言，她与徐人们使用易读易写的纯文本格式编写文档。</h3><h3 id="2-Markdown-语言在-2004-由约翰·格鲁伯（英语：John-Gruber）创建。"><a href="#2-Markdown-语言在-2004-由约翰·格鲁伯（英语：John-Gruber）创建。" class="headerlink" title="2. Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。"></a>2. Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</h3><h3 id="3-Markdown-编写的文档可以导出-HTML-、Word、图像、PDF、Epub-等多种格式的文档。"><a href="#3-Markdown-编写的文档可以导出-HTML-、Word、图像、PDF、Epub-等多种格式的文档。" class="headerlink" title="3. Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。"></a>3. Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</h3><h3 id="4-Markdown-编写的文档后缀为-md-markdown。"><a href="#4-Markdown-编写的文档后缀为-md-markdown。" class="headerlink" title="4. Markdown 编写的文档后缀为 .md, .markdown。"></a>4. Markdown 编写的文档后缀为 .md, .markdown。</h3><h2 id="1-2-markdown应用"><a href="#1-2-markdown应用" class="headerlink" title="1.2 markdown应用"></a>1.2 markdown应用</h2><h3 id="Markdown-能被使用来撰写电子书，如：Gitbook。"><a href="#Markdown-能被使用来撰写电子书，如：Gitbook。" class="headerlink" title="Markdown 能被使用来撰写电子书，如：Gitbook。"></a>Markdown 能被使用来撰写电子书，如：Gitbook。</h3><h3 id="当前许多网站都广泛使用-Markdown-来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit、Diaspora、Stack-Exchange、OpenStreetMap-、SourceForge等。"><a href="#当前许多网站都广泛使用-Markdown-来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit、Diaspora、Stack-Exchange、OpenStreetMap-、SourceForge等。" class="headerlink" title="当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge等。"></a>当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge等。</h3><h2 id="1-3-编辑器"><a href="#1-3-编辑器" class="headerlink" title="1.3 编辑器"></a>1.3 编辑器</h2><h3 id="编辑器有很多种，基本各大编辑器都可以编辑markdown格式文档。"><a href="#编辑器有很多种，基本各大编辑器都可以编辑markdown格式文档。" class="headerlink" title="编辑器有很多种，基本各大编辑器都可以编辑markdown格式文档。"></a>编辑器有很多种，基本各大编辑器都可以编辑markdown格式文档。</h3><h3 id="比如：Typora，sublime-Text-coderunner-印象笔记，vim等等等。具体的可以百度，都非常好用。"><a href="#比如：Typora，sublime-Text-coderunner-印象笔记，vim等等等。具体的可以百度，都非常好用。" class="headerlink" title="比如：Typora，sublime Text, coderunner,印象笔记，vim等等等。具体的可以百度，都非常好用。"></a>比如：Typora，sublime Text, coderunner,印象笔记，vim等等等。具体的可以百度，都非常好用。</h3><hr><h1 id="二、markdown基本操作"><a href="#二、markdown基本操作" class="headerlink" title="二、markdown基本操作"></a>二、markdown基本操作</h1><h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h2><p>使用#号标记，可以表示1-6级标题，随#个数递增。如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></tbody></table></figure></div><p>注：最后一个#与文字间一定要有一个空格。</p><p>显示效果：</p><p><a href="https://i.loli.net/2020/02/17/wIWVKahMtmTLu4n.png" data-fancybox="group" data-caption="显示效果" class="fancybox"><img alt="显示效果" title="显示效果" data-src="https://i.loli.net/2020/02/17/wIWVKahMtmTLu4n.png" class="lazyload"></a></p><h2 id="2-换行"><a href="#2-换行" class="headerlink" title="2.换行"></a>2.换行</h2><p>markdown换行方式有很多种</p><ul><li>直接在一句话后面敲两个空格</li><li>两句话之间加一个空行</li><li>如果你在编辑的时候，想让一行文字分成几段在显示的时候换行，就在中间加</li></ul><p><a href="https://i.loli.net/2020/02/18/UrtqpfeOPlDW5VT.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/02/18/UrtqpfeOPlDW5VT.png" class="lazyload"></a></p><p>此点是我想在表格里换行时get到的，也很实用,后面讲到表格我会展示。</p><h2 id="3-字体"><a href="#3-字体" class="headerlink" title="3.字体"></a>3.字体</h2><p>markdown支持几种字体：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="emphasis">*斜体文本*</span></span><br><span class="line"><span class="emphasis">_斜体文本_</span></span><br><span class="line"><span class="strong">**粗体文本**</span></span><br><span class="line"><span class="strong">__粗体文本__</span></span><br><span class="line"><span class="strong">***粗斜体文本**</span>*</span><br><span class="line"><span class="strong">___粗斜体文本__</span>_</span><br></pre></td></tr></tbody></table></figure></div><p>把你想修改的字段直接放在中间即可。显示效果如下：</p><p><a href="https://i.loli.net/2020/02/18/JNMP7tG4KdXaxoj.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/02/18/JNMP7tG4KdXaxoj.png" class="lazyload"></a></p><h2 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4.分割线"></a>4.分割线</h2><p>markdown中分割线，能是你的文章结构更加清楚</p><p>几种分割线的写法：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="emphasis">***</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span><span class="emphasis">* *</span></span><br><span class="line"></span><br><span class="line"><span class="strong">*****</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>- -</span><br><span class="line"></span><br><span class="line">----------</span><br></pre></td></tr></tbody></table></figure></div><p>这些都可以是分割线。如果你在你自己的博客网站加上美化，他可以看着更舒服哈哈哈。</p><h2 id="5-删除线，下划线。"><a href="#5-删除线，下划线。" class="headerlink" title="5.删除线，下划线。"></a>5.删除线，下划线。</h2><p>写法如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">~~删除线~~</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag"><<span class="name">u</span>></span></span>下划线<span class="xml"><span class="tag"><!--<span class="name"-->u</span>></span></span><br></pre></td></tr></tbody></table></figure></div><p>显示效果：</p><p><a href="https://i.loli.net/2020/02/18/O5K2AyjdYMRsLqN.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/02/18/O5K2AyjdYMRsLqN.png" class="lazyload"></a></p><h2 id="6-分点条列"><a href="#6-分点条列" class="headerlink" title="6.分点条列"></a>6.分点条列</h2><ol><li>无序</li></ol><p>markdown可以通过 * - + 开头作为列表标记。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">* </span>第一行</span><br><span class="line"><span class="bullet">* </span>第二行</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>第一行</span><br><span class="line"><span class="bullet">- </span>第二行</span><br><span class="line"></span><br><span class="line"><span class="bullet">+ </span>第一行</span><br><span class="line"><span class="bullet">+ </span>第二行</span><br></pre></td></tr></tbody></table></figure></div><p>显示效果：</p><p><a href="https://i.loli.net/2020/02/18/e6z4iBGOrKhySF1.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/02/18/e6z4iBGOrKhySF1.png" class="lazyload"></a></p><ol><li>有序</li></ol><p>有序的直接数字后面跟着一个点就可以了，和咱们平时写的一样。</p><ol><li>嵌套使用</li></ol><p>有序无序也可以嵌套使用 如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1.第一行</span><br><span class="line"><span class="bullet">  - </span>第一点</span><br><span class="line"><span class="bullet">  - </span>第二点</span><br></pre></td></tr></tbody></table></figure></div><p>效果：</p><p><a href="https://i.loli.net/2020/02/18/wg6JV1rRxzoEvAi.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/02/18/wg6JV1rRxzoEvAi.png" class="lazyload"></a></p><h2 id="7-区块"><a href="#7-区块" class="headerlink" title="7.区块"></a>7.区块</h2><p>markdown区块是在段落开头使用 “>”，依然是紧跟空格</p><p>写法如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="quote">> markdown</span></span><br><span class="line"><span class="quote">> 基础</span></span><br><span class="line"><span class="quote">> 区块引用</span></span><br></pre></td></tr></tbody></table></figure></div><p>效果：</p><blockquote><p>markdown<br>基础<br>区块引用</p></blockquote><ol><li>区块嵌套</li></ol><p>通过”>” 个数展示分层差别：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="quote">> markdown</span></span><br><span class="line">>> 基础</span><br><span class="line">>>> 区块引用</span><br></pre></td></tr></tbody></table></figure></div><p>效果：</p><blockquote><p>markdown</p><blockquote><p>基础</p><blockquote><p>区块引用</p></blockquote></blockquote></blockquote><ol><li>区块中使用列表</li></ol><p>实例如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="quote">> 区块中使用列表</span></span><br><span class="line"><span class="quote">> 1. 第一项</span></span><br><span class="line"><span class="quote">> 2. 第二项</span></span><br><span class="line"><span class="quote">> + 第一项</span></span><br><span class="line"><span class="quote">> + 第二项</span></span><br><span class="line"><span class="quote">> + 第三项</span></span><br></pre></td></tr></tbody></table></figure></div><p>效果：</p><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项</li></ol><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><p>注：在列表中使用区块是同样的道理，这里不再赘述。</p><hr><h1 id="三、markdown进阶"><a href="#三、markdown进阶" class="headerlink" title="三、markdown进阶"></a>三、markdown进阶</h1></body></html>]]></content>
      
      
      <categories>
          
          <category> 上课笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 上课笔记 </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开学计划</title>
      <link href="/2020/02/16/%E5%BC%80%E5%AD%A6%E8%AE%A1%E5%88%92%E6%B1%87%E6%80%BB/"/>
      <url>/2020/02/16/%E5%BC%80%E5%AD%A6%E8%AE%A1%E5%88%92%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">您好，请输入密码，不知道就别蒙了。</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="402ec7fa1d61df4dcdf0feae6a179e7b0bab6caf567a399f4661c3a83fd0a1df">ba7233cb4492a779478ef44e61ef447c28141d18b1231ef6bbffa250b7c0f66f24db462cc1261ba70150ff3ac99f766c1f94890d60773646e2115b802c8b3a09db38fb51734a671df187131ec5d06cdb4e9cec757c91a89496f2dcca128ea3002b4daf37332a0a787c27bf74f71ff4ac29afa9804c123bd9854ddcb2ef037ba7934bcb6c5304027e68bb26674f5885b6e2a5b1e6aa76feffc847dbf54cd67550ad0fea75204ba84daf46ed589f24e794739b848736141324c5e96679ac8754ea67ce0aefc9f856b605b9fef5c6339da2779d72002db303a22ed327b682b9841b128dd482cd48333a37d8546a1cbfbc1c6808745196a829718459107716358b5a9da558b86067d208e4eb5905f277f94622ff2fd5a7fb19dd60b76e0ea1ea9345ed49355d088e3d199138b845f16786189572eba377587b9bfcf8e975fdc54baee74f636a0d34f6baf8eff02cb7ab76866fc3e2a224868bf839b386f4db389324d74e584d6d914466f2598bd8533f79f8738a23f832ffd10df030de558a3a0362fac006419d33fc1de79595208444e99376b10993bdf1af8397d2d98574d871f7e74f442c01f3b404ab0ee2b6157450dc060736ac84cb1c782490f991fd6a8d1a8fb0b3a6f30459dc01638b792932b4fbae311c3e69cc205bdbbf6672e6dae91c27055842bb39f4bfe11132dcb868ff87fc3ae3c46325d9b6ea40d700126cc1322b6fde6100d6e0b2851da2df0713caf85ca19cea24135bc2c10641764ed83a92ed08dc47ee4e1dffff54adbc54906c2cd53231b58dbfcaa390c8e5074bea456e6284a7d373417d215adea0c82d26bd9b9b0b015d3ca3328f83810b4c981cb31c2dcc7f3b49f5850e95be44a07120ff4202ab45b5a9033232ecf66c8713011c6ab889e13156df830a8dc4f0e3fad545acba078ea6b0642e269f975df9e68097eac7d058540e26d3d021b0c047fe37d60c1e7b0f314789a3773debdd33dc0ab08399b071fa01b8395c9d2ebe68598ec234f1b0dc2b4f54e64f3de1c3cb1fba57a11db6ad2cdb190c2e3984b1788d2e3300da11451e5511f16776b08341e85c6ad34c8f09f85d962d98b91204dbfd5d905f7b0ae4035cd9f4a18170b2da4137358b03383503322cde4e347fbc0809ffca834625c225ea9bf8d9c9f795fbc0b8864aabdf6f75bab14be5d022c1d51e7c9554df7e1172cd8780d37fceb77054e413042b7a004f152900acb29cbdb2ae1d690ebbd7c70810008402f46f227f1eb9aa3c6adc617d9e6855046ecd1f0ac5fd89a8192d9b2641ff068828f59794516f2f1fc4fcef8d749a047d96dd559e92cb3c0096f48b15b5ba9b0be690b28a28c78640ff0156d4397917458f6316973484582834dbc8ebfd8e598c0aab74564d0e60101b7152b1f4a33c43d1c31cab1adeb37c5db7e64243ec5dbf88498a3fb7c7feeaa213fb3aa084326427c089f3dfcf798477dd00d829affcfb19848281f49dcd63c8501e87a66981802b522579de1c4282bd58eb142d98c08a83e52f41cd60200c7a83a9ac4b3c1a3804032f0ef6aacb59e61a6e59625061698dc8095bf9a3b208ae141e1044333677b0df30d9a6db064118ac2c0781d86d047e48be7b902a8b403c2af494f33e4ce64d52cb7a0cb556d0c562c71b08daa9aa264877e30577f8e5b5a3bd5d3a4ab59a40d32bd403e2c479b5baaa4ec5f5d26a4b3f1f7496093893d45003f516b14a09b5d87f8e787fc155689e0abae8df2f4fcb3166b2dfd873776bced0a41f5173d49235ce665daeddbc82538edaf94a2bf6155e5f50ab886e02bd384cbb3eaf720291ac359ca9d21cd0a5addf7a105814c5685ed5d84b0c297e3af972dc6ebd6c6635e8ac25abc6213e9ff2ae8c772209ba0541989f09f254dbf5b3caab4d5f493b7c09a2ad8e37cbeb2ce9ab6747bb86b23130cf0e741c83f46d197c830809501c0672d6704225dd6221fe66faefbaa40ebc060b400dc94103796ce1565d8292011e5090f93847e7324a034cfe8ab4896e22ed80770c3e2ba20374e5a4bb3f913dade181a01777a254b9d64ae3681ea893b2406046b65c55c5d4b058eb7d2535432d30db17c74ae8c97e45f49d37d82a6cfd2e97a29d02f10541d6d92325add757deb4617ff49535cb44d9eff4d8de1d3ac1fc4ef6ab73701ca50c6e19d9effc5fa080256c3c2a723b3a352e5b1825f4f761762ec8b32e01743f451f31253d088eef947caa6e6dc277d2d2bd2f50a0ef3ba59a611d8e1b08be9607793b3de572b5a8e9d2905ef08e16dd931e51575cee9c69e3d2896244253bc0fc6123ee712c96117b3282f75cd5e2b268121fa7168b16862c4bfebb75b1e4faca1c60890445fc393fb1546bc4f501d0e8f09b6a735df5def226e995d0c000e26310bc6aef9fa980312a0463da3cbdde8bae7854d4117bb932144edffdb6bb7b37948e0851f32193c082fad586f0e9c95ed3d2bf63146056b9a0ddf3252a0de1a8b2a30d359da659c4b0b7e24092208a2a90d6611911559c6c8d3578a63f53fdc847692febde5d47204252af6472bf405672b8ef62e9696db06c35cd8eafa6576640623987c0355577f13167d6ab254ea79c26b7e4b01f746b87d6e2b1122527e416e5046b8f44894e6860cc422984b4527621fc11cf70ca9ad3b792b5d7771e1c6b8a0a2133ed7339d5ca621bdcb5e60415c9cb336991f859673ec588ad28841796f71fbe26849ea6cf43d9d961962db92300837f4452eae1c696f0022cd20537aed36c196aa825ccceac221c9ace1fa2ccc49dbc15b0727c276427b2d424ac8ea0dde99ccf3bf64c15c2809cd3fed8c3da5b747447c90a55b0e039a672e5759153a5f2d4f3af7b592ea97ef13e22fc4a7190ef24c3f767a1206d8f8657eef9d3677505be640df9edd1b63ae258d09b42968bd029b95d124c36f2d5712dea71156472534e805c78dd26a45ca97f6178a573a6bb54d83c743a812054b21251ca2b043471dafe5aa7c9db58eeea7c4954fe1baddeb2608a63854593d6edb07fd08d40504c26d4d354e444cb0768c0f90932a7d02a39676360e778da893d42e162181d071c6cf945a702993a83d761138e9a621b80dc541c1e07d4b98c19aff08b7e0f85075c005dfc4e5689bb0467254d8f9cc244003a4b5991c07b19a4ddb65a8be76c65166a3b715b6ca0ab52ac4f164a41c2a424ea8283c93af610a7de469ab0c53e114b309c9ebc913644baaff994bb4347574e8bce2c0c9e55459e263643543a36fe7cf9229d8150076ed4e272a80ad86f1e0f039ec4746f880d0679a6aa8272604a3a1a45001395e48a56c99b07779b2e31b94457f1fa81d93293678ef6f895e42df7184ef63416d213b70dc05b86d910fb314d77f2d35ec35ef1ea54ec15a33696b7b78a17941e43145addf2819638679d3a921783cf79663b8b604066c7ee391c0ff6c2435979152c6e7c031da9897a02b63ba4029ab5e7fdf69b511d329cb7ff369dbe4cc8e44c94ac747e3ab9554abf6b8b8a040413ad807638cd58e86ae0eb885a05ff505d7dd7cd7cb75fe6c2f9c6015c5e342d507dcd9bbf1e4be20c20cf2e94feb7ceec8ba4fb3bb2d91656970bbad600c30a9973a20a1042394057663169d8bd1655809091f9e500d6f7ae939c58393ed467cb3cbdfb982ff705be5bf420295dbeb2da713b41d6ef0d9282bd106e15d2635c88f5ce1d36bed17cb076d43e1728576c0abe0c13818971200d79303b80cecc5a9c4d370ac9c32192ce0e105874c5422d46db604d24f2286f27714f041c5fcbfd797309fcaf47</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> My Daily Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
            <tag> 2019-2020春学期开学计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>word中如何加入带√的□ ?</title>
      <link href="/2020/02/12/word%E4%B8%AD%E5%A6%82%E4%BD%95%E5%8A%A0%E5%85%A5%E5%B8%A6%E2%88%9A%E7%9A%84%E5%B0%8F%E6%96%B9%E5%9D%97/"/>
      <url>/2020/02/12/word%E4%B8%AD%E5%A6%82%E4%BD%95%E5%8A%A0%E5%85%A5%E5%B8%A6%E2%88%9A%E7%9A%84%E5%B0%8F%E6%96%B9%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h2 id="打出有勾的方括号"><a href="#打出有勾的方括号" class="headerlink" title="打出有勾的方括号"></a>打出有勾的方括号</h2><p>输入一个大写R，之后选中，把字体改为：wingdings 2 就OK了，然后自己试了试在这个字体下输入了一些别的字，发现有许多图形，还很不错。</p><hr><p>于是就百度了一下对照表</p><h2 id="如下："><a href="#如下：" class="headerlink" title="如下："></a>如下：</h2><p><a href="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1176238582,3363171188&fm=26&gp=0.jpg" data-fancybox="group" data-caption="对照表" class="fancybox"><img alt="对照表" title="对照表" data-src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1176238582,3363171188&fm=26&gp=0.jpg" class="lazyload"></a></p><p>在这个字体下，对应输入，就会有这么些不同的图标，不错不错，长知识。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Microsoft技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> word技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My Daily Life Feb 11th</title>
      <link href="/2020/02/11/2020-02-11%E6%97%A5%E8%AE%B0/"/>
      <url>/2020/02/11/2020-02-11%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">您好，请输入密码</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="9a4c8bf042a0afe4cf960896dbc4b5c5e2fac7ad9a596b57c9074c2b91310de4">ba7233cb4492a779478ef44e61ef447c28141d18b1231ef6bbffa250b7c0f66f24db462cc1261ba70150ff3ac99f766c1f94890d60773646e2115b802c8b3a09db38fb51734a671df187131ec5d06cdb4e9cec757c91a89496f2dcca128ea3002b4daf37332a0a787c27bf74f71ff4ac29afa9804c123bd9854ddcb2ef037ba7934bcb6c5304027e68bb26674f5885b6e2a5b1e6aa76feffc847dbf54cd67550ad0fea75204ba84daf46ed589f24e794739b848736141324c5e96679ac8754ea67ce0aefc9f856b605b9fef5c6339da2779d72002db303a22ed327b682b9841b128dd482cd48333a37d8546a1cbfbc1c6808745196a829718459107716358b5a9da558b86067d208e4eb5905f277f94622ff2fd5a7fb19dd60b76e0ea1ea9345a4b2ea1f21c3983a4d03e453e89377571e5597f36ed8fd310d326994b4c2373188fecae242c6f63ce25420d391205f9a5ec9e383a45300d660e6e44882614049c3220756c453aecdf0168d12628f4ed9fe1a64a3ce5187acb14eb12fb3e063f7120e58d6250cb854091268db8c5e2103fc41673465c7abbbfa18d9ff09dc1b9cbb15a9a4937d9e602e9f238b01e76faa79b529c27d592318de0ee483bfb89de68c82c62be8eadac45819abcf7dfbb0e826642ff28a9e87c400f5fe97e6418b36f46b941e8a69ff38cb7805481165ab5969596f8e031abffe2ecfff8eabb17b777e1de0e17209d12004eee0f953d6a11923c65765e71d4d2c547b2c4a237432a05cc5b4aa16abbdb344196e67cbde0f1ece471dfa1cb8eee8ec930762ed3742fb5e214e28716d3094429c799a4948607c46e46de64d57514eb851cea5b53d767ce32fb189ef5ef85704ea582b6915113ef9fcfee2ed45f57ba718cf12a06735d8b3a6b7d89cb22ee9375ec99af0a9d3da62b61ba7872101579116687950e5c6cc2a0a56e0bbe530098310f7a998f28e1fd08a0628e29fb7d2e87001c0b19cac4cf77002924fc3b2bfc373af4b7f4de3a44e539ad793385af20d094b5732380851339f1ffe17142c288dade3e0d0d8f2a96dc246ebcb89f8031607a091dc03cbf22ba32f6ee345e95e5a516805227a6221cb7255a667ab64f852f39c5c5a6a0bcac3d3f0c73b7532ca2eb24798159b3232ac70d4ded6ca09a525a9c5cadcd5d09b9bf6406dea90214dba67ac35658b8e29bffaaa9efbb9b31a4f38b96d5aa290eb2aa0cd3cb507bcb1b3ef1a9cff92ad82840ac7952f1c24563164e17c1d8b0fcb5171b9a84946f4380c08aeae3255603bff76ccf6ccbc2302ace398e047a231f640e45a104f0d66149368bf09ef62353ddd84569ae7b8249b0ba103e5c464608f98f219d97fc9b80aedb04be5fd932ffac0b3d55fd2e262d2f20735c3f85bca5a8164f74ee74084e6a6bede57eb7a83ae9882d769801cf40c12231f5878882e9ef6c947f94462dde5e892bd7408b3148b6ac7696a9b05fd63afabe4c01d05049c5d94c55558aca06c684dc36665f14d45054ac36eb3fa45715b3b36821c0439f39703a6c9c9341b9d2f9c631655ed8cbc08b31b0368d7dc1f4cddb6fe211b8139eaaf144abcc7fc7ceecf8c9fb64737fbd3920f86c40edc3b519932406b82893c842b1a5222352a050d86f048b1c1f3b28c91311744b9bdecad5922b44ed4e3d055d8ae2ef193b802ef49831501d170919e96d89c4bb7bff108fabdae3e7d931e7e3c788ceee5d8c214a3726a8fe11db2f4d8be403dcb4ac8c47918a66ce417c5898291dd517d104b4f8144143359445c756d26bf712c30c73d2d02cc584269de74bfa6b8de8f2f90da364937e1827fe66f224f496ff62e844581723b1e513738a822b6cd992021afa4472784435ae324d1d47cf306c40390221aa59d6d9932c6fd33ad279c3374e11672d31ccbad96f11ffeff28dd70896223726f88a13cedacbbe174359b55f2badd4133aab8b8e696b36dff3a730509a5a51e22f298e7ec40a2ee0935cc9f1ad9b880be51003bb9791c27de3964253d52545a31a4c0add9e1fdd1471791075a9edf20ec6665e6568a4d292399e2186c73b02014bc115dfea6cf58b0618006025c43fd5a9d95b17f703c1e984e86bb2ecc45193bf906a0117a51f5fdf49689ef2193459513a8a6fee284e4954ea07be544e5e5d8bdb6f4dab3c2eb16436f1f587aa41b5b44c5dc526ed067cfe95d5c6946ac5f372c33454798c42bbb21c60affa95b31b49aa40ac2de52f1e86aa21345dc5d1bbea5199323943ef53965367611c0c26c962fa4f7fa0658507000440de385b5194d087e8e7d700a34d9a06e54447473093cb057a6df7a9d3ccd45c84eb160ef3e6c9c65425149ca4472754b672634661164a6a9b036046a893cf43584029cdbf94141e64d86939df59dc5cf596065cdfde11ce6b39292a52d3863d46fee9e929735f5ec9ad3cd04e54eb5dd70cab14030eaa26479f2d78fdb4605c528a94da0304e53b07e8e446036cc0c96aaaf82b29bdc655d8448154f3ab46a79a0c084119d77c8bb7c7bed34fd4c3ef9837e4282617db8d73878f2e7d6324531774a23ea523810f7b236ed0f002f1714d652644e2817aa6169b6a790b7c9db1e77253e1b2ea92ddea6955a7fbbe000d166c536407c367176197520e821ef67b1020a4d6106a9583d9ccffb0957138c1ecc0e442a72464384a6f4a1e4afe1adb334526e01c0dcf68228094c876d186548eae88af453b6506d7c086bfb83a82a1bdb15de70aa2e69f6b8f1a6f8932cd857f1b77005543daf707539808bb3b2b77cac63c377527685abf29e47308da06473b23dae1b8c5d340f8d3e08bfcf5b458374d88c095808ca68338a1581776342549fa1807f4bb37437e7aa40290f213815f89f9c325ea6606a7f2a04b195900c442bcd2c45f536a98140822b1210236278626cb4565778a6ee085c847cf5d9ac2ec29c80541ff1faf62e0f1c22f3abc9f35d94bc8ef041c06d717debc26edf6f7519e6bac5a21bbd8bf85a4f80c09f73a8984807e19ee8e1f248a1e814e83d8b60e5679fde7c77a226745d082d60716df06aefee780ada4f83cb7cb6d58d6f1e95acaf67b4cd50076dd14c9dafdfce405dc571ce193cc5109cee428354df379bd35ce9d876374e569d9e639806d1700a9b2dcca62b0d890f24c0dd6a3ea84d53b07319aeac47b5ee57c033e966399fada12b2bf2d106f62eccdbbba8bf98e46d4216deb06260434205e31a1bd4a47745c27c0491b123f73004e7435c7616e1dda572f9374bcdd71303b2b508d6412ff1b4a819dab9c58555f1a8ded41a4a18192e111f10a4f41756b2e224aedd545a4b9e9eefb58e2884c71a34e6a64e28fda4246647f46df1039c67a39aa1408efeb7d58fb9b540ff57ecd7fc21f61da76a0d20e3dec3c61c0966e4fbb47ae9408ee4d0798663ecfa5752e9773e8ed18a81cd489a7208b2ac5cc02b588aa1282c179f586b174cdf339cd08f02c1bc4f70b87e43b8177ef3efa1a43b764884f01ac71bcf11e1da3d424a2e9e946b30a35b7803353b3083fa9a7d620c59ab91aaa076c368b11198eef2535bc5e42faba9d40695641873dbb65f2aad989e5b45e02730f944dcb45dde3120fa048610313cd3da820ba1d8db4871dc2a64e653418acd44752609793c99d494b9b95e3b133fde904b522e039d44c1834921bf2db9cd6bcea3b59a58d0eba90397633c8c66881aa877622eac5453dfb64a9df25019afc0d31ccf937ad35817792b355719a78fdf0e0fa24583ca37212cae8d7b39f56aaba5e2e4979426fa7eb735dd4bf6d266d5c71d089df9a313d5a9603fa89cc5d9c8b28bd010fa448b2ee3d162eaeb8323c5d4b24d67f933c117d3d45f7bccc3306a73edf3f5164ba36a479273505b823f55a36488fb0f4e086685c3a291004d06fc4b2f6b4c3e22c8f2b8fa7d3ca6b2ada41d6412859578aa950dc865718f1e6546bfde4efaf0d627595b77decd0a8bab64c110b95f8777abbb0607e62abf9550a7c658f0581f0baf06d8a2a4dd29fdb8f8bb3e7c81bd1313bb85676cc1347e895de613205611b2c5a3bd81427dc40e97e161b295dc18f842fcf031237d1f4ddba8971e46b60927431fc1a07ce3bdaa9b860328438a51e06c9c38650dc3555535a4ceca076018b2c960a6944f2b287f3c159375ab485feb5acd74483e8d3fa591ea3d35d7d1644ff34b6e486349fcadb17f7d5ecde50b244a87c1eb7f7c0c6ec876f566bd3cae9a48939419d92eb4202b65a51a424cc427e19bb00e5a7d333ed2e5d4850a967bf6665bf8b534d8ba8f4c6e047eee7551135c43a6b9e4353ed18a62f449315895f245f4ce961c26ad51b50f20f45fc608f53065c907855d1b9bbef526df3858c556610cd2da7c06d2d5ba4d4908d0b9dc145b79df56b7f66a75b530a4eed885486672069d165152a79e33aabd93c75259aea6765c8fc2a57ee0f3bd3d353a8a30d299f85d3a3bcc5a4613eeb00009cd9fbe38562aab3880424154acabe84151c175dc8dba1d8178c1ca5758d9f5ea7116edd619db4b81d2e86ff6a46bcae9111834833293b63dcdb4293a5e664c5e35a2a74dabf414e5d7609347129ed6da2a3838925d5ec37e151d455804394fbe12a2a283f1898da6830a23532c6d60cc54d23895dc78eacb4184cc88959d21f530e5cd6f2fa9bd419b5884b76835ff06166edf0a84af6b7addc0daeb104f13f111faa2d041cd82a0d4e9f7aca68f437ae3768b523385cf697ea08ed9851c1ea45de6fa9c45fbf742dcef689d02a7f4921b466273d21ef379c2606a2060c904fbb2c1e46ddf1cced679750ec9e88c78f8cbba7247c26b2458488a700ec5e9dfb6cb8c3d20e6ea3e0fb347ea5cc4a07be19e7f581608b944b072bfa5dcdec6881d7a02e1d6e80ec9ee9515b7680fd9356ecb0c1f615b6b7cce68a734098620dab6e3e1de1669670efb5d592247ea9b3c44a1ec2e7ba71253d4a506d90a39d252eb170bdf69ee349945f21cbaff03c6e14c615223c705bf81084c8f0a2c8c0aa96efbb56619e66d1c7901bc985031fd81c87551fb0a13c26de638f7bc115d0208e1e26dd272cc4f3d6f5e01fd5fa34b792961b0d95ec3b0914e6ded4675d14848c56ac13b44f75a74dde68fa84778d6c2da1f9bc0f2017b0995d39b51486938cd8c278947a47a99c3e936d9ad262b2d144e574162248e8b7dfbd4b0f276740330691b6fcb7384e95f0bf0455a7204844fd39a56024d4bb9a00b70f8dc479c0387de4eed37f56534d72c3503c379d18f971917971356deaf7e385f8f6c797a3c68e3103f4f2e2568567f770ff1bfd131d4877589b01e5ad39378409ccae7a4b28bc1330bae1b8dfaec8c96090c</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> My Daily Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
            <tag> 寒假终极计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My Daily Life Feb 10th</title>
      <link href="/2020/02/10/2020-02-10%E6%97%A5%E8%AE%B0/"/>
      <url>/2020/02/10/2020-02-10%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">您好，请输入密码</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="525649c6d4feea644c7582007521606906160e5ea8edb923c7a3b3cd1031714e">ba7233cb4492a779478ef44e61ef447c28141d18b1231ef6bbffa250b7c0f66f24db462cc1261ba70150ff3ac99f766c1f94890d60773646e2115b802c8b3a09db38fb51734a671df187131ec5d06cdb4e9cec757c91a89496f2dcca128ea3002b4daf37332a0a787c27bf74f71ff4ac29afa9804c123bd9854ddcb2ef037ba7934bcb6c5304027e68bb26674f5885b6e2a5b1e6aa76feffc847dbf54cd67550ad0fea75204ba84daf46ed589f24e794739b848736141324c5e96679ac8754ea67ce0aefc9f856b605b9fef5c6339da2779d72002db303a22ed327b682b9841b128dd482cd48333a37d8546a1cbfbc1c6808745196a829718459107716358b5a9da558b86067d208e4eb5905f277f94622ff2fd5a7fb19dd60b76e0ea1ea934506d34749cc737e9f35308f7d03931b04c75573324f1a35216d55464390d19a8575a5881c658ef3c8b40d59ceecb1f8314133489e206c26cbdc032fbbfe18643a0a2c3b0b8e1197d08aa0a40be748ef8c901da6e7689f1968e37da3ca5670399fbff0d24e9880cd1f3a3bc6ff97b67d5ab4ea702391e7cc2f6a4ea08c061c9b23c50d8548b3f069d970c147ad45ab306869a6a4c91a5344c82be31ee02e59854390ff1c6b229117f0c2083265ef8961f4c2969b24b8b15346850ce186113cd3613bb320da164c5a1df9f43ca987dff52cd4defb83809b90615482322f4c2df2d0896230665d6dd7c1eabd345c142d125bdf99419499a5c3c264d09cb87562788a266626228877006a6b7adcf3ebbbd248e9658069fedc4e1e52e9827b6862fa97fa83a199709acb962bb416eb0cff83da31e1cb3cd2bdbdc91b89b5462b5a713e90775d28ea533f4568e49fcdb83ec5b70d242f45df6fa3526e9e222d247c69f5ff33528294dfa1eac96aa3e0ca513c1a3e802b3d7adb3b21210b57ec1e98ac7f77649a8fa1404438e0771731e510fa34114e10dc63de1f1a67ec408e13e5c19d29ce08fb80f7c372051567ae56a4d0eb7aa39d1172d7ffa224202cf9806eec887416c7b4ed4589b15f5accd80086adec7a9093b0dcb978a2cb28fc238de57bddd01903af7a8f23d42b449d06d8ae57144680aa0fd9d1b71bfde34897748bd1abbfc570d5fa92a58d191d3f28090fbe50d697a2390cd85f28c61ebecc72a7c92fd1973ff86eb54f47a7817a56aa927dbb9ac29903199564cbec5376a876a1197385bbc4e3219797cd0b87978cbfee8879c0c846bbd9ca3049f3bde5437d6cc22320efe176749813b2426b900d6815dfae7ef2370e1cbbf29068eda205cdc8550bb1a5875028208a3f5570f8774e02bc42ce204ecd922de5009f4a867fafbc721c63b6db07040241e28ad67051a56b13136e62ba337917b514bb8ef92e31344a0dd717bcc2f97987448b60e813e40808293b15a47324e441719d12627b0c1048bb2658cdc1fa81ba629e07de87766affcf3581c179b4fd3ecfc2a9019fa53c0c17d8995df8a550299c8aa11e200841ad1dd628a281cc8852db65af8f1f375fd4ec552b2d9a3f27dfb1abd3d79bca9063500b787129a7e297d651a102324a7efb0c9e67a395bca432257bd33edd4cef0c0f685ceb46ac528ae193d579c2f0859403240615d3b13472f1aecdd9e8dccb742f87aac3c292e933358e3bd0eb68fc7e7dd468bf4d294cb2c36b2c4a4e0f8a8e8fb0a9defd69a2e835bc9fa85e2c69ffd0dae2a2e3e8823efa7c292804f1550380daf5ad71eea20ed0d59e1a18b3a3857547396bb7b475f4161d4c69dd7179077d8250ff82bdb2e81fc4abfb42bbf32ff21f773f31bdfd3a00ea013ac60bcd01d7327a615d128f8e222f7ced656b8c13fa0b507d416d93a3428e2e0947aba78c93a7e3c7423de6e0145ac1cf7cfad86a71be8aed0057e94461c206783edb3b2b7ffe6596b038dfdaa3ca702d8af529c43f17118c2e7b34970a2be3feb0d710d7c364dc212eae6cc09727dc5a5c95a5c30c70bb6fd07227b9cd1ffeb5048ccf5e44</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> My Daily Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
            <tag> 寒假终极计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UIKit与swiftUI 交互</title>
      <link href="/2020/02/09/swiftui%E4%B8%8Euikit%E4%BA%A4%E4%BA%92/"/>
      <url>/2020/02/09/swiftui%E4%B8%8Euikit%E4%BA%A4%E4%BA%92/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h1 id="UIKit与swiftUI-交互"><a href="#UIKit与swiftUI-交互" class="headerlink" title="UIKit与swiftUI 交互"></a>UIKit与swiftUI 交互</h1><p>运用swiftUI写界面非常迅速且酷炫。大大减少了曾经在UIKit中的代码量。<br>不过有时候可能你还会需要用到UIKit，但是你又想用swiftUI做界面，此时就考虑到二者交互的问题了。</p><h2 id="UIViewControllerRepresentable"><a href="#UIViewControllerRepresentable" class="headerlink" title="UIViewControllerRepresentable"></a>UIViewControllerRepresentable</h2><p><strong>在swiftUI中提供了一个UIViewControllerRepresentable协议</strong><br><strong>我们可以用它作为UIKit 与swiftUI的桥接</strong><br><a href="https://img-blog.csdnimg.cn/20200113121716232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200113121716232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><h1 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h1><h2 id="你依然可以像往常一样，新建一个swift文件，把他命名为viewController-然后导入UiKit-，然后再让它继承UIViewController-重写父类的viewDidLoad-方法，你也可以往里面随便添点东西，为后面验证做准备，just-like-this"><a href="#你依然可以像往常一样，新建一个swift文件，把他命名为viewController-然后导入UiKit-，然后再让它继承UIViewController-重写父类的viewDidLoad-方法，你也可以往里面随便添点东西，为后面验证做准备，just-like-this" class="headerlink" title="你依然可以像往常一样，新建一个swift文件，把他命名为viewController 然后导入UiKit ，然后再让它继承UIViewController 重写父类的viewDidLoad()方法，你也可以往里面随便添点东西，为后面验证做准备，just like this.."></a>你依然可以像往常一样，新建一个swift文件，把他命名为viewController 然后导入UiKit ，然后再让它继承UIViewController 重写父类的viewDidLoad()方法，你也可以往里面随便添点东西，为后面验证做准备，just like this..<a href="https://img-blog.csdnimg.cn/20200113122152672.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200113122152672.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></h2><h1 id="第二步-桥接"><a href="#第二步-桥接" class="headerlink" title="第二步 桥接"></a>第二步 桥接</h1><h2 id="第二步就是在你的swiftUI文件中写一个结构体连接你刚创建的viewController-他需要遵循并实现UIViewControllerRepresentable这个协议"><a href="#第二步就是在你的swiftUI文件中写一个结构体连接你刚创建的viewController-他需要遵循并实现UIViewControllerRepresentable这个协议" class="headerlink" title="第二步就是在你的swiftUI文件中写一个结构体连接你刚创建的viewController 他需要遵循并实现UIViewControllerRepresentable这个协议"></a>第二步就是在你的swiftUI文件中写一个结构体连接你刚创建的viewController 他需要遵循并实现UIViewControllerRepresentable这个协议</h2><h1 id="第三步-应用"><a href="#第三步-应用" class="headerlink" title="第三步 应用"></a>第三步 应用</h1><h2 id="接下来直接在你swiftUI中结构体中调用第二步的结构体就OK了"><a href="#接下来直接在你swiftUI中结构体中调用第二步的结构体就OK了" class="headerlink" title="接下来直接在你swiftUI中结构体中调用第二步的结构体就OK了"></a>接下来直接在你swiftUI中结构体中调用第二步的结构体就OK了<a href="https://img-blog.csdnimg.cn/20200113125213490.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="第二步与第三步" class="fancybox"><img alt="第二步与第三步" title="第二步与第三步" data-src="https://img-blog.csdnimg.cn/20200113125213490.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></h2><h1 id="显示效果如图"><a href="#显示效果如图" class="headerlink" title="显示效果如图"></a>显示效果如图</h1><p><a href="https://img-blog.csdnimg.cn/20200113130421611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200113130421611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><h1 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h1><p>viewController.swift 文件中：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">swift</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">viewController</span>: <span class="title">UIViewController</span></span>{</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        <span class="keyword">self</span>.view.backgroundColor = .brown</span><br><span class="line">        <span class="keyword">let</span> viewDemo = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">100</span>, y: <span class="number">100</span>, width: <span class="number">100</span>, height: <span class="number">100</span>))</span><br><span class="line">        viewDemo.backgroundColor = .green</span><br><span class="line">        <span class="keyword">self</span>.view.addSubview(viewDemo)</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>ConventView.swift 文件中</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">swift</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UIKit 桥接</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UIBridging</span>: <span class="title">UIViewControllerRepresentable</span> </span>{</span><br><span class="line">    <span class="comment">//这个UIViewControllerType你要接哪个就是哪个，在这里就是viewController</span></span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">UIViewControllerType</span> = viewController</span><br><span class="line">    <span class="comment">//必须实现的方法，当swiftUI要显示view时，会调用这个方法。返回值就是当前需要显示的类</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeUIViewController</span><span class="params">(context: UIViewControllerRepresentableContext<uibridging>)</uibridging></span></span> -> <span class="type">UIBridging</span>.<span class="type">UIViewControllerType</span> {</span><br><span class="line">        <span class="keyword">return</span> viewController()</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//更新UIViewController时会调用此方法</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">updateUIViewController</span><span class="params">(<span class="number">_</span> uiViewController: viewController, context: UIViewControllerRepresentableContext<uibridging>)</uibridging></span></span> {</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span></span>{</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> {</span><br><span class="line">        <span class="type">UIBridging</span>()</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView_Previews</span>: <span class="title">PreviewProvider</span> </span>{</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: some <span class="type">View</span> {</span><br><span class="line">        <span class="type">ContentView</span>()</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="注：你也可以写在一个文件中，但后期为了看着方便，简洁，还是分开写比较好一些"><a href="#注：你也可以写在一个文件中，但后期为了看着方便，简洁，还是分开写比较好一些" class="headerlink" title="注：你也可以写在一个文件中，但后期为了看着方便，简洁，还是分开写比较好一些"></a>注：你也可以写在一个文件中，但后期为了看着方便，简洁，还是分开写比较好一些</h2></body></html>]]></content>
      
      
      <categories>
          
          <category> IOS开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> swiftUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeblocks中文乱码解决方法</title>
      <link href="/2020/02/07/Codeblocks%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2020/02/07/Codeblocks%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><p>Codeblocks中文乱码解决方法：</p><p>特别提示：出现中文乱码情况才执行以下操作，未出现请勿随意修改！！！！</p><p>打开Codeblocks -> 设置 -> 编辑器：</p><p><a href="https://img-blog.csdnimg.cn/20191205172416635.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191205172416635.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><p>然后点击 Encoding settings -> 选择编码 -> 选择UTF-8 -> 确定：</p><p><a href="https://img-blog.csdnimg.cn/20191205172454640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191205172454640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><p><a href="https://img-blog.csdnimg.cn/20191205172512827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191205172512827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><p>点击设置 -> 编译器：</p><p><a href="https://img-blog.csdnimg.cn/20191205172528406.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191205172528406.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><p>点击Other compiler options->在空白处输入</p><p> -finput-charset=UTF-8</p><p>-fexec-charset=GBK</p><p>点击确定 -> 随意修改下代码 ->重新生成。</p><p><a href="https://img-blog.csdnimg.cn/2019120517254235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/2019120517254235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><p>即可解决乱码问题。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Mac骚操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac与windows兼容性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac修改键盘之 将 caps lock修改为esc</title>
      <link href="/2020/02/05/Mac%E4%BF%AE%E6%94%B9%E9%94%AE%E7%9B%98%E4%B9%8B%E5%B0%86%E5%A4%A7%E5%B0%8F%E5%86%99%E9%94%81%E5%AE%9A%E4%BF%AE%E6%94%B9esc/"/>
      <url>/2020/02/05/Mac%E4%BF%AE%E6%94%B9%E9%94%AE%E7%9B%98%E4%B9%8B%E5%B0%86%E5%A4%A7%E5%B0%8F%E5%86%99%E9%94%81%E5%AE%9A%E4%BF%AE%E6%94%B9esc/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h3 id="想必进来的都是vim重度患者了，在vim里需要经常使用esc键。而他的位置真的事提高效率一大绊脚石之一。"><a href="#想必进来的都是vim重度患者了，在vim里需要经常使用esc键。而他的位置真的事提高效率一大绊脚石之一。" class="headerlink" title="想必进来的都是vim重度患者了，在vim里需要经常使用esc键。而他的位置真的事提高效率一大绊脚石之一。"></a>想必进来的都是vim重度患者了，在vim里需要经常使用esc键。而他的位置真的事提高效率一大绊脚石之一。</h3><h3 id="大多数的人都是将caps-lock-修改为esc。"><a href="#大多数的人都是将caps-lock-修改为esc。" class="headerlink" title="大多数的人都是将caps lock 修改为esc。"></a>大多数的人都是将caps lock 修改为esc。</h3><p>因为caps lock 处在了最重要的位置却几乎不怎么使用他，如果用大写直接按住shift就可以了。</p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>之前在网上查到了关于此类的问题，说需要下载一个第三方软件，我推荐一个非常简单的方法，就在mac的设置里：</p><h4 id="找到系统偏好设置———-gt-键盘———-gt-左下角有一个修饰键"><a href="#找到系统偏好设置———-gt-键盘———-gt-左下角有一个修饰键" class="headerlink" title="找到系统偏好设置———>键盘———->左下角有一个修饰键"></a>找到系统偏好设置———>键盘———->左下角有一个修饰键</h4><p><a href="https://img-blog.csdnimg.cn/20200119094846166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200119094846166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a><br>把第一个改成Escape就好啦</p><h1 id="后记："><a href="#后记：" class="headerlink" title="后记："></a>后记：</h1><p>实际上如图所示，mac已经提供了部分功能的修改，如果还想修改别的键，直接修改就好了</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Mac骚操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客基础命令</title>
      <link href="/2020/02/04/hello-world/"/>
      <url>/2020/02/04/hello-world/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure></div><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure></div><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure></div><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> Hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim 基础操作 + 配置文件设置 基础版 for mac</title>
      <link href="/2020/02/03/vim%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C+%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AE/"/>
      <url>/2020/02/03/vim%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C+%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h1 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h1><h2 id="vim-模式"><a href="#vim-模式" class="headerlink" title="vim 模式"></a>vim 模式</h2><h3 id="1-normal模式"><a href="#1-normal模式" class="headerlink" title="1.normal模式"></a>1.normal模式</h3><p>当我们用vim创建或者打开一个文件的时候，就是normal模式，然后我们可以输入一些指令，更加方便的操作文件。</p><h3 id="2-insert模式"><a href="#2-insert模式" class="headerlink" title="2.insert模式"></a>2.insert模式</h3><p>顾名思义就是可以进行编辑自己的文件内容了，从normal模式到insert模式有很多种快捷键，稍后一一说明。但是从insert模式到normal模式需要按esc键，没错，当我们常用到vim进行编辑的时候，会非常频繁的使用esc，但是他的位置却不是很让我们提高效率，在这里我们可以吧caps lock 修改为esc ，毕竟caps lock 真的没什么用，却处于一个非常方便的位置。</p><p>==具体修改可以看这篇博客，这里不再赘述==</p><p><a href="https://blog.csdn.net/VistorsYan/article/details/104036840" target="_blank" rel="noopener">Mac修改键盘之 将 caps lock修改为esc</a></p><h2 id="基本操作命令（增删改查-保存退出）"><a href="#基本操作命令（增删改查-保存退出）" class="headerlink" title="基本操作命令（增删改查+保存退出）"></a>基本操作命令（增删改查+保存退出）</h2><div class="table-container"><table><thead><tr><th>操作符</th><th>作用</th></tr></thead><tbody><tr><td>i</td><td>在光标前写入</td></tr><tr><td>a</td><td>在光标后插入</td></tr><tr><td>o</td><td>在光标所在行下一行插入一新行</td></tr><tr><td>O</td><td>在光标所在行上一行插入一新行</td></tr><tr><td>shift+i</td><td>行前插入</td></tr><tr><td>shift + a</td><td>行尾插入</td></tr><tr><td>h j k l</td><td>光标移动：←↓↑→   上下左右键也可移动</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>操作符</th><th>作用</th></tr></thead><tbody><tr><td>x</td><td>删除当前光标所在的字符</td></tr><tr><td>:wq然后回车</td><td>保存并退出</td></tr><tr><td>dd</td><td>剪切当前行</td></tr><tr><td>p/P</td><td>粘贴 前者是在光标之前，后者是在光标之后</td></tr><tr><td>yy</td><td>拷贝当前行</td></tr><tr><td>/+要输入的字符串</td><td>在文本中查找改字符串</td></tr></tbody></table></div><h1 id="配置文件设置"><a href="#配置文件设置" class="headerlink" title="配置文件设置"></a>配置文件设置</h1><h2 id="创建vim配置文件"><a href="#创建vim配置文件" class="headerlink" title="创建vim配置文件"></a>创建vim配置文件</h2><h3 id="在根目录下找到-vim文件夹并打开"><a href="#在根目录下找到-vim文件夹并打开" class="headerlink" title="在根目录下找到 .vim文件夹并打开"></a>在根目录下找到 .vim文件夹并打开</h3><p>注：如果没有就新建一个.vim文件夹并打开即可。<br></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/</span><br><span class="line"><span class="built_in">cd</span> .vim</span><br></pre></td></tr></tbody></table></figure></div><p></p><h3 id="然后-在当前路径下："><a href="#然后-在当前路径下：" class="headerlink" title="然后 在当前路径下："></a>然后 在当前路径下：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim vimrc</span><br></pre></td></tr></tbody></table></figure></div><p>这样就有打开了一个新的文件，这就是配置文件，你可以在这里进行“肆意的”修改</p><h2 id="键位修改"><a href="#键位修改" class="headerlink" title="键位修改"></a>键位修改</h2><p>有时vim的一些快捷键很不合你的口味，比如方向键，所以可以把方向键的位置改为符合方向的键。</p><h4 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h4><p>我想把h 键改为 i：（直接在vimrc里面写）<br></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">noremap i h</span><br></pre></td></tr></tbody></table></figure></div><br>此时i键有着和h一样的功能，但是i键本来是有功能的（插入），因此==切记==不要忘了把i给改为别的键，如果你还想用这个功能的话。<p></p><h2 id="指令快捷化"><a href="#指令快捷化" class="headerlink" title="指令快捷化"></a>指令快捷化</h2><p>vim 保存命令是在normal模式下输入 :w 然后回车，虽然很方便了，但是可以更快：<br></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">vim</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">map</span> S :<span class="keyword">w</span><span class="symbol"><cr></cr></span></span><br></pre></td></tr></tbody></table></figure></div><br>现在直接用S即可保存，（w后的不用我说也清楚是回车的意思）<br>以此类推：举几个常用的例子<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">vim</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">map</span> s <span class="symbol"><nop></nop></span></span><br></pre></td></tr></tbody></table></figure></div><br>nop(no operation) ==取消s的功能==<p></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">vim</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">map</span> Q :q<span class="symbol"><cr></cr></span></span><br></pre></td></tr></tbody></table></figure></div><p>退出<br></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">vim</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">map</span> R :<span class="keyword">source</span> $MYVIMRC<span class="symbol"><cr></cr></span></span><br></pre></td></tr></tbody></table></figure></div><br>刷新（应用的意思）<br>注：这些都需要保存退出以后才能生效，如果刷新，即刻生效<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">vim</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">synatx <span class="keyword">on</span></span><br></pre></td></tr></tbody></table></figure></div><br>代码高亮<p></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">vim</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">number</span></span><br><span class="line"><span class="keyword">set</span> cursorline</span><br><span class="line"><span class="keyword">set</span> wrap</span><br><span class="line"><span class="keyword">set</span> wildmenu</span><br></pre></td></tr></tbody></table></figure></div><p>打开行号<br>添加下划线<br>如果该行已满 自动换行<br>命令自动补全 tab 同bash</p><h4 id="有关查找的指令"><a href="#有关查找的指令" class="headerlink" title="有关查找的指令"></a>有关查找的指令</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">vim</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> hlsearch</span><br><span class="line"><span class="keyword">set</span> incsearch</span><br><span class="line">exec <span class="string">"nohlsearch"</span></span><br><span class="line"><span class="keyword">set</span> ignorecase</span><br><span class="line"><span class="keyword">set</span> smartcase</span><br></pre></td></tr></tbody></table></figure></div><p>查找时高亮显示<br>边输入边高亮<br>当再次进入文件时不显示高亮，否则还会显示上次查找的高亮<br>忽视高亮<br>忽略大小写<br>智能大小写</p><p>==注：查找完后会依然显示高亮，去除高亮的命令是==</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">vim</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">nohlsearch</span><span class="symbol"><cr></cr></span></span><br></pre></td></tr></tbody></table></figure></div><p>可以根据自己的意愿，按上边的方式修改一下快捷键去除查找后的高亮</p><p>以上仅提供了一些基础常用的设置，还不是全部。。。。<br>有什么更好的指令欢迎下方留言，嘻嘻😬</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Mac骚操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C指针问题之不同类型指针之间的区别</title>
      <link href="/2020/02/02/C%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98%E4%B9%8B%E4%B8%8D%E5%90%8C%E7%B1%BB%E5%9E%8B%E6%8C%87%E9%92%88%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/02/02/C%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98%E4%B9%8B%E4%B8%8D%E5%90%8C%E7%B1%BB%E5%9E%8B%E6%8C%87%E9%92%88%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h1 id="会想这样的一个问题："><a href="#会想这样的一个问题：" class="headerlink" title="会想这样的一个问题："></a>会想这样的一个问题：</h1><h3 id="指针就是地址吧，那么指向int-的指针也好，指向double的指针也好，他们有什么不同么"><a href="#指针就是地址吧，那么指向int-的指针也好，指向double的指针也好，他们有什么不同么" class="headerlink" title="== 指针就是地址吧，那么指向int 的指针也好，指向double的指针也好，他们有什么不同么=="></a>== 指针就是地址吧，那么指向int 的指针也好，指向double的指针也好，他们有什么不同么==</h3><p>emmmm<br>貌似也有一定道理。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>既然我们无法从正面解释，那我们就先设定一个“万能指针”<br>看我接下来这段操作：</p><p><a href="https://img-blog.csdnimg.cn/20200119212651514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200119212651514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><p>在这里我创建了一个“可以指向任何类型的指针类型”——void*类型</p><p>但是当我运行的时候，出现了一个错误：</p><p><a href="https://img-blog.csdnimg.cn/20200119212816978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200119212816978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><p>仔细想一下，如果仅仅知道了地址，但是不知道保存的数据类型，也是无法取出值的。<br>也就是说，上边的错误和下边的错误是一样的</p><p><a href="https://img-blog.csdnimg.cn/20200119213119242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200119213119242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><p>也会报同样的错误。</p><p>如果我们把第一个做法中printf函数稍作更改</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,*(<span class="keyword">int</span>*)hoge_p);</span><br></pre></td></tr></tbody></table></figure></div><p>成功！</p><p>因此，与其写成这样，还不如刚开始就定义他的类型</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *hoge_p;</span><br></pre></td></tr></tbody></table></figure></div><p>这样编译器会记住 hoge_p是指向int的指针<br>这也就是为什么指针要定义他的类型。</p><p>关于这一点，还有一个地方需要用到他的类型：<br>==指针运算==</p><h2 id="指针运算"><a href="#指针运算" class="headerlink" title="指针运算"></a>指针运算</h2><p>书写如下代码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><stdio.h></stdio.h></span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>{</span><br><span class="line"><span class="keyword">int</span> hoge;</span><br><span class="line"><span class="keyword">int</span>* hoge_p;</span><br><span class="line">hoge_p = &hoge;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hoge_p 的初始地址为：%p\n"</span>,hoge_p);</span><br><span class="line">hoge_p++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hoge_p 加一后：%p\n"</span>,hoge_p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hoge_p 加一之后再加三后：%p\n"</span>,hoge_p + <span class="number">3</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>发现运行结果：</p><p><a href="https://img-blog.csdnimg.cn/20200119214650997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200119214650997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><p>我们知道c语言地址是以16进制的方式存储的。</p><p>发现：</p><h4 id="第一个地址与第二个地址的值相差4，第二个与第三个地址的值相差12"><a href="#第一个地址与第二个地址的值相差4，第二个与第三个地址的值相差12" class="headerlink" title="第一个地址与第二个地址的值相差4，第二个与第三个地址的值相差12."></a>第一个地址与第二个地址的值相差4，第二个与第三个地址的值相差12.</h4><p>不难看出：：</p><h2 id="对指针加N，指针前进“当前指针指向的数据类型的长度×N”"><a href="#对指针加N，指针前进“当前指针指向的数据类型的长度×N”" class="headerlink" title="对指针加N，指针前进“当前指针指向的数据类型的长度×N”"></a>对指针加N，指针前进“当前指针指向的数据类型的长度×N”</h2></body></html>]]></content>
      
      
      <categories>
          
          <category> 征服C指针 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac上自定义各个应用快捷键</title>
      <link href="/2020/02/01/Mac%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%84%E4%B8%AA%E5%BA%94%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2020/02/01/Mac%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%84%E4%B8%AA%E5%BA%94%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h1 id="进入系统偏好设置"><a href="#进入系统偏好设置" class="headerlink" title="进入系统偏好设置"></a>进入系统偏好设置</h1><h2 id="键盘选项"><a href="#键盘选项" class="headerlink" title="键盘选项"></a>键盘选项</h2><h3 id="快捷键："><a href="#快捷键：" class="headerlink" title="快捷键："></a>快捷键：</h3><p><a href="https://img-blog.csdnimg.cn/20200121123450810.png" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200121123450810.png" class="lazyload"></a></p><h3 id="选择自己要添加的应用，在选择要改的功能名称，然后输入自己想要的快捷键。"><a href="#选择自己要添加的应用，在选择要改的功能名称，然后输入自己想要的快捷键。" class="headerlink" title="选择自己要添加的应用，在选择要改的功能名称，然后输入自己想要的快捷键。"></a>选择自己要添加的应用，在选择要改的功能名称，然后输入自己想要的快捷键。</h3><p><a href="https://img-blog.csdnimg.cn/20200121123525851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200121123525851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><p>点击添加，完成！</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Mac骚操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swift之基本运算符</title>
      <link href="/2020/01/30/swift%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2020/01/30/swift%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h2 id="本章大致介绍一些swift特别的运算符"><a href="#本章大致介绍一些swift特别的运算符" class="headerlink" title="本章大致介绍一些swift特别的运算符"></a><strong><em>本章大致介绍一些swift特别的运算符</em></strong></h2><h1 id="元组比较"><a href="#元组比较" class="headerlink" title="元组比较"></a>元组比较</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">swift</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">元组比较：</span></span><br><span class="line"><span class="comment">1.从左到右比较，一旦比出结果，即大于或小于，就是整体的比较结果</span></span><br><span class="line"><span class="comment">2.如果每个对应的元祖相等，则整体的结果就是相等</span></span><br><span class="line"><span class="comment">3.要比较7个或者更多的元素的元祖，必须实现比较运算符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span>,<span class="string">"zebra"</span>)<(<span class="number">2</span>,<span class="string">"apple"</span>){</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"the second win"</span>)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(<span class="number">3</span>,<span class="string">"apple"</span>)<(<span class="number">3</span>,<span class="string">"bird"</span>){</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"the second win"</span>)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(<span class="number">4</span>,<span class="string">"dog"</span>) == (<span class="number">4</span>,<span class="string">"dog"</span>){</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"sample"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h1 id="三元条件运算符"><a href="#三元条件运算符" class="headerlink" title="三元条件运算符"></a>三元条件运算符</h1><p>与C语言中差不太多，直接上例子：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">swift</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//三元条件运算符</span></span><br><span class="line"><span class="keyword">let</span> contentHeight = <span class="number">40</span></span><br><span class="line"><span class="keyword">let</span> hasHeader = <span class="literal">true</span></span><br><span class="line"><span class="keyword">let</span> rowHeight = contentHeight + (hasHeader ? <span class="number">50</span> : <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(rowHeight)</span><br></pre></td></tr></tbody></table></figure></div><h1 id="关于-与-重点"><a href="#关于-与-重点" class="headerlink" title="关于 ? 与 !  //重点"></a>关于 ? 与 !  //重点</h1><p>swift语言中，如果不对变量进行初始化是不会自动给他一个初值的<a href="https://img-blog.csdnimg.cn/20200112143559495.png" data-fancybox="group" data-caption="此处报错" class="fancybox"><img alt="此处报错" title="此处报错" data-src="https://img-blog.csdnimg.cn/20200112143559495.png" class="lazyload"></a><br>此处报错的原因就是未初始化number就对他进行了使用</p><p>swift中有一种可选类型。（Optionals）</p><h4 id="？"><a href="#？" class="headerlink" title="？"></a>？</h4><p>在定义变量时添加一个问号。以为此变量为可选类型，如果后面，给该变量赋值x。那么他就是x，如果没有赋值，他就是nil。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">swift</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> optionalInt : <span class="type">Int?</span></span><br><span class="line"><span class="built_in">print</span>(optionalInt)</span><br><span class="line"><span class="comment">// 此时结果是nil</span></span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">swift</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> optionalInt : <span class="type">Int?</span></span><br><span class="line">optionalInt = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(optionalInt)</span><br><span class="line"><span class="comment">//此时输出是Optional(1)</span></span><br></pre></td></tr></tbody></table></figure></div><p>但是现在会出现警告，就是虽然现在有值，（不管是不是nil都认为有值）。但是她现在是可选类型，应给他确定类型。</p><h4 id><a href="#" class="headerlink" title="!"></a>!</h4><p>此时 ！就是用来强制解析：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">swift</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> optionalInt : <span class="type">Int?</span></span><br><span class="line">optionalInt = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(optionalInt!)</span><br><span class="line"><span class="comment">//此时输出是1</span></span><br></pre></td></tr></tbody></table></figure></div><p>此时optionalInt 是Int 类型。<br>所以有时候我们可以直接这么写：<br></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">swift</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> optionalInt : <span class="type">Int!</span></span><br><span class="line">optionalInt = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(optionalInt)</span><br><span class="line"><span class="comment">//此时输出是1</span></span><br></pre></td></tr></tbody></table></figure></div><br>==注：使用!来获取一个不存在的可选值会导致运行时错误。使用!来强制解析值之前，一定要确定可选包含一个非nil的值。==<br>也就是说如果没有第二句赋值，此程序会崩掉。<br>所以使用！时要注意这点<p></p></body></html>]]></content>
      
      
      <categories>
          
          <category> IOS开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于C指针——和指针的第一次亲密接触</title>
      <link href="/2020/01/30/%E5%85%B3%E4%BA%8EC%E6%8C%87%E9%92%88%E2%80%94%E2%80%94%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BA%B2%E5%AF%86%E6%8E%A5%E8%A7%A6/"/>
      <url>/2020/01/30/%E5%85%B3%E4%BA%8EC%E6%8C%87%E9%92%88%E2%80%94%E2%80%94%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BA%B2%E5%AF%86%E6%8E%A5%E8%A7%A6/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h2 id="先看代码："><a href="#先看代码：" class="headerlink" title="先看代码："></a>先看代码：</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></stdio.h></span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> *c;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输出每个变量的地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a的地址是 %p\n"</span>,&a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"b的地址是 %p\n"</span>,&b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"c的地址是 %p\n"</span>,&c);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*将a的地址赋予c*/</span></span><br><span class="line">    c = &a;<span class="comment">//此处需用到  ”&“来得到a的地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"c修改后的地址为 %p\n"</span>,c);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 通过c输出a的内容*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*c ---->%d\n"</span>,*c);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 通过c修改a的内容*/</span></span><br><span class="line">    *c = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a---->%d\n"</span>,a);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="然后我们看运行结果"><a href="#然后我们看运行结果" class="headerlink" title="然后我们看运行结果"></a>然后我们看运行结果</h2><p><a href="https://img-blog.csdnimg.cn/20200115085336718.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200115085336718.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><h2 id="我们首先声明了int型变量-a-b-然后声明了”指向int-的指针“类型的变量c"><a href="#我们首先声明了int型变量-a-b-然后声明了”指向int-的指针“类型的变量c" class="headerlink" title="我们首先声明了int型变量 a,b 然后声明了”指向int 的指针“类型的变量c"></a>我们首先声明了int型变量 a,b 然后声明了”指向int 的指针“类型的变量c</h2><p>==我们暂且先将c理解为指向int 的指针==</p><h2 id="再看初始化完后内存中保存的样子"><a href="#再看初始化完后内存中保存的样子" class="headerlink" title="再看初始化完后内存中保存的样子"></a>再看初始化完后内存中保存的样子<a href="https://img-blog.csdnimg.cn/20200115090658778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200115090658778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></h2><p>在c语言中，会存在 int类型，double类型，等。。同样，c语言中也存在指针类型这样的类型。<br>指针类型并不是单独存在的，而是由其他类型派生出来的。。</p><p>==由引用类型T派生的指针类型有时候称为’（指向）T的指针‘==</p><p>因为指针类型是类型，所以他也像其他类型一样，有“指针类型的值和指针类型变量”，但有时，我们将“指针类型”，“指针类型变量”，“指针类型的值”简单统称为—-指针</p><p>因此 c就是一个指针类型变量——-指向int的指针，但此时并为对它赋值。</p><p>接下来我们将a的地址赋予了c，此时c的值就是a的地址<a href="https://img-blog.csdnimg.cn/2020011509233464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/2020011509233464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><h2 id="接下来："><a href="#接下来：" class="headerlink" title="接下来："></a>接下来：</h2><p>在指针前面加<em>，可以表示指针指向的变量，因为现在c指向a，所以</em>c就等同于a。同理，修改*c就相当于修改了a的值。</p><p>==这是对后两行输出做的解释==</p><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><p>如果说c是 指向int的指针，但我们声明变量时一般要遵循：</p><h2 id="类型-变量名"><a href="#类型-变量名" class="headerlink" title="类型 变量名"></a>类型 变量名</h2><p>因此，我们似乎声明了一个名为*c的变量。</p><p>所以我们可以写成 ==int* c==的形式。这样更符合  ==类型 变量名==  的形式。</p><p>但之后就会出现问题：<br>数组也是C语言的一种类型。。如果按上述所说的话。<br>C语言声明数组时应该是：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] <span class="built_in">array</span>;</span><br></pre></td></tr></tbody></table></figure></div><p>很明显，会报错。这就产生了矛盾。。</p><p>反而，Java中可以这么写，但是Java为了让C程序员更好的转向Java。也兼容了c语言定义数组的写法。。</p><p>在这里需要插一句：</p><h2 id="C语言的语法本来就是不自然的，奇怪的而又变态的。"><a href="#C语言的语法本来就是不自然的，奇怪的而又变态的。" class="headerlink" title="C语言的语法本来就是不自然的，奇怪的而又变态的。"></a>C语言的语法本来就是不自然的，奇怪的而又变态的。</h2><p>之后我会出一篇关于C语法的博客专门研究这“变态的”c语法。。。</p><p>欢迎吐槽评论</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 征服C指针 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6-1 邻接矩阵存储图的深度优先遍历 (20 分)</title>
      <link href="/2020/01/30/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/"/>
      <url>/2020/01/30/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><blockquote><p>试实现邻接矩阵存储图的深度优先遍历。</p></blockquote><p>函数接口定义：<br>void DFS( MGraph Graph, Vertex V, void (*Visit)(Vertex) );<br>其中MGraph是邻接矩阵存储的图，定义如下：</p><p>typedef struct GNode <em>PtrToGNode;<br>struct GNode{<br>    int Nv;  /</em> 顶点数 <em>/<br>    int Ne;  /</em> 边数   <em>/<br>    WeightType G[MaxVertexNum][MaxVertexNum]; /</em> 邻接矩阵 <em>/<br>};<br>typedef PtrToGNode MGraph; /</em> 以邻接矩阵存储的图类型 */<br>函数DFS应从第V个顶点出发递归地深度优先遍历图Graph，遍历时用裁判定义的函数Visit访问每个顶点。当访问邻接点时，要求按序号递增的顺序。题目保证V是图中的合法顶点。</p><p>裁判测试程序样例：</p><h1 id="include"><a href="#include" class="headerlink" title="include "></a>include <stdio.h></stdio.h></h1><p>typedef enum {false, true} bool;</p><h1 id="define-MaxVertexNum-10-最大顶点数设为10"><a href="#define-MaxVertexNum-10-最大顶点数设为10" class="headerlink" title="define MaxVertexNum 10  / 最大顶点数设为10 /"></a>define MaxVertexNum 10  /<em> 最大顶点数设为10 </em>/</h1><h1 id="define-INFINITY-65535-∞设为双字节无符号整数的最大值65535"><a href="#define-INFINITY-65535-∞设为双字节无符号整数的最大值65535" class="headerlink" title="define INFINITY 65535   / ∞设为双字节无符号整数的最大值65535/"></a>define INFINITY 65535   /<em> ∞设为双字节无符号整数的最大值65535</em>/</h1><p>typedef int Vertex;      /<em> 用顶点下标表示顶点,为整型 </em>/<br>typedef int WeightType;  /<em> 边的权值设为整型 </em>/</p><p>typedef struct GNode <em>PtrToGNode;<br>struct GNode{<br>    int Nv;  /</em> 顶点数 <em>/<br>    int Ne;  /</em> 边数   <em>/<br>    WeightType G[MaxVertexNum][MaxVertexNum]; /</em> 邻接矩阵 <em>/<br>};<br>typedef PtrToGNode MGraph; /</em> 以邻接矩阵存储的图类型 <em>/<br>bool Visited[MaxVertexNum]; /</em> 顶点的访问标记 */</p><p>MGraph CreateGraph(); /<em> 创建图并且将Visited初始化为false；裁判实现，细节不表 </em>/</p><p>void Visit( Vertex V )<br>{<br>    printf(“ %d”, V);<br>}</p><p>void DFS( MGraph Graph, Vertex V, void (*Visit)(Vertex) );</p><p>int main()<br>{<br>    MGraph G;<br>    Vertex V;</p><pre><code>G = CreateGraph();scanf("%d", &V);printf("DFS from %d:", V);DFS(G, V, Visit);return 0;</code></pre><p>}</p><p>/<em> 你的代码将被嵌在这里 </em>/<br>输入样例：给定图如下</p><p>5<br>输出样例：<br>DFS from 5: 5 1 3 0 2 4 6<br>作者: DS课程组<br>单位: 浙江大学<br>时间限制: 400 ms<br>内存限制: 64 MB</p><h2 id="很明显这个用递归就可以了"><a href="#很明显这个用递归就可以了" class="headerlink" title="很明显这个用递归就可以了"></a>很明显这个用递归就可以了</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">( MGraph Graph, Vertex V, <span class="keyword">void</span> (*Visit)(Vertex) )</span></span>{</span><br><span class="line">    Visited[V] = <span class="literal">true</span>;</span><br><span class="line">    Visit(V);</span><br><span class="line">    <span class="comment">//递归</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i<maxvertexnum; i++) {< span><br><span class="line">        <span class="keyword">if</span> (Graph->G[V][i] == <span class="number">1</span> && !Visited[i]) {</span><br><span class="line">            DFS(Graph,i,Visit);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br></maxvertexnum;></span></pre></td></tr></tbody></table></figure></div><p>根据提要求访问过的节点需要true<br>所以在此访问还应判断该节点是不是false</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寒假计划与每日进度（总章程）</title>
      <link href="/2020/01/21/%E5%AF%92%E5%81%87%E8%AE%A1%E5%88%92%E4%B8%8E%E6%AF%8F%E6%97%A5%E5%AE%8C%E6%88%90%E6%83%85%E5%86%B5/"/>
      <url>/2020/01/21/%E5%AF%92%E5%81%87%E8%AE%A1%E5%88%92%E4%B8%8E%E6%AF%8F%E6%97%A5%E5%AE%8C%E6%88%90%E6%83%85%E5%86%B5/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">您好，请输入密码</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="07509b7508e6f5c8933cb2eaf32b2055e15da8c195ff719c7660a3817c9a4ac7"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> My Daily Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
            <tag> 寒假终极计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汉诺塔非递归实现 C语言版</title>
      <link href="/2020/01/21/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%9D%9E%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0c%E8%AF%AD%E8%A8%80%E7%89%88/"/>
      <url>/2020/01/21/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%9D%9E%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0c%E8%AF%AD%E8%A8%80%E7%89%88/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h1 id="汉诺塔非递归实现-C语言版"><a href="#汉诺塔非递归实现-C语言版" class="headerlink" title="汉诺塔非递归实现 C语言版"></a><strong><em>汉诺塔非递归实现 C语言版</em></strong></h1><p>我上一篇博客是汉诺塔C语言递归实现，非递归和递归想法一样。这里不再赘述，直接链接转到：</p><p><a href="https://blog.csdn.net/VistorsYan/article/details/102765478" target="_blank" rel="noopener">汉诺塔递归实现 C语言版</a></p><p>   递归实现固然好理解，但是n的值越大，空间和时间上都是极大的消耗，最终可能导致程序直接崩溃。<br>在以后的做题或者是面试中，不推荐用递归方法做，所以要写出对应的非递归方法。</p><p>  某次上课无意间听到老师说了这样一句话：任何递归法都可以用循环的方法进行非递归实现，然后回头找了找汉诺塔非递归的资料，整理整理，搞出了一个c实现的非递归方法</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include<stdio.h></stdio.h></span></span><br><span class="line"><span class="comment">#include <stdlib.h></stdlib.h></span></span><br><span class="line"><span class="comment">#define MaxSize 100</span></span><br><span class="line">typedef struct{</span><br><span class="line">     int N;</span><br><span class="line">     char A;        //起始柱</span><br><span class="line">     char B;        //借助柱</span><br><span class="line">     char C;        //目标柱</span><br><span class="line">}ElementType;</span><br><span class="line">typedef struct {</span><br><span class="line">    ElementType Data[MaxSize];</span><br><span class="line">    int top;</span><br><span class="line">}Stack;//汉诺塔问题的结构类型</span><br><span class="line">void Push(Stack *PtrS, ElementType item){</span><br><span class="line">     //入栈操作</span><br><span class="line">     <span class="keyword">if</span> (PtrS->top == MaxSize)</span><br><span class="line">     {</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"The stack is full!\n"</span>);</span><br><span class="line">         <span class="built_in">return</span>;</span><br><span class="line">     }</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">     {</span><br><span class="line">         PtrS->Data[++(PtrS->top)] = item;</span><br><span class="line">         <span class="built_in">return</span>;</span><br><span class="line">     }</span><br><span class="line">}</span><br><span class="line">ElementType Pop(Stack *PtrS){</span><br><span class="line">    <span class="keyword">if</span> (PtrS->top == -1)</span><br><span class="line">      {</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"The stack is empty!\n"</span>);</span><br><span class="line">          <span class="built_in">exit</span>(1);   //直接终止程序，一般不会出现这个错误</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      {</span><br><span class="line">          PtrS->top--;</span><br><span class="line">         <span class="built_in">return</span> (PtrS->Data[PtrS->top + 1]);        //或者是<span class="built_in">return</span> PtrS->Data[PtrS->top--];</span><br><span class="line">      }</span><br><span class="line">}</span><br><span class="line">//借助栈的非递归实现</span><br><span class="line"> void Hanoi(int n){</span><br><span class="line">    ElementType P, toPush;</span><br><span class="line">    Stack S;</span><br><span class="line"></span><br><span class="line">    P.N = n; P.A = <span class="string">'a'</span>; P.B = <span class="string">'b'</span>; P.C = <span class="string">'c'</span>;</span><br><span class="line">    S.top = -1;</span><br><span class="line"></span><br><span class="line">     Push(&S, P);</span><br><span class="line">     <span class="keyword">while</span> (S.top != -1)        //当堆栈不为空时</span><br><span class="line">     {</span><br><span class="line">         P = Pop(&S);//出栈</span><br><span class="line">         <span class="keyword">if</span> (P.N == 1)//当只剩一个盘子时，直接由当前柱移动到目的柱</span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">"%c -> %c\n"</span>, P.A, P.C);</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">         {</span><br><span class="line">             toPush.N = P.N - 1;</span><br><span class="line">             toPush.A = P.B; toPush.B = P.A; toPush.C = P.C;</span><br><span class="line">             Push(&S, toPush);        //将第三步(n - 1, b, a, c)入栈</span><br><span class="line">             toPush.N = 1;</span><br><span class="line">             toPush.A = P.A; toPush.B = P.B; toPush.C = P.C;</span><br><span class="line">             Push(&S, toPush);        //将第二步1, a, b, c)入栈</span><br><span class="line">             toPush.N = P.N - 1;</span><br><span class="line">             toPush.A = P.A; toPush.B = P.C; toPush.C = P.B;</span><br><span class="line">             Push(&S, toPush);        //将第一步(n - 1, a, c, b)入栈</span><br><span class="line">         }</span><br><span class="line">     }</span><br><span class="line"> }</span><br><span class="line">int <span class="function"><span class="title">main</span></span>(){</span><br><span class="line">    int n;</span><br><span class="line">    scanf(<span class="string">"%d"</span>, &n);</span><br><span class="line">    <span class="keyword">if</span> (n <= 0)<span class="built_in">return</span> 0;</span><br><span class="line">    <span class="keyword">else</span> Hanoi(n);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>还是三个步骤：<br>1.将n-1个盘子由a柱借助c柱移动到b柱<br>2.将最下面的盘子由a柱直接移动到c柱<br>3.将那n-1个盘子在由b柱借助a柱移动到c柱</p><p>因为这个是出栈时的操作，所以入栈时要到着写</p><h2 id="简要解释一下（因为跟递归思路差不多）"><a href="#简要解释一下（因为跟递归思路差不多）" class="headerlink" title="简要解释一下（因为跟递归思路差不多）"></a>简要解释一下（因为跟递归思路差不多）</h2><p>如果n不等于一时，就意味着，以上的n-1个盘子，都要做上述所说的三个步骤，知道n等于1时，直接移动到目的柱。<br>因此，移动次数最多的是最上边的那个盘子，移动次数最少的是最下面的那个盘子，只需要移动一次</p><p>利用结构体数组更便于理解。</p><p>本文为原创，如有问题欢迎评论区留言。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My Daily Life Jan 20th</title>
      <link href="/2020/01/20/DailyLife--Jan--20th/"/>
      <url>/2020/01/20/DailyLife--Jan--20th/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>   没错今天非常的浑浑噩噩，上午基本没干什么，除了下载了一下vim编辑markdown文件的插件后，然后还非常的作。。。诶，具体的就不说了。好不容易坚持了一段时间，突然又放弃了。<br>    下午貌似捣鼓网页捣鼓了半天，貌似却没啥成果。然后睡了一觉。有些疲惫。晚上也捣鼓了一些东西。貌似收获也不大。。</p><p>   明天再写一篇文章记录一下假期任务和完成情况吧。</p><p>   每天锻炼的项目只能多不能少。十点半前必须睡觉。</p><p>   今天除了安装了一些必要插件外，令需要记得就是有关vim的快捷方式：</p><div class="table-container"><table><thead><tr><th>markdown命令</th><th>功能</th></tr></thead><tbody><tr><td>zr</td><td>降低整个缓冲区的折叠级别</td></tr><tr><td>zR</td><td>打开所有折叠</td></tr><tr><td>zm</td><td>增加整个缓冲区的折叠级别</td></tr><tr><td>zM</td><td>折叠所有内容</td></tr><tr><td>za</td><td>打开光标所在的折叠</td></tr><tr><td>zA</td><td>递归打开一个折痕</td></tr><tr><td>zc</td><td>关闭光标所在的折痕</td></tr><tr><td>zC</td><td>递归关闭光标所在的位置</td></tr></tbody></table></div><h3 id="Adobe账号"><a href="#Adobe账号" class="headerlink" title="Adobe账号"></a>Adobe账号</h3><p>还有一个 Adobe账号：3jkxtqhtq4@privaterelay.appleid.com</p><p>这搁谁谁能记得住阿</p><p>   现在是22:30 准备去睡觉，多的就先不说了，每天早起规划第二天的任务，晚上打卡，完成情况。</p><h2 id="就先这样吧-晚安"><a href="#就先这样吧-晚安" class="headerlink" title="就先这样吧 晚安"></a>就先这样吧 晚安</h2></body></html>]]></content>
      
      
      <categories>
          
          <category> My Daily Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-5 修理牧场 (35分) 哈夫曼树例题 c与c++鸳鸯解法 详细解释</title>
      <link href="/2020/01/20/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91--%E4%BF%AE%E7%90%86%E7%89%A7%E5%9C%BA/"/>
      <url>/2020/01/20/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91--%E4%BF%AE%E7%90%86%E7%89%A7%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><p>农夫要修理牧场的一段栅栏，他测量了栅栏，发现需要N块木头，每块木头长度为整数Li个长度单位，于是他购买了一条很长的、能锯成N块的木头，即该木头的长度是Li​​的总和。</p><p>但是农夫自己没有锯子，请人锯木的酬金跟这段木头的长度成正比。为简单起见，不妨就设酬金等于所锯木头的长度。例如，要将长度为20的木头锯成长度为8、7和5的三段，第一次锯木头花费20，将木头锯成12和8；第二次锯木头花费12，将长度为12的木头锯成7和5，总花费为32。如果第一次将木头锯成15和5，则第二次锯木头花费15，总花费为35（大于32）。</p><p>请编写程序帮助农夫计算将木头锯成N块的最少花费。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h2><p>输入首先给出正整数N（≤10000​​ ），表示要将木头锯成N块。第二行给出N个正整数（≤50），表示每段木块的长度。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h2><p>输出一个整数，即将木头锯成N块的最少花费。</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h2><p>8<br>4 5 1 2 1 3 1 1</p><h2 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h2><p>49</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="构造最优二叉树，将除叶节点外所有的节点权值加和。即为所求。"><a href="#构造最优二叉树，将除叶节点外所有的节点权值加和。即为所求。" class="headerlink" title="构造最优二叉树，将除叶节点外所有的节点权值加和。即为所求。"></a>构造最优二叉树，将除叶节点外所有的节点权值加和。即为所求。</h2><p>实际上是没必要构造一颗树的，运用他的原理即可</p><p>其实这两个解法差不多，但是c++更加的简单易于理解，在时间上也是很短的。c相对而言就比较暴力了。相当于对c++解法的底层解释。注重基础。<br><code></code></p><h2 id="c-解法"><a href="#c-解法" class="headerlink" title="c++解法"></a>c++解法</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></stdio.h></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><queue></queue></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">priority_queue<<span class="keyword">int</span>,<span class="built_in">vector</span><<span class="keyword">int</span>>,greater<<span class="keyword">int</span>> > Q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">int</span> x,n,sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<n;i++){< span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&x);</span><br><span class="line">        Q.push(x);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span>(Q.size()><span class="number">1</span>){</span><br><span class="line">        <span class="keyword">int</span> a=Q.top();</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="keyword">int</span> b=Q.top();</span><br><span class="line">        Q.pop();</span><br><span class="line">        Q.push(a+b);</span><br><span class="line">        sum+=a+b;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></n;i++){<></span></pre></td></tr></tbody></table></figure></div><p>在这里解释一下这句话<br></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">priority_queue<<span class="keyword">int</span>,<span class="built_in">vector</span><<span class="keyword">int</span>>,greater<<span class="keyword">int</span>> > Q;</span><br></pre></td></tr></tbody></table></figure></div><br>priority_queue<type, container, functional>，其中Type 为数据类型，Container为保存数据的容器，Functional 为元素比较方式。<br>Container必须是用数组实现的容器，比如vector,deque等等，但不能用 list。STL里面默认用的是vector。<br>greater 可以实现由底部到顶部大到小实现。<br>所以这道题的步骤就是，<br>push出两个最小值并相加，将相加的值加到sum并放回Q中，然后会重新排列大小。<br>以此类推<p></p><p><a href="https://img-blog.csdnimg.cn/20191207174941948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191207174941948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a><br>不仅代码量很少，时间也是很短的，考试的时候可以使用，平时练习不建议，有点投机取巧。练习还是用c一步步实现他的每一个步骤。</p><h2 id="c解法"><a href="#c解法" class="headerlink" title="c解法"></a>c解法</h2><p>用c语言其实就是对c++的具体实现，（可能我这个不是最好的解法。）但是每次取每次放都需要重新排序，这将是一件很累的事情。所以干脆就不排序了，直接放在那，取的时候再去判断最小值。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><stdio.h></stdio.h></span></span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10010</span>],n;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max 10000000</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findMin</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">min</span> = Max+<span class="number">1</span>,i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i<n; i++)< span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">min</span>>a[i]) <span class="built_in">min</span> = a[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> x)</span></span>{</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i<n; i++)< span><br><span class="line">        <span class="keyword">if</span> (a[i] == x) {</span><br><span class="line">            a[i] = Max;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span>{</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i<n; i++)< span><br><span class="line">        <span class="keyword">if</span> (a[i] == Max) {</span><br><span class="line">            a[i] = x;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">int</span> i,sum2 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i<n; i++)< span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&a[i]);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i<n; i++) {< span><br><span class="line">        <span class="keyword">int</span> x = findMin();</span><br><span class="line">        Delete(x);</span><br><span class="line">        <span class="keyword">int</span> y = findMin();</span><br><span class="line">        Delete(y);</span><br><span class="line">        add(x+y);</span><br><span class="line">        sum2+=x+y;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum2);</span><br><span class="line">}</span><br></n;></span></n;></span></n;></span></n;></span></n;></span></pre></td></tr></tbody></table></figure></div><p>这里注明一下：删除其实就是把现在这个数组里这个值（不一定是之前取的那个数）给赋值为非常大，这样下次寻找最小值就不会找到他。<br>如果有添加，那么之前一定有删除，直接把添加的值放在删除的值的地方就行了。<br>Max一定要特别大，要不然，最大值测试用例时，x+y的值甚至会大过Max，这样就出错了。<br>这个实现就很耗时了，算是锻炼思维把。<br><a href="https://img-blog.csdnimg.cn/20191207180030125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191207180030125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><h1 id="如果有更好的解法，或者是有什么问题的话，欢迎留言。"><a href="#如果有更好的解法，或者是有什么问题的话，欢迎留言。" class="headerlink" title="如果有更好的解法，或者是有什么问题的话，欢迎留言。"></a>如果有更好的解法，或者是有什么问题的话，欢迎留言。</h1></type,></body></html>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTA 树种统计  c语言-------二叉搜索树 详细解释</title>
      <link href="/2020/01/20/%E6%A0%91%E7%A7%8D%E7%BB%9F%E8%AE%A1/"/>
      <url>/2020/01/20/%E6%A0%91%E7%A7%8D%E7%BB%9F%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h1 id="树种统计"><a href="#树种统计" class="headerlink" title="树种统计"></a>树种统计</h1><h2 id="这题乍一瞅写个树种，但是再一看貌似跟树没啥关系啊。"><a href="#这题乍一瞅写个树种，但是再一看貌似跟树没啥关系啊。" class="headerlink" title="这题乍一瞅写个树种，但是再一看貌似跟树没啥关系啊。"></a>这题乍一瞅写个树种，但是再一看貌似跟树没啥关系啊。</h2><p>随着卫星成像技术的应用，自然资源研究机构可以识别每一棵树的种类。请编写程序帮助研究人员统计每种树的数量，计算每种树占总数的百分比。</p><p>输入格式:<br>输入首先给出正整数N（≤10<br>​5<br>​​ ），随后N行，每行给出卫星观测到的一棵树的种类名称。种类名称由不超过30个英文字母和空格组成（大小写不区分）。</p><p>输出格式:<br>按字典序递增输出各种树的种类名称及其所占总数的百分比，其间以空格分隔，保留小数点后4位。</p><h2 id="第一眼直观感受是用数组常规排序？？？-但是看了一眼给的案例，这么老些，而且N是小于等于10的五次方。。用数组常规排序肯定超时。"><a href="#第一眼直观感受是用数组常规排序？？？-但是看了一眼给的案例，这么老些，而且N是小于等于10的五次方。。用数组常规排序肯定超时。" class="headerlink" title="第一眼直观感受是用数组常规排序？？？ 但是看了一眼给的案例，这么老些，而且N是小于等于10的五次方。。用数组常规排序肯定超时。"></a>第一眼直观感受是用数组常规排序？？？ 但是看了一眼给的案例，这么老些，而且N是小于等于10的五次方。。用数组常规排序肯定超时。</h2><h2 id="这么大的数据量要想排序并输出只能想到的是二分法。因为二分法时间复杂度O-logN-。根据二维图像，可以想象数据量越大，O-logN-会越来越趋近与O-1"><a href="#这么大的数据量要想排序并输出只能想到的是二分法。因为二分法时间复杂度O-logN-。根据二维图像，可以想象数据量越大，O-logN-会越来越趋近与O-1" class="headerlink" title="这么大的数据量要想排序并输出只能想到的是二分法。因为二分法时间复杂度O(logN)。根据二维图像，可以想象数据量越大，O(logN)会越来越趋近与O(1)"></a><strong><em>这么大的数据量要想排序并输出只能想到的是二分法。因为二分法时间复杂度O(logN)。根据二维图像，可以想象数据量越大，O(logN)会越来越趋近与O(1)</em></strong></h2><h2 id="在回归这道题，数组里的二分法是去查找元素。。-而这道题是把元素按顺序输出，所以还是不行。。。。"><a href="#在回归这道题，数组里的二分法是去查找元素。。-而这道题是把元素按顺序输出，所以还是不行。。。。" class="headerlink" title="在回归这道题，数组里的二分法是去查找元素。。 而这道题是把元素按顺序输出，所以还是不行。。。。"></a>在回归这道题，数组里的二分法是去查找元素。。 而这道题是把元素按顺序输出，所以还是不行。。。。</h2><p>最后想了想二分法在树里的应用</p><h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><p>在输入时就开始构造二叉搜索树。。</p><p>然后中序遍历输出就可以了。。。<br>左中右 正好是有小到大。。<br>至于后面那个频率，加个计数器，最后除以总数就可以了。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 思路：已二叉搜索树的方式保存输入的名称，并赋予一个计数器。然后中序遍历输出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><stdio.h></stdio.h></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><stdlib.h></stdlib.h></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><string.h></string.h></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Null -1</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>{</span></span><br><span class="line">    <span class="keyword">char</span> data[<span class="number">31</span>];</span><br><span class="line">    <span class="keyword">int</span> left,right;</span><br><span class="line">    <span class="keyword">int</span> k;<span class="comment">//计数器</span></span><br><span class="line">}tree[<span class="number">100000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InVisit</span><span class="params">(struct TreeNode Tree,<span class="keyword">int</span> n)</span></span>{</span><br><span class="line">    <span class="keyword">if</span> (Tree.left == Null && Tree.right == Null) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s %.4f%%\n"</span>,Tree.data,Tree.k/(<span class="keyword">double</span>)n*<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (Tree.left!=Null) {</span><br><span class="line">        InVisit(tree[Tree.left],n);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s %.4f%%\n"</span>,Tree.data,Tree.k/(<span class="keyword">double</span>)n*<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">if</span> (Tree.right!=Null) {</span><br><span class="line">        InVisit(tree[Tree.right],n);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> n,i,temp = <span class="number">0</span>,flag = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i<n; i++) {< span><br><span class="line">        tree[i].k = <span class="number">0</span>;</span><br><span class="line">        tree[i].left = Null;</span><br><span class="line">        tree[i].right = Null;</span><br><span class="line">    }</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i<n; i++) {< span><br><span class="line">        gets(tree[i].data);</span><br><span class="line">        <span class="comment">//二叉搜索树插入 数组保存法</span></span><br><span class="line">        <span class="keyword">while</span> (flag) {</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(tree[i].data, tree[temp].data)<<span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">if</span> (tree[temp].left!=Null) {</span><br><span class="line">            temp = tree[temp].left;</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                tree[temp].left = i;</span><br><span class="line">                tree[i].k++;</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(tree[i].data, tree[temp].data)><span class="number">0</span>){</span><br><span class="line">            <span class="keyword">if</span> (tree[temp].right!=Null) {</span><br><span class="line">                temp = tree[temp].right;</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                tree[temp].right = i;</span><br><span class="line">                tree[i].k++;</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            tree[temp].k++;</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">        temp = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//中序遍历</span></span><br><span class="line">    InVisit(tree[<span class="number">0</span>],n);</span><br><span class="line">}</span><br></n;></span></n;></span></pre></td></tr></tbody></table></figure></div><p>这里我用的数组的方法保存树<br>当然也可以用链表储存，但是链表消耗内存过大。。。个人不太建议。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeeCode第二题常见报错</title>
      <link href="/2020/01/19/leeCode%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%981/"/>
      <url>/2020/01/19/leeCode%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%981/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><hr><h2 id="LeeCode第二题"><a href="#LeeCode第二题" class="headerlink" title="LeeCode第二题"></a>LeeCode第二题</h2><p>两数相加 c语言实现报错解决</p><hr><p>runtime error: member access within misaligned address 0xbebebebebebebebe for type ‘struct ListNode’, which requires 8 byte alignment (ListNode.c)<br>0xbebebebebebebebe: note: pointer points here</p><memory cannot be printed><p>*</p><p>同样的思路，用Java实现可以运行，但是c语言却频频出现了上述所说的错误。困扰了我许多天，最后参考了一下csdn上大佬的想法，然后仔细在读这个错误，原因在你申请一个节点空间时，它的next指针也诞生出来了，注意这句note: pointer points here<br>说明有指针，但是你没有让他指向一个地址。所以出现这个错误，所以在你申请一个节点空间后，紧跟着把它的next赋值为空就可以了。</p><p>*<br>顺便呈上我的代码吧，思路就不多解释了，比较容易懂</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){</span><br><span class="line">    struct ListNode *p1,*p2,*p ,*h;</span><br><span class="line">    struct ListNode *head = malloc(sizeof(struct ListNode));</span><br><span class="line">    p1 = l1;</span><br><span class="line">    p2 = l2;</span><br><span class="line">    p = head;</span><br><span class="line"></span><br><span class="line">    int t = 0;</span><br><span class="line">    <span class="keyword">while</span> (p1||p2) {</span><br><span class="line">        int x = (p1!=NULL) ? p1->val:0;</span><br><span class="line">        int y = (p2!=NULL) ? p2->val:0;</span><br><span class="line">        int sum = x + y +t;</span><br><span class="line">        t = sum/10;</span><br><span class="line">        h = (struct ListNode*)malloc(sizeof(struct ListNode));</span><br><span class="line">        h->next = NULL;//赋值为空</span><br><span class="line">        p->next = h;</span><br><span class="line">        p = p->next;</span><br><span class="line">        h->val = sum%10;</span><br><span class="line">        <span class="keyword">if</span> (p1) p1 = p1->next;</span><br><span class="line">        <span class="keyword">if</span> (p2) p2 = p2->next;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (t>0) {</span><br><span class="line">        p->next = (struct ListNode*)malloc(sizeof(struct ListNode));</span><br><span class="line">        p = p->next;</span><br><span class="line">        p->next = NULL;</span><br><span class="line">        p->val = t;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">return</span> head->next;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行时间比较菜，如果有什么可以改进的话，或者更好的方法欢迎留言！！</p></memory></body></html>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeeCode </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汉诺塔递归实现c语言版</title>
      <link href="/2020/01/19/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0c%E8%AF%AD%E8%A8%80%E7%89%88/"/>
      <url>/2020/01/19/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0c%E8%AF%AD%E8%A8%80%E7%89%88/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h2 id="汉诺塔问题-递归实现法"><a href="#汉诺塔问题-递归实现法" class="headerlink" title="汉诺塔问题 递归实现法"></a><strong><em>汉诺塔问题 递归实现法</em></strong></h2><p><strong>话不多说直接上代码</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include <stdio.h></stdio.h></span></span><br><span class="line">void Move(int n ,char from ,char to){</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c -> %c\n"</span>,from,to);</span><br><span class="line">}</span><br><span class="line">void hanoi(int n ,char from,char depend,char to){</span><br><span class="line">    <span class="keyword">if</span> (n == 1) {</span><br><span class="line">        //当剩一个盘子的时候，直接移动到目的柱</span><br><span class="line">        Move(1, from, to);</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        hanoi(n-1,from,to,depend);//将初始柱的前n-1个盘子借助目的塔移动到借用柱上</span><br><span class="line">        Move(n,from,to);              //将剩下的一个盘子移动到目的柱上</span><br><span class="line">        hanoi(n-1,depend,from,to);//将b柱n-1个盘子移动到借用a柱移动到c上</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">int <span class="function"><span class="title">main</span></span>() {</span><br><span class="line">    int n;</span><br><span class="line">    scanf(<span class="string">"%d"</span>,&n);</span><br><span class="line">    char x = <span class="string">'A'</span>,y = <span class="string">'B'</span>,z = <span class="string">'C'</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"盘子移动情况如下：\n"</span>);</span><br><span class="line">    hanoi(n, x, y, z);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>思路：<br>不管多少个盘子（一个盘子的时候除外），全部都看作是两个盘子<br>即 最下面的那一个，和其上面的(n-1)个。<br>这样两个盘子的时候，移动就非常简单了。</p><p><strong>总共有三步：</strong><br>1.将第一个(也就是n-1)个盘子借助C柱从A柱移动到B柱。<br>2.将最下面的那一个盘子直接从A柱移动到C柱。<br>3.最后将B柱的那些(n-1)个盘子借助A柱移动到C柱。</p><p>所以在入口参数的时候需要，起始柱，借助柱（有点绕口），目的柱。</p><p>刚开始可能有些看不太懂，可以先输入几个简单的数，用断点调试，看一下他的移动过程。<br>递归函数的终点就是只剩一个盘子的时候，直接移动到目的柱。</p><p><strong><em>如果明白了就不用看我下面的废话了</em></strong></p><p>假设有64个盘子，那么问题就成了移动63和最下面的盘子。分成了两组去完成我上述说的那三步。<br>接着63个盘子去做第一步时就已经开始了递归。<br>递归到下一级时，就意味着再把63个盘子看成一个整体。分成两部分，最下面的一块和上面的62块。去完成这件事，以此类推，直到第一块。<br>因为只有前62块都完成移动，才可以移动到第六十三块。</p><p>不要去想着这个过程，很容易绕晕的，只需要知道这个函数的功能就是移动盘子。</p><p><strong><em>下篇博客写汉诺塔非递归算法，c语言实现。 </em></strong></p><blockquote><p>参考博客<br><a href="https://blog.csdn.net/csshuke/article/details/82630311" target="_blank" rel="noopener">https://blog.csdn.net/csshuke/article/details/82630311</a></p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac上好用的敲代码软件CodeRunner外加破解</title>
      <link href="/2020/01/13/Mac%E4%B8%8A%E5%A5%BD%E7%94%A8%E7%9A%84%E6%95%B2%E4%BB%A3%E7%A0%81%E8%BD%AF%E4%BB%B6CodeRunner/"/>
      <url>/2020/01/13/Mac%E4%B8%8A%E5%A5%BD%E7%94%A8%E7%9A%84%E6%95%B2%E4%BB%A3%E7%A0%81%E8%BD%AF%E4%BB%B6CodeRunner/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h1 id="Powerful-IDE-level-code-completion-for-most-languages"><a href="#Powerful-IDE-level-code-completion-for-most-languages" class="headerlink" title="Powerful IDE level code completion for most languages"></a>Powerful IDE level code completion for most languages</h1><h2 id="有时候我们会一下子学好多语言，仅是用它写写算法而已。对于每一个语言都特意去下在一个IDE的话，无疑是件浪费时间和空间的事情，或许你可以用VS-Code-，但是插件的下载与安装也是比较麻烦的。"><a href="#有时候我们会一下子学好多语言，仅是用它写写算法而已。对于每一个语言都特意去下在一个IDE的话，无疑是件浪费时间和空间的事情，或许你可以用VS-Code-，但是插件的下载与安装也是比较麻烦的。" class="headerlink" title="有时候我们会一下子学好多语言，仅是用它写写算法而已。对于每一个语言都特意去下在一个IDE的话，无疑是件浪费时间和空间的事情，或许你可以用VS Code ，但是插件的下载与安装也是比较麻烦的。"></a>有时候我们会一下子学好多语言，仅是用它写写算法而已。对于每一个语言都特意去下在一个IDE的话，无疑是件浪费时间和空间的事情，或许你可以用VS Code ，但是插件的下载与安装也是比较麻烦的。</h2><h2 id="我介绍一个万能IDE—————-gt-Code-Runner"><a href="#我介绍一个万能IDE—————-gt-Code-Runner" class="headerlink" title="我介绍一个万能IDE—————-> Code Runner"></a>我介绍一个万能IDE—————-> Code Runner</h2><p><a href="https://img-blog.csdnimg.cn/20200117085038328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200117085038328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a><br>他几乎支持的了所有语言，如果没有你想要的，你也可以手动添加。<br>他的界面如xcode一样，非常的美观，清楚。支持代码自动补全，同样也支持很多主题。</p><p>运行之后还会显示运行时间。。</p><h3 id="功能强大-仅有270多MB-是不是心动了呢"><a href="#功能强大-仅有270多MB-是不是心动了呢" class="headerlink" title="功能强大 仅有270多MB 是不是心动了呢?"></a>功能强大 仅有270多MB 是不是心动了呢?</h3><h1 id="然而"><a href="#然而" class="headerlink" title="然而"></a>然而</h1><p><a href="https://img-blog.csdnimg.cn/20200117085414258.png" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200117085414258.png" class="lazyload"></a><br>没错它是需要付费的。</p><h1 id="然而-1"><a href="#然而-1" class="headerlink" title="然而"></a>然而</h1><p>不废话—-</p><h2 id="1-直接登录官网下载"><a href="#1-直接登录官网下载" class="headerlink" title="1. 直接登录官网下载"></a>1. 直接登录官网下载</h2><h2 id="2-断网激活："><a href="#2-断网激活：" class="headerlink" title="2. 断网激活："></a>2. 断网激活：</h2><p>安装成功后，选择输入激活码。并断网。激活码网上都有，我就不找啦。几乎是随便一个就可以。成功后会有一个successfully</p><h2 id="3-修改hosts文件："><a href="#3-修改hosts文件：" class="headerlink" title="3. 修改hosts文件："></a>3. 修改hosts文件：</h2><p>打开<br>终端，开启root权限：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></tbody></table></figure></div><p>输入密码后，打开hosts文件位置：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /private/etc</span><br></pre></td></tr></tbody></table></figure></div><p>然后用vim打开 hosts文件：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim hosts</span><br></pre></td></tr></tbody></table></figure></div><p>进入此文件后，在后面加上一行</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1       coderunnerapp.com</span><br></pre></td></tr></tbody></table></figure></div><p>然后保存退出。。。<br>（这块需要用到vim的一些简单操作，不会的话百度一下就OK，非常简单）<br>（注：修改成功以后他的官网就会进不去）</p><h3 id="重启coderunner-就可以使用啦。"><a href="#重启coderunner-就可以使用啦。" class="headerlink" title="重启coderunner 就可以使用啦。"></a>重启coderunner 就可以使用啦。</h3></body></html>]]></content>
      
      
      <categories>
          
          <category> Mac骚操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于C指针----和指针的第一次亲密接触</title>
      <link href="/2020/01/13/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
      <url>/2020/01/13/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h2 id="先看代码："><a href="#先看代码：" class="headerlink" title="先看代码："></a>先看代码：</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></stdio.h></span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> *c;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输出每个变量的地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a的地址是 %p\n"</span>,&a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"b的地址是 %p\n"</span>,&b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"c的地址是 %p\n"</span>,&c);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*将a的地址赋予c*/</span></span><br><span class="line">    c = &a;<span class="comment">//此处需用到  ”&“来得到a的地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"c修改后的地址为 %p\n"</span>,c);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 通过c输出a的内容*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*c ---->%d\n"</span>,*c);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 通过c修改a的内容*/</span></span><br><span class="line">    *c = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a---->%d\n"</span>,a);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="然后我们看运行结果"><a href="#然后我们看运行结果" class="headerlink" title="然后我们看运行结果"></a>然后我们看运行结果</h2><p><a href="https://img-blog.csdnimg.cn/20200115085336718.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200115085336718.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><h2 id="我们首先声明了int型变量-a-b-然后声明了”指向int-的指针“类型的变量c"><a href="#我们首先声明了int型变量-a-b-然后声明了”指向int-的指针“类型的变量c" class="headerlink" title="我们首先声明了int型变量 a,b 然后声明了”指向int 的指针“类型的变量c"></a>我们首先声明了int型变量 a,b 然后声明了”指向int 的指针“类型的变量c</h2><p>==我们暂且先将c理解为指向int 的指针==</p><h2 id="再看初始化完后内存中保存的样子"><a href="#再看初始化完后内存中保存的样子" class="headerlink" title="再看初始化完后内存中保存的样子"></a>再看初始化完后内存中保存的样子<a href="https://img-blog.csdnimg.cn/20200115090658778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200115090658778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></h2><p>在c语言中，会存在 int类型，double类型，等。。同样，c语言中也存在指针类型这样的类型。<br>指针类型并不是单独存在的，而是由其他类型派生出来的。。</p><p>==由引用类型T派生的指针类型有时候称为’（指向）T的指针‘==</p><p>因为指针类型是类型，所以他也像其他类型一样，有“指针类型的值和指针类型变量”，但有时，我们将“指针类型”，“指针类型变量”，“指针类型的值”简单统称为—-指针</p><p>因此 c就是一个指针类型变量——-指向int的指针，但此时并为对它赋值。</p><p>接下来我们将a的地址赋予了c，此时c的值就是a的地址<a href="https://img-blog.csdnimg.cn/2020011509233464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/2020011509233464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><h2 id="接下来："><a href="#接下来：" class="headerlink" title="接下来："></a>接下来：</h2><p>在指针前面加<em>，可以表示指针指向的变量，因为现在c指向a，所以</em>c就等同于a。同理，修改*c就相当于修改了a的值。</p><p>==这是对后两行输出做的解释==</p><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><p>如果说c是 指向int的指针，但我们声明变量时一般要遵循：</p><h2 id="类型-变量名"><a href="#类型-变量名" class="headerlink" title="类型 变量名"></a>类型 变量名</h2><p>因此，我们似乎声明了一个名为*c的变量。</p><p>所以我们可以写成 ==int* c==的形式。这样更符合  ==类型 变量名==  的形式。</p><p>但之后就会出现问题：<br>数组也是C语言的一种类型。。如果按上述所说的话。<br>C语言声明数组时应该是：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] <span class="built_in">array</span>;</span><br></pre></td></tr></tbody></table></figure></div><p>很明显，会报错。这就产生了矛盾。。</p><p>反而，Java中可以这么写，但是Java为了让C程序员更好的转向Java。也兼容了c语言定义数组的写法。。</p><p>在这里需要插一句：</p><h2 id="C语言的语法本来就是不自然的，奇怪的而又变态的。"><a href="#C语言的语法本来就是不自然的，奇怪的而又变态的。" class="headerlink" title="C语言的语法本来就是不自然的，奇怪的而又变态的。"></a>C语言的语法本来就是不自然的，奇怪的而又变态的。</h2><p>之后我会出一篇关于C语法的博客专门研究这“变态的”c语法。。。</p><p>欢迎吐槽评论</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 征服C指针 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C指针 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
