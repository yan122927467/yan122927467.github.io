<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>markdown语法，由浅入深，最全攻略，笔记神奇。</title>
      <link href="/2020/02/19/markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/02/19/markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h1>一、markdown简介</h1><p>（注：如果对markdown有一定了解。可以略过此处，第一章主要对markdown基础知识做个补充,摘自菜鸟教程<a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">此处原文档</a> ）</p><h2 id="1-1-markdown背景"><a class="header-anchor" href="#1-1-markdown背景">¶</a>1.1 markdown背景</h2><h3 id="1-markdown是一种轻量级标记语言，她与徐人们使用易读易写的纯文本格式编写文档。"><a class="header-anchor" href="#1-markdown是一种轻量级标记语言，她与徐人们使用易读易写的纯文本格式编写文档。">¶</a>1. markdown是一种轻量级标记语言，她与徐人们使用易读易写的纯文本格式编写文档。</h3><h3 id="2-Markdown-语言在-2004-由约翰·格鲁伯（英语：John-Gruber）创建。"><a class="header-anchor" href="#2-Markdown-语言在-2004-由约翰·格鲁伯（英语：John-Gruber）创建。">¶</a>2. Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</h3><h3 id="3-Markdown-编写的文档可以导出-HTML-、Word、图像、PDF、Epub-等多种格式的文档。"><a class="header-anchor" href="#3-Markdown-编写的文档可以导出-HTML-、Word、图像、PDF、Epub-等多种格式的文档。">¶</a>3. Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</h3><h3 id="4-Markdown-编写的文档后缀为-md-markdown。"><a class="header-anchor" href="#4-Markdown-编写的文档后缀为-md-markdown。">¶</a>4. Markdown 编写的文档后缀为 .md, .markdown。</h3><h2 id="1-2-markdown应用"><a class="header-anchor" href="#1-2-markdown应用">¶</a>1.2 markdown应用</h2><h3 id="Markdown-能被使用来撰写电子书，如：Gitbook。"><a class="header-anchor" href="#Markdown-能被使用来撰写电子书，如：Gitbook。">¶</a>Markdown 能被使用来撰写电子书，如：Gitbook。</h3><h3 id="当前许多网站都广泛使用-Markdown-来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit、Diaspora、Stack-Exchange、OpenStreetMap-、SourceForge等。"><a class="header-anchor" href="#当前许多网站都广泛使用-Markdown-来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit、Diaspora、Stack-Exchange、OpenStreetMap-、SourceForge等。">¶</a>当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge等。</h3><h2 id="1-3-编辑器"><a class="header-anchor" href="#1-3-编辑器">¶</a>1.3 编辑器</h2><h3 id="编辑器有很多种，基本各大编辑器都可以编辑markdown格式文档。"><a class="header-anchor" href="#编辑器有很多种，基本各大编辑器都可以编辑markdown格式文档。">¶</a>编辑器有很多种，基本各大编辑器都可以编辑markdown格式文档。</h3><h3 id="比如：Typora，sublime-Text-coderunner-印象笔记，vim等等等。具体的可以百度，都非常好用。"><a class="header-anchor" href="#比如：Typora，sublime-Text-coderunner-印象笔记，vim等等等。具体的可以百度，都非常好用。">¶</a>比如：Typora，sublime Text, coderunner,印象笔记，vim等等等。具体的可以百度，都非常好用。</h3><hr><h1>二、markdown基本操作</h1><h2 id="1-标题"><a class="header-anchor" href="#1-标题">¶</a>1.标题</h2><p>使用#号标记，可以表示1-6级标题，随#个数递增。如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></tbody></table></figure></div><p>注：最后一个#与文字间一定要有一个空格。</p><p>显示效果：</p><p><a href="https://i.loli.net/2020/02/17/wIWVKahMtmTLu4n.png" data-fancybox="group" data-caption="显示效果" class="fancybox"><img alt="显示效果" title="显示效果" data-src="https://i.loli.net/2020/02/17/wIWVKahMtmTLu4n.png" class="lazyload"></a></p><h2 id="2-换行"><a class="header-anchor" href="#2-换行">¶</a>2.换行</h2><p>markdown换行方式有很多种</p><ul><li>直接在一句话后面敲两个空格</li><li>两句话之间加一个空行</li><li>如果你在编辑的时候，想让一行文字分成几段在显示的时候换行，就在中间加</li></ul><p><a href="https://i.loli.net/2020/02/18/UrtqpfeOPlDW5VT.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/02/18/UrtqpfeOPlDW5VT.png" class="lazyload"></a></p><p>此点是我想在表格里换行时get到的，也很实用,后面讲到表格我会展示。</p><h2 id="3-字体"><a class="header-anchor" href="#3-字体">¶</a>3.字体</h2><p>markdown支持几种字体：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="emphasis">*斜体文本*</span></span><br><span class="line"><span class="emphasis">_斜体文本_</span></span><br><span class="line"><span class="strong">**粗体文本**</span></span><br><span class="line"><span class="strong">__粗体文本__</span></span><br><span class="line"><span class="strong">***粗斜体文本**</span>*</span><br><span class="line"><span class="strong">___粗斜体文本__</span>_</span><br></pre></td></tr></tbody></table></figure></div><p>把你想修改的字段直接放在中间即可。显示效果如下：</p><p><a href="https://i.loli.net/2020/02/18/JNMP7tG4KdXaxoj.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/02/18/JNMP7tG4KdXaxoj.png" class="lazyload"></a></p><h2 id="4-分割线"><a class="header-anchor" href="#4-分割线">¶</a>4.分割线</h2><p>markdown中分割线，能是你的文章结构更加清楚</p><p>几种分割线的写法：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="emphasis">***</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span><span class="emphasis">* *</span></span><br><span class="line"></span><br><span class="line"><span class="strong">*****</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>- -</span><br><span class="line"></span><br><span class="line">----------</span><br></pre></td></tr></tbody></table></figure></div><p>这些都可以是分割线。如果你在你自己的博客网站加上美化，他可以看着更舒服哈哈哈。</p><h2 id="5-删除线，下划线。"><a class="header-anchor" href="#5-删除线，下划线。">¶</a>5.删除线，下划线。</h2><p>写法如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">~~删除线~~</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag"><<span class="name">u</span>></span></span>下划线<span class="xml"><span class="tag"><!--<span class="name"-->u</span>></span></span><br></pre></td></tr></tbody></table></figure></div><p>显示效果：</p><p><a href="https://i.loli.net/2020/02/18/O5K2AyjdYMRsLqN.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/02/18/O5K2AyjdYMRsLqN.png" class="lazyload"></a></p><h2 id="6-分点条列"><a class="header-anchor" href="#6-分点条列">¶</a>6.分点条列</h2><ol><li>无序</li></ol><p>markdown可以通过 * - + 开头作为列表标记。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">* </span>第一行</span><br><span class="line"><span class="bullet">* </span>第二行</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>第一行</span><br><span class="line"><span class="bullet">- </span>第二行</span><br><span class="line"></span><br><span class="line"><span class="bullet">+ </span>第一行</span><br><span class="line"><span class="bullet">+ </span>第二行</span><br></pre></td></tr></tbody></table></figure></div><p>显示效果：</p><p><a href="https://i.loli.net/2020/02/18/e6z4iBGOrKhySF1.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/02/18/e6z4iBGOrKhySF1.png" class="lazyload"></a></p><ol start="2"><li>有序</li></ol><p>有序的直接数字后面跟着一个点就可以了，和咱们平时写的一样。</p><ol start="3"><li>嵌套使用</li></ol><p>有序无序也可以嵌套使用 如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1.第一行</span><br><span class="line"><span class="bullet">  - </span>第一点</span><br><span class="line"><span class="bullet">  - </span>第二点</span><br></pre></td></tr></tbody></table></figure></div><p>效果：</p><p><a href="https://i.loli.net/2020/02/18/wg6JV1rRxzoEvAi.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" title="image.png" data-src="https://i.loli.net/2020/02/18/wg6JV1rRxzoEvAi.png" class="lazyload"></a></p><h2 id="7-区块"><a class="header-anchor" href="#7-区块">¶</a>7.区块</h2><p>markdown区块是在段落开头使用 “>”，依然是紧跟空格</p><p>写法如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="quote">> markdown</span></span><br><span class="line"><span class="quote">> 基础</span></span><br><span class="line"><span class="quote">> 区块引用</span></span><br></pre></td></tr></tbody></table></figure></div><p>效果：</p><blockquote><p>markdown<br>基础<br>区块引用</p></blockquote><ol><li>区块嵌套</li></ol><p>通过">" 个数展示分层差别：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="quote">> markdown</span></span><br><span class="line">>> 基础</span><br><span class="line">>>> 区块引用</span><br></pre></td></tr></tbody></table></figure></div><p>效果：</p><blockquote><p>markdown</p><blockquote><p>基础</p><blockquote><p>区块引用</p></blockquote></blockquote></blockquote><ol start="2"><li>区块中使用列表</li></ol><p>实例如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="quote">> 区块中使用列表</span></span><br><span class="line"><span class="quote">> 1. 第一项</span></span><br><span class="line"><span class="quote">> 2. 第二项</span></span><br><span class="line"><span class="quote">> + 第一项</span></span><br><span class="line"><span class="quote">> + 第二项</span></span><br><span class="line"><span class="quote">> + 第三项</span></span><br></pre></td></tr></tbody></table></figure></div><p>效果：</p><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项</li></ol><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><p>注：在列表中使用区块是同样的道理，这里不再赘述。</p><hr><h1>三、markdown进阶</h1></body></html>]]></content>
      
      
      <categories>
          
          <category> 上课笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 上课笔记 </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记————电路与电子技术第五版（主编：张虹)</title>
      <link href="/2020/02/18/%E7%94%B5%E8%B7%AF%E4%B8%8E%E7%94%B5%E5%AD%90%E8%AE%BE%E8%AE%A1/"/>
      <url>/2020/02/18/%E7%94%B5%E8%B7%AF%E4%B8%8E%E7%94%B5%E5%AD%90%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h1>第一章电路基本概念</h1><h2 id="文章内容提要"><a class="header-anchor" href="#文章内容提要">¶</a>文章内容提要</h2><ul><li>电路理论基础</li><li>电流的参考方向和典雅的参考极性</li><li>电阻。电容。电感元件的特性</li><li>电压源。电流源的特性</li><li>受控源与独立源的异同</li></ul><hr><h2 id="重点"><a class="header-anchor" href="#重点">¶</a>重点</h2><ul><li><h3 id="电路模型的概念及科学建模："><a class="header-anchor" href="#电路模型的概念及科学建模：">¶</a>电路模型的概念及科学建模：</h3></li></ul><h3 id="1-电路"><a class="header-anchor" href="#1-电路">¶</a>1.电路</h3><h4 id="（1）电路的分类"><a class="header-anchor" href="#（1）电路的分类">¶</a>（1）电路的分类</h4><p>其一，集总参数电路和分布参数电路：将实际电路的几何尺寸d与其中的工信号波长λ比较，满族d<<λ的称为集总参数电路，不满足的成为分布参数电路。</p><p>几何尺寸：电路板的最大长度，比如你研究教室里照明电路时，电路的尺寸大小就是教室的大小。</p><p>工信号波长：</p><p>其二，线性电路和非线性电路：若描述电路特征的所有方程都是线性代数方程或先行为记分方程，则称为线性电路，否则非线性电路。可以理解，但是还不清楚方程是啥样。</p><p>其三，时不变电路和时变电路：食不点电路中元件参数不随时间变化，描述其电路的方程式常系数的代数方程或常系数的微积分方程，而时变电路是由变系数的代数方程或微积分方程描述的电路。</p><h4 id="（2）电路的功能"><a class="header-anchor" href="#（2）电路的功能">¶</a>（2）电路的功能</h4><p>电路的异种功能室实现电能的传输和转换。</p><p>电路的另一种功能是实现电信号的传输、处理和存储。</p><h4 id="（3）电路的定义"><a class="header-anchor" href="#（3）电路的定义">¶</a>（3）电路的定义</h4><p>所有的实际电路是由电气设备和元器件按照一定的方式连接起来，为电流的流通提供路径的总体，也称网络。</p><h3 id="2-电路模型"><a class="header-anchor" href="#2-电路模型">¶</a>2.电路模型</h3><h4 id="（1）理想元件"><a class="header-anchor" href="#（1）理想元件">¶</a>（1）理想元件</h4><p>了便于对实际电路进行分析，通常是将实际电路器件理想化（或称模型化），即在一定条件下，突出其主要的电磁性质，忽略其次要因素，将其近似地看做理想电路元件（简称“理想元件”），并用规定的图形符号表示。</p><p>这个可以理解。忽略次要因素。</p><h4 id="（2）电路模型"><a class="header-anchor" href="#（2）电路模型">¶</a>（2）电路模型</h4><p>由理想元件组成的电路，就称为实际电路的电路模型。图1-1（b）即为图（a）的电路模型。</p><p><a href="https://i.loli.net/2020/02/17/dViKRzFxucYqE95.png" data-fancybox="group" data-caption="此处加入图片" class="fancybox"><img alt="此处加入图片" data-src="https://i.loli.net/2020/02/17/dViKRzFxucYqE95.png" class="lazyload" title="此处加入图片"></a></p><h4 id="（3）建模"><a class="header-anchor" href="#（3）建模">¶</a>（3）建模</h4><p>以上用</p><h2 id="1-2-电路基本物理量"><a class="header-anchor" href="#1-2-电路基本物理量">¶</a>1.2 电路基本物理量</h2><h3 id="1-2-1-电流"><a class="header-anchor" href="#1-2-1-电流">¶</a>1.2.1 电流</h3><h4 id="（1）定义"><a class="header-anchor" href="#（1）定义">¶</a>（1）定义</h4><p>电荷的定向运动形成电流。</p><h4 id="（2）大小"><a class="header-anchor" href="#（2）大小">¶</a>（2）大小</h4><p>电流的大小用电流强度衡量</p><p><a href="https://i.loli.net/2020/02/17/GWeLCM38hotbAyK.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://i.loli.net/2020/02/17/GWeLCM38hotbAyK.png" class="lazyload" title></a></p><h4 id="（3）实际方向"><a class="header-anchor" href="#（3）实际方向">¶</a>（3）实际方向</h4><p>正电荷的运动方向</p><h4 id="（4）分类"><a class="header-anchor" href="#（4）分类">¶</a>（4）分类</h4><p>恒定电流（直流DC）和 时变电流，分别用l和i表示。交流（AC）是时变电流的特例，周期性变化，电流平均值为0.</p><h4 id="（5）参考方向"><a class="header-anchor" href="#（5）参考方向">¶</a>（5）参考方向</h4><p>参考方向具有任意性，参考方向为实线，实际方向为虚线，实际方向与参考方向相同，电流值大于零，反之亦然。</p><h4 id="（4）关联参考方向"><a class="header-anchor" href="#（4）关联参考方向">¶</a>（4）关联参考方向</h4><p>即将电流的参考方向由电压的+指向-。这样为关联参考方向，反之不是。</p><h3 id="1-2-2-电压"><a class="header-anchor" href="#1-2-2-电压">¶</a>1.2.2 电压</h3><h4 id="（1）大小描述"><a class="header-anchor" href="#（1）大小描述">¶</a>（1）大小描述</h4><p>在数值上，电路中任意a,b两点之间的电压等于电场力由a点移动单位正电荷到b点所做的功</p><p><a href="https://i.loli.net/2020/02/17/a2C6zDwVUsTZdIH.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" data-src="https://i.loli.net/2020/02/17/a2C6zDwVUsTZdIH.png" class="lazyload" title="image.png"></a></p><h4 id="（2）-电位"><a class="header-anchor" href="#（2）-电位">¶</a>（2） 电位</h4><p>电路中任选一点作为参考点，则其他各点到参考点的电压叫做该点的电位。</p><p>用符号V表示 且有关系：</p><ul><li>​    U*ab = <em>V</em>a - <em>V</em>b</li></ul><h4 id="（3）电压参考极性"><a class="header-anchor" href="#（3）电压参考极性">¶</a>（3）电压参考极性</h4><p>同电流。</p><h4 id="（4）关联参考方向-v2"><a class="header-anchor" href="#（4）关联参考方向-v2">¶</a>（4）关联参考方向</h4><p>即将电流的参考方向由电压的+指向-。这样为关联参考方向，反之不是。</p><h3 id="1-2-3-功率与能量"><a class="header-anchor" href="#1-2-3-功率与能量">¶</a>1.2.3 功率与能量</h3><h4 id="（1）功率的定义"><a class="header-anchor" href="#（1）功率的定义">¶</a>（1）功率的定义</h4><p>单位是W（瓦）</p><p><a href="https://i.loli.net/2020/02/17/JAgvhQbnUOyIHMC.png" data-fancybox="group" data-caption="image.png" class="fancybox"><img alt="image.png" data-src="https://i.loli.net/2020/02/17/JAgvhQbnUOyIHMC.png" class="lazyload" title="image.png"></a></p><h4 id="（2）功率的计算"><a class="header-anchor" href="#（2）功率的计算">¶</a>（2）功率的计算</h4><p>首先需要判断u，i 的参考方向是否为关联方向。</p><p>如果关联，则p = ui；否则 p = -ui。</p><p>结果若大于0则为实际消耗功率，反之为实际发出功率。</p><p>注：吸收功率等于发出功率</p><h4 id="（3）能量"><a class="header-anchor" href="#（3）能量">¶</a>（3）能量</h4><p>能量是功率表对时间的积累，其表达式可写：</p><p><a href="https://i.loli.net/2020/02/17/OteYfTc9BdvF4AH.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://i.loli.net/2020/02/17/OteYfTc9BdvF4AH.png" class="lazyload" title></a></p><p>硬件理论体系支撑</p><p>​</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 上课笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 上课笔记 </tag>
            
            <tag> 电路与电子技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开学计划</title>
      <link href="/2020/02/16/%E5%BC%80%E5%AD%A6%E8%AE%A1%E5%88%92%E6%B1%87%E6%80%BB/"/>
      <url>/2020/02/16/%E5%BC%80%E5%AD%A6%E8%AE%A1%E5%88%92%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">您好，请输入密码，不知道就别蒙了。</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="9b4bfdaa56f93b53faaf5873b9616472cc6c9cd10559844dc2d41bf7d8a8ad32">ba7233cb4492a779478ef44e61ef447c28141d18b1231ef6bbffa250b7c0f66f24db462cc1261ba70150ff3ac99f766c1f94890d60773646e2115b802c8b3a09db38fb51734a671df187131ec5d06cdb4e9cec757c91a89496f2dcca128ea3002b4daf37332a0a787c27bf74f71ff4ac29afa9804c123bd9854ddcb2ef037ba7934bcb6c5304027e68bb26674f5885b6e2a5b1e6aa76feffc847dbf54cd67550ad0fea75204ba84daf46ed589f24e794739b848736141324c5e96679ac8754ea67ce0aefc9f856b605b9fef5c6339da2779d72002db303a22ed327b682b9841b128dd482cd48333a37d8546a1cbfbc1c6808745196a829718459107716358b5a9da558b86067d208e4eb5905f277f94622ff2fd5a7fb19dd60b76e0ea1ea9345ed49355d088e3d199138b845f16786189572eba377587b9bfcf8e975fdc54baee74f636a0d34f6baf8eff02cb7ab76866fc3e2a224868bf839b386f4db389324d74e584d6d914466f2598bd8533f79f8738a23f832ffd10df030de558a3a0362fac006419d33fc1de79595208444e99376b10993bdf1af8397d2d98574d871f7e74f442c01f3b404ab0ee2b6157450dc4a7de0ef93111a7244ec63df4b6eb631db358e7fbad41f8d00e3a0a1b7834164a0a6e1db4bbd3272b7f532a9a0c2717e2f83998bb57401053ffa6f9ef43dff2b24bfe9c0c5990c90e47846312b62d82f5464ae56ab2514455e5e3962b289933ff4086fd707a3fcc1b0c14ed8433bc95b95eafbf25d486fc286d97c785291ee5d843e085bdd47c8fc07d33700cd5f17b1c35c0a9f6c5d4982c241173305d1c1d44891eb740271d854cb36f992252cd200bc2afaa61fbf82e6529c5437bacb1c95f36951933d1e3d34bcdeb0ffb6d85684c058ba16e4f7d71553e0d780821015269c53b00c069bd69190adee4f5b5f0eb4c4ab3bc4cf246a0962fc9bac00adc744e82b858f30a6b851641289a4f2a3f516478046621c3ed108cd7465a7cf316ea95e7720dda99bdc123012c45f50f3f2c63da206a7c12887d973b1e541703967a29527b9089d29622ce9187fda86a3f391c2c1190b6109cf410d8024670b9ec55c5a7f43e28348a3cc07eb79e0aeb42585325eac325ab1cb22717b28edfd5f87991d7d5fe9de67bffc1fe7e41d229dd09d9e147e994776b48352d793d9420227d733b7647e2cf5b1f8c13ae5781a6303c7a8f03f10322c50ce9ec2478e63ff011da4f9edd9e43353e949f7cd0f594920e144e5aa11a7bb9428ea8489d508e2ffbda49a2c53e5fe2b89322588d2d9d182b0f03bcf31f319d662bb16aab66caa422a49fc6ae3e8647fd141e2b7d7a68b1ead2dcf6cf172c47416fb48b94e249b124ca9be148aec823d3e555a85c9d21098c3273f6dda15ef59c0150ff956d42927669b24e584685d2a3d65c6cc200c8faa2914d2aa246d24c905099acd096e99664b3db44ed9f9165d138a71da7b8354966ea867606df959c25635aab41d1ec3bff43a1f911479fe5fbb46e58e8e08d6359b40a53ce773f3e999f265bcf128adac4947ddb25e3dd9b5f419c410dd00d44535a72317a1b4341e213697ff552f70de4b8fb78a6e0e9ec651288c429d5e2d4bfcf9fb769e478d8918edac5a672b7b67ebe704297964dd6225e0afc8d2203543007a05e8920813666447eea05fb63116e957d9a10c550cc02fecb9aadfc8949ab67cc361ab916424d83ac693800dcbf79c6ddcd6814ef245d4a2f8a36365723265313d97025e3e80dbdf2df59880b3253a386a99a14edcf4d66efed6bd565c1b1bb3a0573a8549d7baa957883169a055d2af31c683b33fd9af38d1451dd473c06060e3bfa39eb0969adfbdd498af3709642762107fc1ca7a5200b7b06d8d72f5caa09630eeabd8659730252e441016985680b8908a7578bf094c7a575fa35a82ddbabccc345c113ae6e617ac2069e094e6e38c3099b6f57e87ec3c23fc58167046bebfa9426f0f24279bb47db4e350514215dd93c60b3061a860e5744ea3990a10446b609988bcd4288b36c9bc1b501760e089b3047e612b3cd2877cc49432926c0919440b9042dddd3816c34077eb33f714feda4ebd677189280d19dd9e24c1e9d449904037ca7d6d1df234ce500717499a0b37dd5785ee5836bf3986cf31e2805429c96d10ec39d47328bcbba8272eb95742fd9459fffe1c4df5173df5dec15ddf8ed99a09bc25b5b4abfcebf1087153d6586101a3236b12aa90d1717669a1707864ec751c409affc721bda64f625f4d1a1eb6e7b9972f650efce5b0156a47448d872a08ba7df13556e0a515759a809aece4bfaceb212093a8ec7e383593b5d5a8b9a67e3b13d568d66fadbce0dbbf48ec79a79aa071b4f433a67ced1583f9ed33ac92a01745097014af7fa862e799a6ce9192b96d14650c0749a6831627435bf1908b53129b8ad2841120ed6982c6d901c70e281b859cd71f5e32b840912e1b3175f89b0dd68fdbeabc07b4141d4bef40b98ce6fe4aa9b571af8e2258d11c479c7f919efc858b62aec024b7f685f7a9be329c35f18ac617acc82a721eda399f67b736a1a490320ac9b5196ca75b9658c7cc410d365d6d1641b5b152fa0330ef49ae50cf107a160d15df1f5fae6efe246327efb47a5727bfb415644c6d66264c28e2c63e0ff11e7adc00e6ef50ca4e20075380f18d5b2445d63b8846eeaec4a2c103f3822013f1ab00573b463733013493a958f09b760387e69da4a2a272484fa72a8311034886bceb8e5de84fb21b125790d762b9d17954d5e3efb8879f5f53e846dba153702b1c756b5e0a7632d5299ad372815911b077da3617c5d6535d90f5bd6fd953ef6dd3933a463c323164880e7f29b057bc48a55282393448457a8412161adf3af678b6018c04dcebfede6148877ccc11f0ffb847403e3a81648d9e2c4e4156ad3378b8a96c3261d41ac6d3c82f00b0c8dcb2d4e0bc39de36108384d017f0179b0df62c3fa4082275649ffe40b94a2d04de33c0a7cd6ad8b9d0d4b4f9741fbaf5541c213e655bca3d4043e06dff2fa6d5b9ba53e3dbef89426defeda95bdc5a630d6642e6ff285e743483f2177f0743ba90189f0d3cf1456bcf440201eb0468ca9c7510eedc79e82f92f151f1952a77cc9231b1f44dcd037f593c8b12cb7c3e18685ce916e3025211edd6f4977b3f4b90acac76114109acb77ce31fb3d0a6b2571ad605e8b8e4c769e83a9894dcd6b316e71b02a551cf90c168532127179f4a64e49f53043da6b6986f52f75e13b6a9ff212a3d1f2e65eed7f62125b97a1b8fc3dadfb99a5953f119c5baf8f911624c519f75238483b8617d5dafd22e95bcba0e3740336b259a900cba367504b4420accd2be163fb552d63c19f73e29dbe20ec13de922f6052ad9b9ca6100534c324db484b50a90ce8db8a42975c804e78b050aa16171664aa2019a58c6f21533f027d99c0f219c51c5a1ea1768006381269efdb7ab63e11bd510be82c9a659db505392dd9278ba158c14342c8afbaf75e909048fd3234c46b5d98ca6dffe2dfab186a936dc442d2a742db686505aa921a04c886ca96eed033608595e3796457e7b6a8f3f561b3e25b46b386b362d45e0bdcc4d5c768a8734c40a85e677c3051825a07892583735124661a72135402c6986dc21db92e4c4da844b6fba052ef0a095c2daedefcf8ea39cbe88567db2bba09bf3e26a6d2520ed3a0ecb0daa5eb8fdd8c94d669fff2e267a421f2430830b9b888a3f04a08fb356b28abb9e56c4ab1ef50a6992333d2247b69f1ae03568146b14fc329b3982bb725c18f7be9657b6694b4f21b41d24b87b71304d0098c8e45fbee2407972dd5f42b7bdebca01dbf6198d865756ad7deb52ceb063700dedd1b0133556852a3b2869353a9df56e0e59f29d390d2f60247f82f55d20eb39c2fd20b77ffe906086bc7e2705e418989cf6e57af76c236506fb0b778aabebc3c07c79a4a960985fa10b32252bcdca14d3e71352c2787d88bd1b86d52911574e1f78143368a0e38652970b54487853eff997ce5715fb0279919b9c64ac79bf81581ec1f154c7879f214fae1a7310de4711257c33458b987c330ce4feab4304f9a063f19a8e8aa6454c8ddaf8db73d16d721d67fea5326c1ce8d59a62338170f85e79c9908ad387d4e6efc10cc3f8ac5cdd5e3b503e0240d4260361cd8e49da6b579886f40d9353341c72659c9c06ef6570710e0ac9981592aef333a2e22dc96cf67d4f60795fdb8c3507e1a370d812c4de0f6131e4dbf47548ba744d80a794df1f838b3c3667d95b333ba20dd50f46df5e1c888f14c46452065b4e1ce9d23179e18a11bc2c4dab6f537d882c35ec2041d83d9a18cd6b3a676ed02e0f91de63f37c7f4786247fdc403bd36214152344bc040ef87c87992d13d443df8c5c3caac2321e9d1e8f6bfe0da2dd46b7d220fe7c0663f34d93c4f421197b5822d59bb2038c531970b3dafd41af74286f1fcc45acc1</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> My Daily Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
            <tag> 2019-2020春学期开学计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>word中如何加入带√的□ ?</title>
      <link href="/2020/02/12/word%E4%B8%AD%E5%A6%82%E4%BD%95%E5%8A%A0%E5%85%A5%E5%B8%A6%E2%88%9A%E7%9A%84%E5%B0%8F%E6%96%B9%E5%9D%97/"/>
      <url>/2020/02/12/word%E4%B8%AD%E5%A6%82%E4%BD%95%E5%8A%A0%E5%85%A5%E5%B8%A6%E2%88%9A%E7%9A%84%E5%B0%8F%E6%96%B9%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h2 id="打出有勾的方括号"><a class="header-anchor" href="#打出有勾的方括号">¶</a>打出有勾的方括号</h2><p>输入一个大写R，之后选中，把字体改为：wingdings 2 就OK了，然后自己试了试在这个字体下输入了一些别的字，发现有许多图形，还很不错。</p><hr><p>于是就百度了一下对照表</p><h2 id="如下："><a class="header-anchor" href="#如下：">¶</a>如下：</h2><p><a href="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1176238582,3363171188&fm=26&gp=0.jpg" data-fancybox="group" data-caption="对照表" class="fancybox"><img alt="对照表" title="对照表" data-src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1176238582,3363171188&fm=26&gp=0.jpg" class="lazyload"></a></p><p>在这个字体下，对应输入，就会有这么些不同的图标，不错不错，长知识。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Microsoft技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> word技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My Daily Life Feb 11th</title>
      <link href="/2020/02/11/2020-02-11%E6%97%A5%E8%AE%B0/"/>
      <url>/2020/02/11/2020-02-11%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">您好，请输入密码</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="5f62d27c3e5a387163ab27979b1ecab18458c32f3bd3932a7b8a723b50fc6821">ba7233cb4492a779478ef44e61ef447c28141d18b1231ef6bbffa250b7c0f66f24db462cc1261ba70150ff3ac99f766c1f94890d60773646e2115b802c8b3a09db38fb51734a671df187131ec5d06cdb4e9cec757c91a89496f2dcca128ea3002b4daf37332a0a787c27bf74f71ff4ac29afa9804c123bd9854ddcb2ef037ba7934bcb6c5304027e68bb26674f5885b6e2a5b1e6aa76feffc847dbf54cd67550ad0fea75204ba84daf46ed589f24e794739b848736141324c5e96679ac8754ea67ce0aefc9f856b605b9fef5c6339da2779d72002db303a22ed327b682b9841b128dd482cd48333a37d8546a1cbfbc1c6808745196a829718459107716358b5a9da558b86067d208e4eb5905f277f94622ff2fd5a7fb19dd60b76e0ea1ea9345a4b2ea1f21c3983a4d03e453e89377571e5597f36ed8fd310d326994b4c2373188fecae242c6f63ce25420d391205f9a5ec9e383a45300d660e6e44882614049c3220756c453aecdf0168d12628f4ed9fe1a64a3ce5187acb14eb12fb3e063f7120e58d6250cb854091268db8c5e2103fc41673465c7abbbfa18d9ff09dc1b9cbb15a9a4937d9e602e9f238b01e76faa79b529c27d592318de0ee483bfb89de68c82c62be8eadac45819abcf7dfbb0e826642ff28a9e87c400f5fe97e6418b36f46b941e8a69ff38cb7805481165ab5969596f8e031abffe2ecfff8eabb17b777e1de0e17209d12004eee0f953d6a11923c65765e71d4d2c547b2c4a237432a05cc5b4aa16abbdb344196e67cbde0f1ece471dfa1cb8eee8ec930762ed3742fb5e214e28716d3094429c799a4948607c46e46de64d57514eb851cea5b53d767ce32fb189ef5ef85704ea582b6915113ef9fcfee2ed45f57ba718cf12a06735d8b3a6b7d89cb22ee9375ec99af0a9d3da62b61ba7872101579116687950e5c6cc2a0a56e0bbe530098310f7a998f28e1fd08a0628e29fb7d2e87001c0b19cac4cf77002924fc3b2bfc373af4b7f4de3a44e539ad793385af20d094b5732380851339f1ffe17142c288dade3e0d0d8f2a96dc246ebcb89f8031607a091dc03cbf22ba32f6ee345e95e5a516805227a6221cb7255a667ab64f852f39c5c5a6a0bcac3d3f0c73b7532ca2eb24798159b3232f86fa3a12fc409014073783111271e7befd5dc13a28639c4330901707767fbf1058e04a198f255e385cc2a33a3e423331db5629aa75f4fcafb5fe835a183a545f18332661c42b2ee1aa8aecb1e5688771c151d96ca921a14090f4c033f4062545afff50eda33a4b3b164ebaa56c8ee6e24bbf697cf144b768096965317487bc1fd28b9663794f3934e338742c64c796f8010e3f5f23fe1e9d60def65c03079f25660e735175d08cd5868d578c92ebc14df69314df278782c4aadc65b6ec962b6fb9c37270d8fb6f1345fabb0f3ba47682b23c2003540086274171f4d153e0c03b91312c97f7c1a54043a6f959aa56d9989a873d66a8f84f4a7bd826425ea90888f4deb1059c0941d4fefe2dbb851269bdb96ffd569b68c75c46d150f95b8e491a741dec7140063c83c982708944eaa89899296136570e96ce245f8ec47fd2bf0872609433440c9d3358494680a5b40e79182ea24134eaf9fe9d8a189a66497f4523801971c2e70e4c9fbca3c6474f18b54030f3ea7716c1df158c15725f51ddd751d4ca0c4697a250f6ae7c8223b4d13b7bac8b408bb99c749e52c22cba4a28b57cd69030b9e41ced32bc6816eb80557362f40f1daafc5830b4544c24a4a223d16f1b296bd863f127875b96efb68ba31c263d2b4ab8935ab01ff6d94ddf38a41f7ee3630f25ec2ae56c5d6710f8fa78b885dd35486497f2b42e64d02c3e4e1b9ebdbd2fabab1a683d633e9ee691531b3c18d641c194168642648d857cb3f8579c3a58ff3372c18a2956f3acbc2ff6c31fb2e4f213df3490f0131f23e9cc5a88f940bf3612088b50fb33fd39952c9e510b10ddf9ba58c40fb2eec17dc01e1d73b95d8bf278d6c63ca0f732e1d8be15ca85b09a9ff04abff0f9a00649e9fc5cbb206fe2d6950595b66f4834e8d8aa4bc77c5d4fff22a5e0a38162b30d1f91ef7c372420d33ca167b75ab17f5a0463a8bcdac692fc00048292af279b84f7e4738252be492ac4892545b0a4579f641f81d753d4a8e2a231efa1c2b7e1fccbf5ce89d21720e1216504923291c29717f10902b47154733eb1817a78a598c03037cd76ed8aabb04ae4fef347c14ba106cea63692930365effaf1e02d699fde98aab8de21237a6121ac730245742266972a85a6f63bac4cb57764d0ce016fe71fdd7f7f310328f8c7172d54200e9c6f82a00b08a61cb986af34b7d32c2ac8bace1898800cd716276660c5995f28f012c66be9e40663f4423f2717e162ad623e24a6c91253efd9ae005b9e13c0869c7710f1dc4ddaa1d4a12f8cd140d4b836438b16b0e8a749020a8c2c59b8f65f2b692ac1b37183ff6d95e7cfbb84545bea25873168d1da873488cf162fbc9dd06ab7e5333b4bfa11e61fa53f2aa0a17a511ac9bbc66e465358918a480d66e4d78fa9d93db937f46b067aee02781d6f6d61f3b3d7d562303c943dd0c12cc84d1f2b6cff06b84c6aca3076ca06e8c1a948cf0b75193f7f9e8658f57fb8a5dcc84fc03fc2c9591d5bfb7a5ee7bbed3154365d816aeca656bc9a267557b4f5ba516d3c0c7b682be4c31874901bceaa09f326f68690304a356dd826189fb4bf1f72b1a6c27c71bca91c9a653c48018301c9231c0c3bb75007c612e29bf2854736b1f65d29ca346af5327a3aeb5d785c78abe445f87c2dc468ed53c3f55875377254aea15bef32f7385b4912727adbb40a53cc25c08226af0451d3365555e9e3ee8aced6388b198fd13dfaa03c7e1c0894be799ef7eb82bc71c9be6b85be7194e4a16a9606b6679fff7f9c49353d5de7fb6af4b272eae40d05dda6410d8e58fc9edbbd0dd7259ae4d764bc17ef612018b6c17398ac0230175b572a8bf284b4861f3e6c23dc7a7c2eb0de45d8948cbcf3a356abe578170e33d116339eed3be1224e74af46a64a12aa8bf6c0372a52f88d58c007117cd9d7fc3441d3739e5562f1814feea4947adc9b663f64410428abbef1a6b7ce4431336bb5799eb350c83147ebedd1325952381c94401dad13a50df500d710008da1718c6af8452c52efe2ce24a81d2f746497e0d50fbb5f29d6152515e14d3b1bb0149bc8c822b994848a83a501d2bdd7e9afbe16f6d3c98195091d3c83128906282e60a208638da0e77a8d9c5e86c0d692a63e18d51423fe59374267f7c7e2ea5bc8ebbb1dabeb6bf723c48b48a7f887a4aaa3a7e7b0f51afca5b54cc105a5817fda29127e629ffbefc71cb00989be5dbea55ca50e3ad0f108756c5e766e9215d67fdb06fff7fd7adce81ad769b84dd719535cbc220e4ec7b584feb8a30628cd6a0cc57cb9070b3ecbd69b79a70de912882e05271486cf379d63a1c6fbaf4d8fdf2f8b9b92460d615484456750853db62ef52ec97738c21a02596b450d301d94cfbc51f158a39343c5a1cfefee8d573748c9d5c384736613f354c9fb771aaa21892c1b6339f9e9c99a7d9ede937ee11ae56c0e56f6ea56c31bfccb74418c7d52e419b78e1c7ef31f12799dfb5ed98e31fda8a597fd573410f2d2b0651721a85f2421ac820ffb4e926a8409b4731ecd5b5f651e1d93c8d3a49f201d2ad10aebfc46fdff3309442d288e034b0652b903c3add43b5469b1e9b07f877944e3202cf8dfd5b0572ab3deeba93b20194021ec6be9ab749fcc5e3c32e2dd941c3d4bf53f1f94ec95270b9edc46235cdf37523e0a8ae327f84afa6e600600369e9d7d606601d8716d0859b6a82a8d556b0cba975c0d4f0be98fb6be8ca1791e7bafc8ea345c1874607010f8a2f1eca23dc1ae0fe19381bb3342675f1793f5e3cc609978c235bfc1ffb03b21305ec35be92aef2deaa64d1c37a9b803f70370d3b6eef9649f9498efb27fb46abffaa9cd3aabf21f20c9c6baf41fdd5f32fa8a0240d85f247a50db4906a36bc3e04a845d970eda72e65d349ab4fca613d449fdbeb3707b62639e4fb5c18489153a169c91c1d56f3a3325f5efb020ebccad76d101078606c5d92c506780586529e645b2d8897fd142b9502490c98e9eef46982f213b7e314bd2f6a69beb3b9ed39de53fb44f4fb9ab44c4f57c43ade48d21ad50881a93fbccac969a495003952a19be6a56483a1fe39a6fc6bce0358da0de2b93277b937eb453122b257a379bcf6de94fac87ac817893e57b63e45e7db31527ca7dea4851b1f63e7e21031d9b3b174faced18c38203a59dadf37412d0a97510d403405827e83ec7573614d4e2f79cbe11f06e4fd45dc3c6ff2defa11c5b8f3073642a7a7337ba3fc89fc6906ef77dcfb8afcc400f7e375b2525216f6a8824ce6123bc550d310fd60b08ec29bfcd95bcc3eec00b028d2e56cdce586ebe7fcedb682a50b41f53e476907d26142b3ab29294d0aefca152676ca923cfafc1cf9be269f9597cc162d56238f217cc047c9d33a41fbe995fe67b4e750bbebbff774276a9a2eeb078f28cda9e4f2ff9fac278e35f9b046dd5f9d21d2e606a20151027ed99ea0770c880c5f055294d86ddea121a0ed3e4bb5040f7b981480388008a0676abe35cac1b4fc143bbc2be42bac4292c1cecb7533eefb1d93cba771fe1c5b4034613ec44150c86f2224b3794c54d9a84881f8e04e06af8a64635b385a492b2b821e52fa6275880cbaf4007ed31638a94784b96c71a61cf4451ba937a9942cae506710cf0e90f9f7c7707183d07e9b6809e955674eaaf436337b6c3b264035d4260f07dde4fcbb319df6e67a1cecb5b6d49c05b71b5f0ccd5ac1131875008defe75711d61fae264b06270ad3ab0db9faa76ca22cd0f2bb8e583929bc59e47790a80774e67113703c6fea8d8ba7322f9a8cc496070ad26184562336c9f4d8a3d2cc4ec2a13f06a27d20a65acbd5339c75f168c5dce5c5b06eaffc9ff227c7c0d1b0eded9e403cbdac3c5d57430e73ba038ece86cb661cc5b1190bb27d43fe45f17f653ea33bc5193d71424c52eeb7bdb59d886c721d1e7cdcd1cebd0872d6ef5840f97dfcd52d5900341543e05e15af1d96ea62cb3af3001474aff7e1c097b8198f599cbfcd3c2af8e0c05c57</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> My Daily Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
            <tag> 寒假终极计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My Daily Life Feb 10th</title>
      <link href="/2020/02/10/2020-02-10%E6%97%A5%E8%AE%B0/"/>
      <url>/2020/02/10/2020-02-10%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">您好，请输入密码</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="22d34f769f1dd21c0a4015619088b7fdbccc9198d37d76e0d3bc6639760a2c5d">ba7233cb4492a779478ef44e61ef447c28141d18b1231ef6bbffa250b7c0f66f24db462cc1261ba70150ff3ac99f766c1f94890d60773646e2115b802c8b3a09db38fb51734a671df187131ec5d06cdb4e9cec757c91a89496f2dcca128ea3002b4daf37332a0a787c27bf74f71ff4ac29afa9804c123bd9854ddcb2ef037ba7934bcb6c5304027e68bb26674f5885b6e2a5b1e6aa76feffc847dbf54cd67550ad0fea75204ba84daf46ed589f24e794739b848736141324c5e96679ac8754ea67ce0aefc9f856b605b9fef5c6339da2779d72002db303a22ed327b682b9841b128dd482cd48333a37d8546a1cbfbc1c6808745196a829718459107716358b5a9da558b86067d208e4eb5905f277f94622ff2fd5a7fb19dd60b76e0ea1ea934506d34749cc737e9f35308f7d03931b04c75573324f1a35216d55464390d19a8575a5881c658ef3c8b40d59ceecb1f8314133489e206c26cbdc032fbbfe18643a0a2c3b0b8e1197d08aa0a40be748ef8c901da6e7689f1968e37da3ca5670399fbff0d24e9880cd1f3a3bc6ff97b67d5ab4ea702391e7cc2f6a4ea08c061c9b23c50d8548b3f069d970c147ad45ab306869a6a4c91a5344c82be31ee02e59854390ff1c6b229117f0c2083265ef8961f4c2969b24b8b15346850ce186113cd3613bb320da164c5a1df9f43ca987dff52cd4defb83809b90615482322f4c2df2d0896230665d6dd7c1eabd345c142d125bdf99419499a5c3c264d09cb87562788a266626228877006a6b7adcf3ebbbd248e9658069fedc4e1e52e9827b6862fa97fa83a199709acb962bb416eb0cff83da31e1cb3cd2bdbdc91b89b5462b5a713e90775d28ea533f4568e49fcdb83ec5b70d242f45df6fa3526e9e222d247c69f5ff33528294dfa1eac96aa3e0ca513c1a3e802b3d7adb3b21210b57ec1e98ac7f77649a8fa1404438e0771731e510fa34114e10dc63de1f1a67ec408e13e5c19d29ce08fb80f7c372051567ae56a4d0eb7aa39d1172d7ffa224202cf9806eec887416c7b4ed4589b15f5accd80086adec7a9093b0dcb978a2cb28fc238de57bddd01903af7a8f23d42b449d06d8ae57144680aa0fd9d1b71bfde34897748bd1abbfc570d5fa92a58d191d3f28090fbe50d697a2390cd85f28c61ebecc72a7c92fd1973ff86eb54f47a7817a56aa927dbb9ac29903199564cbec5376a876a1197385bbc4e3219797cd0b87978cbfee8879c0c846bbd9ca3049f3bde5437d6cc22320efe176749813b2426b900d6815dfae7ef2370e1cbbf29068eda205cdc8550bb1a5875028208a3f5570f8774e02bc42ce204ecd922de5009f4a867fafbc721c63b6db07040241e28ad67051a56b13136e62ba337917b514bb8ef92e31344a0dd717bcc2f97987448b60e813e40808293b15a47324e441719d12627b0c1048bb2658cdc1fa81ba629e07de87766affcf3581c179b4fd3ecfc2a9019fa53c0c174dd8a80de647af36fda4b555c7fc545f3857b09acc8e428c20c88313a716959f623f527b741159fd62be02e00b416a4ba381bdf73bfef041962ce65a0499e1d7a4c223db9814b87724603e21381e13ea0d3bcb0b4097a71ddcb592a3020d6ccba2cbc507aff2fef9aab8cbe4bc29127d37714c7fcf26f6194034ea3d4ec871c5e9cb8ea7d8b1d8a5c6c6261f2e563417855a3961a147bdfd9a18ee0d01a4cb7c4c725682071baf0185874847502c5097ffd493d27e9c0febe5f7abf17b29467bf9d51c58aae75c17d4072cab2f3dccdec6fab7f884010fc8227a2dc6b7b7eedc5898e9addaaa0cf39e15b3a6892031b5dc0562745792abf715dbb6f0062dd52cf15548c144717fc224644d9d61a79115ebae0bfd574926438fb5f2f78e299eca7737ac5996ebbd7645a273cd2957bf7e45cc6c66c89601b4e780eee3d5e01f4f50e5c52fc3fcfda04887a622b2bc76dd9d949991047144a01df63ab722ecba71318235eb2c6b5dd1c4c8057b4db42ab6</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> My Daily Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
            <tag> 寒假终极计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UIKit与swiftUI 交互</title>
      <link href="/2020/02/09/swiftui%E4%B8%8Euikit%E4%BA%A4%E4%BA%92/"/>
      <url>/2020/02/09/swiftui%E4%B8%8Euikit%E4%BA%A4%E4%BA%92/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h1>UIKit与swiftUI 交互</h1><p>运用swiftUI写界面非常迅速且酷炫。大大减少了曾经在UIKit中的代码量。<br>不过有时候可能你还会需要用到UIKit，但是你又想用swiftUI做界面，此时就考虑到二者交互的问题了。</p><h2 id="UIViewControllerRepresentable"><a class="header-anchor" href="#UIViewControllerRepresentable">¶</a>UIViewControllerRepresentable</h2><p><strong>在swiftUI中提供了一个UIViewControllerRepresentable协议</strong><br><strong>我们可以用它作为UIKit 与swiftUI的桥接</strong><br><a href="https://img-blog.csdnimg.cn/20200113121716232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200113121716232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><h1>第一步：</h1><h2 id="你依然可以像往常一样，新建一个swift文件，把他命名为viewController-然后导入UiKit-，然后再让它继承UIViewController-重写父类的viewDidLoad-方法，你也可以往里面随便添点东西，为后面验证做准备，just-like-this…在这里插入图片描述"><a class="header-anchor" href="#你依然可以像往常一样，新建一个swift文件，把他命名为viewController-然后导入UiKit-，然后再让它继承UIViewController-重写父类的viewDidLoad-方法，你也可以往里面随便添点东西，为后面验证做准备，just-like-this…在这里插入图片描述">¶</a>你依然可以像往常一样，新建一个swift文件，把他命名为viewController 然后导入UiKit ，然后再让它继承UIViewController 重写父类的viewDidLoad()方法，你也可以往里面随便添点东西，为后面验证做准备，just like this…<a href="https://img-blog.csdnimg.cn/20200113122152672.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200113122152672.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></h2><h1>第二步 桥接</h1><h2 id="第二步就是在你的swiftUI文件中写一个结构体连接你刚创建的viewController-他需要遵循并实现UIViewControllerRepresentable这个协议"><a class="header-anchor" href="#第二步就是在你的swiftUI文件中写一个结构体连接你刚创建的viewController-他需要遵循并实现UIViewControllerRepresentable这个协议">¶</a>第二步就是在你的swiftUI文件中写一个结构体连接你刚创建的viewController 他需要遵循并实现UIViewControllerRepresentable这个协议</h2><h1>第三步 应用</h1><h2 id="接下来直接在你swiftUI中结构体中调用第二步的结构体就OK了第二步与第三步"><a class="header-anchor" href="#接下来直接在你swiftUI中结构体中调用第二步的结构体就OK了第二步与第三步">¶</a>接下来直接在你swiftUI中结构体中调用第二步的结构体就OK了<a href="https://img-blog.csdnimg.cn/20200113125213490.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="第二步与第三步" class="fancybox"><img alt="第二步与第三步" title="第二步与第三步" data-src="https://img-blog.csdnimg.cn/20200113125213490.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></h2><h1>显示效果如图</h1><p><a href="https://img-blog.csdnimg.cn/20200113130421611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200113130421611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><h1>代码如下：</h1><p>viewController.swift 文件中：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">swift</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">viewController</span>: <span class="title">UIViewController</span></span>{</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        <span class="keyword">self</span>.view.backgroundColor = .brown</span><br><span class="line">        <span class="keyword">let</span> viewDemo = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">100</span>, y: <span class="number">100</span>, width: <span class="number">100</span>, height: <span class="number">100</span>))</span><br><span class="line">        viewDemo.backgroundColor = .green</span><br><span class="line">        <span class="keyword">self</span>.view.addSubview(viewDemo)</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>ConventView.swift 文件中</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">swift</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UIKit 桥接</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UIBridging</span>: <span class="title">UIViewControllerRepresentable</span> </span>{</span><br><span class="line">    <span class="comment">//这个UIViewControllerType你要接哪个就是哪个，在这里就是viewController</span></span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">UIViewControllerType</span> = viewController</span><br><span class="line">    <span class="comment">//必须实现的方法，当swiftUI要显示view时，会调用这个方法。返回值就是当前需要显示的类</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">makeUIViewController</span><span class="params">(context: UIViewControllerRepresentableContext<uibridging>)</uibridging></span></span> -> <span class="type">UIBridging</span>.<span class="type">UIViewControllerType</span> {</span><br><span class="line">        <span class="keyword">return</span> viewController()</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//更新UIViewController时会调用此方法</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">updateUIViewController</span><span class="params">(<span class="number">_</span> uiViewController: viewController, context: UIViewControllerRepresentableContext<uibridging>)</uibridging></span></span> {</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span></span>{</span><br><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> {</span><br><span class="line">        <span class="type">UIBridging</span>()</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView_Previews</span>: <span class="title">PreviewProvider</span> </span>{</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: some <span class="type">View</span> {</span><br><span class="line">        <span class="type">ContentView</span>()</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="注：你也可以写在一个文件中，但后期为了看着方便，简洁，还是分开写比较好一些"><a class="header-anchor" href="#注：你也可以写在一个文件中，但后期为了看着方便，简洁，还是分开写比较好一些">¶</a>注：你也可以写在一个文件中，但后期为了看着方便，简洁，还是分开写比较好一些</h2></body></html>]]></content>
      
      
      <categories>
          
          <category> IOS开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swift </tag>
            
            <tag> swiftUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeblocks中文乱码解决方法</title>
      <link href="/2020/02/07/Codeblocks%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2020/02/07/Codeblocks%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><p>Codeblocks中文乱码解决方法：</p><p>特别提示：出现中文乱码情况才执行以下操作，未出现请勿随意修改！！！！</p><p>打开Codeblocks -> 设置 -> 编辑器：</p><p><a href="https://img-blog.csdnimg.cn/20191205172416635.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191205172416635.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><p>然后点击 Encoding settings -> 选择编码 -> 选择UTF-8 -> 确定：</p><p><a href="https://img-blog.csdnimg.cn/20191205172454640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191205172454640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><p><a href="https://img-blog.csdnimg.cn/20191205172512827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191205172512827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><p>点击设置 -> 编译器：</p><p><a href="https://img-blog.csdnimg.cn/20191205172528406.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191205172528406.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><p>点击Other compiler options->在空白处输入</p><p>-finput-charset=UTF-8</p><p>-fexec-charset=GBK</p><p>点击确定 -> 随意修改下代码 ->重新生成。</p><p><a href="https://img-blog.csdnimg.cn/2019120517254235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/2019120517254235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><p>即可解决乱码问题。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Mac骚操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac与windows兼容性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac修改键盘之 将 caps lock修改为esc</title>
      <link href="/2020/02/05/Mac%E4%BF%AE%E6%94%B9%E9%94%AE%E7%9B%98%E4%B9%8B%E5%B0%86%E5%A4%A7%E5%B0%8F%E5%86%99%E9%94%81%E5%AE%9A%E4%BF%AE%E6%94%B9esc/"/>
      <url>/2020/02/05/Mac%E4%BF%AE%E6%94%B9%E9%94%AE%E7%9B%98%E4%B9%8B%E5%B0%86%E5%A4%A7%E5%B0%8F%E5%86%99%E9%94%81%E5%AE%9A%E4%BF%AE%E6%94%B9esc/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h1>前言</h1><h3 id="想必进来的都是vim重度患者了，在vim里需要经常使用esc键。而他的位置真的事提高效率一大绊脚石之一。"><a class="header-anchor" href="#想必进来的都是vim重度患者了，在vim里需要经常使用esc键。而他的位置真的事提高效率一大绊脚石之一。">¶</a>想必进来的都是vim重度患者了，在vim里需要经常使用esc键。而他的位置真的事提高效率一大绊脚石之一。</h3><h3 id="大多数的人都是将caps-lock-修改为esc。"><a class="header-anchor" href="#大多数的人都是将caps-lock-修改为esc。">¶</a>大多数的人都是将caps lock 修改为esc。</h3><p>因为caps lock 处在了最重要的位置却几乎不怎么使用他，如果用大写直接按住shift就可以了。</p><h1>方法</h1><p>之前在网上查到了关于此类的问题，说需要下载一个第三方软件，我推荐一个非常简单的方法，就在mac的设置里：</p><h4 id="找到系统偏好设置-键盘-左下角有一个修饰键"><a class="header-anchor" href="#找到系统偏好设置-键盘-左下角有一个修饰键">¶</a>找到系统偏好设置------>键盘------->左下角有一个修饰键</h4><p><a href="https://img-blog.csdnimg.cn/20200119094846166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200119094846166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a><br>把第一个改成Escape就好啦</p><h1>后记：</h1><p>实际上如图所示，mac已经提供了部分功能的修改，如果还想修改别的键，直接修改就好了</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Mac骚操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客基础命令</title>
      <link href="/2020/02/04/hello-world/"/>
      <url>/2020/02/04/hello-world/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a class="header-anchor" href="#Quick-Start">¶</a>Quick Start</h2><h3 id="Create-a-new-post"><a class="header-anchor" href="#Create-a-new-post">¶</a>Create a new post</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure></div><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a class="header-anchor" href="#Run-server">¶</a>Run server</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure></div><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a class="header-anchor" href="#Generate-static-files">¶</a>Generate static files</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure></div><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a class="header-anchor" href="#Deploy-to-remote-sites">¶</a>Deploy to remote sites</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> Hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim 基础操作 + 配置文件设置 基础版 for mac</title>
      <link href="/2020/02/03/vim%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C+%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AE/"/>
      <url>/2020/02/03/vim%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C+%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h1>基础操作</h1><h2 id="vim-模式"><a class="header-anchor" href="#vim-模式">¶</a>vim 模式</h2><h3 id="1-normal模式"><a class="header-anchor" href="#1-normal模式">¶</a>1.normal模式</h3><p>当我们用vim创建或者打开一个文件的时候，就是normal模式，然后我们可以输入一些指令，更加方便的操作文件。</p><h3 id="2-insert模式"><a class="header-anchor" href="#2-insert模式">¶</a>2.insert模式</h3><p>顾名思义就是可以进行编辑自己的文件内容了，从normal模式到insert模式有很多种快捷键，稍后一一说明。但是从insert模式到normal模式需要按esc键，没错，当我们常用到vim进行编辑的时候，会非常频繁的使用esc，但是他的位置却不是很让我们提高效率，在这里我们可以吧caps lock 修改为esc ，毕竟caps lock 真的没什么用，却处于一个非常方便的位置。</p><p>==具体修改可以看这篇博客，这里不再赘述==</p><p><a href="https://blog.csdn.net/VistorsYan/article/details/104036840" target="_blank" rel="noopener">Mac修改键盘之 将 caps lock修改为esc</a></p><h2 id="基本操作命令（增删改查-保存退出）"><a class="header-anchor" href="#基本操作命令（增删改查-保存退出）">¶</a>基本操作命令（增删改查+保存退出）</h2><table><thead><tr><th>操作符</th><th>作用</th></tr></thead><tbody><tr><td>i</td><td>在光标前写入</td></tr><tr><td>a</td><td>在光标后插入</td></tr><tr><td>o</td><td>在光标所在行下一行插入一新行</td></tr><tr><td>O</td><td>在光标所在行上一行插入一新行</td></tr><tr><td>shift+i</td><td>行前插入</td></tr><tr><td>shift + a</td><td>行尾插入</td></tr><tr><td>h j k l</td><td>光标移动：←↓↑→   上下左右键也可移动</td></tr></tbody></table><table><thead><tr><th>操作符</th><th>作用</th></tr></thead><tbody><tr><td>x</td><td>删除当前光标所在的字符</td></tr><tr><td>:wq然后回车</td><td>保存并退出</td></tr><tr><td>dd</td><td>剪切当前行</td></tr><tr><td>p/P</td><td>粘贴 前者是在光标之前，后者是在光标之后</td></tr><tr><td>yy</td><td>拷贝当前行</td></tr><tr><td>/+要输入的字符串</td><td>在文本中查找改字符串</td></tr></tbody></table><h1>配置文件设置</h1><h2 id="创建vim配置文件"><a class="header-anchor" href="#创建vim配置文件">¶</a>创建vim配置文件</h2><h3 id="在根目录下找到-vim文件夹并打开"><a class="header-anchor" href="#在根目录下找到-vim文件夹并打开">¶</a>在根目录下找到 .vim文件夹并打开</h3><p>注：如果没有就新建一个.vim文件夹并打开即可。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/</span><br><span class="line"><span class="built_in">cd</span> .vim</span><br></pre></td></tr></tbody></table></figure></div><h3 id="然后-在当前路径下："><a class="header-anchor" href="#然后-在当前路径下：">¶</a>然后 在当前路径下：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim vimrc</span><br></pre></td></tr></tbody></table></figure></div><p>这样就有打开了一个新的文件，这就是配置文件，你可以在这里进行“肆意的”修改</p><h2 id="键位修改"><a class="header-anchor" href="#键位修改">¶</a>键位修改</h2><p>有时vim的一些快捷键很不合你的口味，比如方向键，所以可以把方向键的位置改为符合方向的键。</p><h4 id="举例："><a class="header-anchor" href="#举例：">¶</a>举例：</h4><p>我想把h 键改为 i：（直接在vimrc里面写）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">noremap i h</span><br></pre></td></tr></tbody></table></figure></div><p>此时i键有着和h一样的功能，但是i键本来是有功能的（插入），因此==切记==不要忘了把i给改为别的键，如果你还想用这个功能的话。</p><h2 id="指令快捷化"><a class="header-anchor" href="#指令快捷化">¶</a>指令快捷化</h2><p>vim 保存命令是在normal模式下输入 :w 然后回车，虽然很方便了，但是可以更快：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">vim</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">map</span> S :<span class="keyword">w</span><span class="symbol"><cr></cr></span></span><br></pre></td></tr></tbody></table></figure></div><p>现在直接用S即可保存，（w后的不用我说也清楚是回车的意思）<br>以此类推：举几个常用的例子</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">vim</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">map</span> s <span class="symbol"><nop></nop></span></span><br></pre></td></tr></tbody></table></figure></div><p>nop(no operation) ==取消s的功能==</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">vim</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">map</span> Q :q<span class="symbol"><cr></cr></span></span><br></pre></td></tr></tbody></table></figure></div><p>退出</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">vim</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">map</span> R :<span class="keyword">source</span> $MYVIMRC<span class="symbol"><cr></cr></span></span><br></pre></td></tr></tbody></table></figure></div><p>刷新（应用的意思）<br>注：这些都需要保存退出以后才能生效，如果刷新，即刻生效</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">vim</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">synatx <span class="keyword">on</span></span><br></pre></td></tr></tbody></table></figure></div><p>代码高亮</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">vim</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">number</span></span><br><span class="line"><span class="keyword">set</span> cursorline</span><br><span class="line"><span class="keyword">set</span> wrap</span><br><span class="line"><span class="keyword">set</span> wildmenu</span><br></pre></td></tr></tbody></table></figure></div><p>打开行号<br>添加下划线<br>如果该行已满 自动换行<br>命令自动补全 tab 同bash</p><h4 id="有关查找的指令"><a class="header-anchor" href="#有关查找的指令">¶</a>有关查找的指令</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">vim</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> hlsearch</span><br><span class="line"><span class="keyword">set</span> incsearch</span><br><span class="line">exec <span class="string">"nohlsearch"</span></span><br><span class="line"><span class="keyword">set</span> ignorecase</span><br><span class="line"><span class="keyword">set</span> smartcase</span><br></pre></td></tr></tbody></table></figure></div><p>查找时高亮显示<br>边输入边高亮<br>当再次进入文件时不显示高亮，否则还会显示上次查找的高亮<br>忽视高亮<br>忽略大小写<br>智能大小写</p><p>==注：查找完后会依然显示高亮，去除高亮的命令是==</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">vim</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">nohlsearch</span><span class="symbol"><cr></cr></span></span><br></pre></td></tr></tbody></table></figure></div><p>可以根据自己的意愿，按上边的方式修改一下快捷键去除查找后的高亮</p><p>以上仅提供了一些基础常用的设置，还不是全部。。。。<br>有什么更好的指令欢迎下方留言，嘻嘻😬</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Mac骚操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C指针问题之不同类型指针之间的区别</title>
      <link href="/2020/02/02/C%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98%E4%B9%8B%E4%B8%8D%E5%90%8C%E7%B1%BB%E5%9E%8B%E6%8C%87%E9%92%88%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/02/02/C%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98%E4%B9%8B%E4%B8%8D%E5%90%8C%E7%B1%BB%E5%9E%8B%E6%8C%87%E9%92%88%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h1>会想这样的一个问题：</h1><h3 id="指针就是地址吧，那么指向int-的指针也好，指向double的指针也好，他们有什么不同么"><a class="header-anchor" href="#指针就是地址吧，那么指向int-的指针也好，指向double的指针也好，他们有什么不同么">¶</a>== 指针就是地址吧，那么指向int 的指针也好，指向double的指针也好，他们有什么不同么==</h3><p>emmmm<br>貌似也有一定道理。</p><h2 id="Solution"><a class="header-anchor" href="#Solution">¶</a>Solution</h2><p>既然我们无法从正面解释，那我们就先设定一个“万能指针”<br>看我接下来这段操作：</p><p><a href="https://img-blog.csdnimg.cn/20200119212651514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200119212651514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><p>在这里我创建了一个“可以指向任何类型的指针类型”——void*类型</p><p>但是当我运行的时候，出现了一个错误：</p><p><a href="https://img-blog.csdnimg.cn/20200119212816978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200119212816978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><p>仔细想一下，如果仅仅知道了地址，但是不知道保存的数据类型，也是无法取出值的。<br>也就是说，上边的错误和下边的错误是一样的</p><p><a href="https://img-blog.csdnimg.cn/20200119213119242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200119213119242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><p>也会报同样的错误。</p><p>如果我们把第一个做法中printf函数稍作更改</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,*(<span class="keyword">int</span>*)hoge_p);</span><br></pre></td></tr></tbody></table></figure></div><p>成功！</p><p>因此，与其写成这样，还不如刚开始就定义他的类型</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *hoge_p;</span><br></pre></td></tr></tbody></table></figure></div><p>这样编译器会记住 hoge_p是指向int的指针<br>这也就是为什么指针要定义他的类型。</p><p>关于这一点，还有一个地方需要用到他的类型：<br>==指针运算==</p><h2 id="指针运算"><a class="header-anchor" href="#指针运算">¶</a>指针运算</h2><p>书写如下代码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><stdio.h></stdio.h></span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>{</span><br><span class="line"><span class="keyword">int</span> hoge;</span><br><span class="line"><span class="keyword">int</span>* hoge_p;</span><br><span class="line">hoge_p = &hoge;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hoge_p 的初始地址为：%p\n"</span>,hoge_p);</span><br><span class="line">hoge_p++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hoge_p 加一后：%p\n"</span>,hoge_p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hoge_p 加一之后再加三后：%p\n"</span>,hoge_p + <span class="number">3</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>发现运行结果：</p><p><a href="https://img-blog.csdnimg.cn/20200119214650997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200119214650997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><p>我们知道c语言地址是以16进制的方式存储的。</p><p>发现：</p><h4 id="第一个地址与第二个地址的值相差4，第二个与第三个地址的值相差12"><a class="header-anchor" href="#第一个地址与第二个地址的值相差4，第二个与第三个地址的值相差12">¶</a>第一个地址与第二个地址的值相差4，第二个与第三个地址的值相差12.</h4><p>不难看出：：</p><h2 id="对指针加N，指针前进“当前指针指向的数据类型的长度×N”"><a class="header-anchor" href="#对指针加N，指针前进“当前指针指向的数据类型的长度×N”">¶</a>对指针加N，指针前进“当前指针指向的数据类型的长度×N”</h2></body></html>]]></content>
      
      
      <categories>
          
          <category> 征服C指针 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac上自定义各个应用快捷键</title>
      <link href="/2020/02/01/Mac%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%84%E4%B8%AA%E5%BA%94%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2020/02/01/Mac%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%84%E4%B8%AA%E5%BA%94%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h1>进入系统偏好设置</h1><h2 id="键盘选项"><a class="header-anchor" href="#键盘选项">¶</a>键盘选项</h2><h3 id="快捷键："><a class="header-anchor" href="#快捷键：">¶</a>快捷键：</h3><p><a href="https://img-blog.csdnimg.cn/20200121123450810.png" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200121123450810.png" class="lazyload"></a></p><h3 id="选择自己要添加的应用，在选择要改的功能名称，然后输入自己想要的快捷键。"><a class="header-anchor" href="#选择自己要添加的应用，在选择要改的功能名称，然后输入自己想要的快捷键。">¶</a>选择自己要添加的应用，在选择要改的功能名称，然后输入自己想要的快捷键。</h3><p><a href="https://img-blog.csdnimg.cn/20200121123525851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200121123525851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><p>点击添加，完成！</p></body></html>]]></content>
      
      
      <categories>
          
          <category> Mac骚操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于C指针——和指针的第一次亲密接触</title>
      <link href="/2020/01/30/%E5%85%B3%E4%BA%8EC%E6%8C%87%E9%92%88%E2%80%94%E2%80%94%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BA%B2%E5%AF%86%E6%8E%A5%E8%A7%A6/"/>
      <url>/2020/01/30/%E5%85%B3%E4%BA%8EC%E6%8C%87%E9%92%88%E2%80%94%E2%80%94%E5%92%8C%E6%8C%87%E9%92%88%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BA%B2%E5%AF%86%E6%8E%A5%E8%A7%A6/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h2 id="先看代码："><a class="header-anchor" href="#先看代码：">¶</a>先看代码：</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></stdio.h></span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> *c;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输出每个变量的地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a的地址是 %p\n"</span>,&a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"b的地址是 %p\n"</span>,&b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"c的地址是 %p\n"</span>,&c);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*将a的地址赋予c*/</span></span><br><span class="line">    c = &a;<span class="comment">//此处需用到  ”&“来得到a的地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"c修改后的地址为 %p\n"</span>,c);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 通过c输出a的内容*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*c ---->%d\n"</span>,*c);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 通过c修改a的内容*/</span></span><br><span class="line">    *c = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a---->%d\n"</span>,a);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="然后我们看运行结果"><a class="header-anchor" href="#然后我们看运行结果">¶</a>然后我们看运行结果</h2><p><a href="https://img-blog.csdnimg.cn/20200115085336718.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200115085336718.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><h2 id="我们首先声明了int型变量-a-b-然后声明了”指向int-的指针“类型的变量c"><a class="header-anchor" href="#我们首先声明了int型变量-a-b-然后声明了”指向int-的指针“类型的变量c">¶</a>我们首先声明了int型变量 a,b 然后声明了”指向int 的指针“类型的变量c</h2><p>==我们暂且先将c理解为指向int 的指针==</p><h2 id="再看初始化完后内存中保存的样子在这里插入图片描述"><a class="header-anchor" href="#再看初始化完后内存中保存的样子在这里插入图片描述">¶</a>再看初始化完后内存中保存的样子<a href="https://img-blog.csdnimg.cn/20200115090658778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200115090658778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></h2><p>在c语言中，会存在 int类型，double类型，等。。同样，c语言中也存在指针类型这样的类型。<br>指针类型并不是单独存在的，而是由其他类型派生出来的。。</p><p>==由引用类型T派生的指针类型有时候称为’（指向）T的指针‘==</p><p>因为指针类型是类型，所以他也像其他类型一样，有“指针类型的值和指针类型变量”，但有时，我们将“指针类型”，“指针类型变量”，“指针类型的值”简单统称为—指针</p><p>因此 c就是一个指针类型变量-----指向int的指针，但此时并为对它赋值。</p><p>接下来我们将a的地址赋予了c，此时c的值就是a的地址<a href="https://img-blog.csdnimg.cn/2020011509233464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/2020011509233464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><h2 id="接下来："><a class="header-anchor" href="#接下来：">¶</a>接下来：</h2><p>在指针前面加*，可以表示指针指向的变量，因为现在c指向a，所以<em>c就等同于a。同理，修改</em>c就相当于修改了a的值。</p><p>==这是对后两行输出做的解释==</p><h2 id="补充："><a class="header-anchor" href="#补充：">¶</a>补充：</h2><p>如果说c是 指向int的指针，但我们声明变量时一般要遵循：</p><h2 id="类型-变量名"><a class="header-anchor" href="#类型-变量名">¶</a>类型 变量名</h2><p>因此，我们似乎声明了一个名为*c的变量。</p><p>所以我们可以写成 ==int* c==的形式。这样更符合  ==类型 变量名==  的形式。</p><p>但之后就会出现问题：<br>数组也是C语言的一种类型。。如果按上述所说的话。<br>C语言声明数组时应该是：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] <span class="built_in">array</span>;</span><br></pre></td></tr></tbody></table></figure></div><p>很明显，会报错。这就产生了矛盾。。</p><p>反而，Java中可以这么写，但是Java为了让C程序员更好的转向Java。也兼容了c语言定义数组的写法。。</p><p>在这里需要插一句：</p><h2 id="C语言的语法本来就是不自然的，奇怪的而又变态的。"><a class="header-anchor" href="#C语言的语法本来就是不自然的，奇怪的而又变态的。">¶</a>C语言的语法本来就是不自然的，奇怪的而又变态的。</h2><p>之后我会出一篇关于C语法的博客专门研究这“变态的”c语法。。。</p><p>欢迎吐槽评论</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 征服C指针 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6-1 邻接矩阵存储图的深度优先遍历 (20 分)</title>
      <link href="/2020/01/30/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/"/>
      <url>/2020/01/30/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><blockquote><p>试实现邻接矩阵存储图的深度优先遍历。</p></blockquote><p>函数接口定义：<br>void DFS( MGraph Graph, Vertex V, void (*Visit)(Vertex) );<br>其中MGraph是邻接矩阵存储的图，定义如下：</p><p>typedef struct GNode <em>PtrToGNode;<br>struct GNode{<br>int Nv;  /</em> 顶点数 <em>/<br>int Ne;  /</em> 边数   <em>/<br>WeightType G[MaxVertexNum][MaxVertexNum]; /</em> 邻接矩阵 <em>/<br>};<br>typedef PtrToGNode MGraph; /</em> 以邻接矩阵存储的图类型 */<br>函数DFS应从第V个顶点出发递归地深度优先遍历图Graph，遍历时用裁判定义的函数Visit访问每个顶点。当访问邻接点时，要求按序号递增的顺序。题目保证V是图中的合法顶点。</p><p>裁判测试程序样例：<br>#include <stdio.h></stdio.h></p><p>typedef enum {false, true} bool;<br>#define MaxVertexNum 10  /* 最大顶点数设为10 <em>/<br>#define INFINITY 65535   /</em> ∞设为双字节无符号整数的最大值65535*/<br>typedef int Vertex;      /* 用顶点下标表示顶点,为整型 <em>/<br>typedef int WeightType;  /</em> 边的权值设为整型 */</p><p>typedef struct GNode <em>PtrToGNode;<br>struct GNode{<br>int Nv;  /</em> 顶点数 <em>/<br>int Ne;  /</em> 边数   <em>/<br>WeightType G[MaxVertexNum][MaxVertexNum]; /</em> 邻接矩阵 <em>/<br>};<br>typedef PtrToGNode MGraph; /</em> 以邻接矩阵存储的图类型 <em>/<br>bool Visited[MaxVertexNum]; /</em> 顶点的访问标记 */</p><p>MGraph CreateGraph(); /* 创建图并且将Visited初始化为false；裁判实现，细节不表 */</p><p>void Visit( Vertex V )<br>{<br>printf(" %d", V);<br>}</p><p>void DFS( MGraph Graph, Vertex V, void (*Visit)(Vertex) );</p><p>int main()<br>{<br>MGraph G;<br>Vertex V;</p><pre><code>G = CreateGraph();scanf("%d", &V);printf("DFS from %d:", V);DFS(G, V, Visit);return 0;</code></pre><p>}</p><p>/* 你的代码将被嵌在这里 */<br>输入样例：给定图如下</p><p>5<br>输出样例：<br>DFS from 5: 5 1 3 0 2 4 6<br>作者: DS课程组<br>单位: 浙江大学<br>时间限制: 400 ms<br>内存限制: 64 MB</p><h2 id="很明显这个用递归就可以了"><a class="header-anchor" href="#很明显这个用递归就可以了">¶</a>很明显这个用递归就可以了</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">( MGraph Graph, Vertex V, <span class="keyword">void</span> (*Visit)(Vertex) )</span></span>{</span><br><span class="line">    Visited[V] = <span class="literal">true</span>;</span><br><span class="line">    Visit(V);</span><br><span class="line">    <span class="comment">//递归</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i<maxvertexnum; i++) {< span><br><span class="line">        <span class="keyword">if</span> (Graph->G[V][i] == <span class="number">1</span> && !Visited[i]) {</span><br><span class="line">            DFS(Graph,i,Visit);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br></maxvertexnum;></span></pre></td></tr></tbody></table></figure></div><p>根据提要求访问过的节点需要true<br>所以在此访问还应判断该节点是不是false</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swift之基本运算符</title>
      <link href="/2020/01/30/swift%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2020/01/30/swift%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h2 id="本章大致介绍一些swift特别的运算符"><a class="header-anchor" href="#本章大致介绍一些swift特别的运算符">¶</a><em><strong>本章大致介绍一些swift特别的运算符</strong></em></h2><h1>元组比较</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">swift</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">元组比较：</span></span><br><span class="line"><span class="comment">1.从左到右比较，一旦比出结果，即大于或小于，就是整体的比较结果</span></span><br><span class="line"><span class="comment">2.如果每个对应的元祖相等，则整体的结果就是相等</span></span><br><span class="line"><span class="comment">3.要比较7个或者更多的元素的元祖，必须实现比较运算符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span>,<span class="string">"zebra"</span>)<(<span class="number">2</span>,<span class="string">"apple"</span>){</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"the second win"</span>)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(<span class="number">3</span>,<span class="string">"apple"</span>)<(<span class="number">3</span>,<span class="string">"bird"</span>){</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"the second win"</span>)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(<span class="number">4</span>,<span class="string">"dog"</span>) == (<span class="number">4</span>,<span class="string">"dog"</span>){</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"sample"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h1>三元条件运算符</h1><p>与C语言中差不太多，直接上例子：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">swift</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//三元条件运算符</span></span><br><span class="line"><span class="keyword">let</span> contentHeight = <span class="number">40</span></span><br><span class="line"><span class="keyword">let</span> hasHeader = <span class="literal">true</span></span><br><span class="line"><span class="keyword">let</span> rowHeight = contentHeight + (hasHeader ? <span class="number">50</span> : <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(rowHeight)</span><br></pre></td></tr></tbody></table></figure></div><h1>关于 ? 与 !  //重点</h1><p>swift语言中，如果不对变量进行初始化是不会自动给他一个初值的<a href="https://img-blog.csdnimg.cn/20200112143559495.png" data-fancybox="group" data-caption="此处报错" class="fancybox"><img alt="此处报错" title="此处报错" data-src="https://img-blog.csdnimg.cn/20200112143559495.png" class="lazyload"></a><br>此处报错的原因就是未初始化number就对他进行了使用</p><p>swift中有一种可选类型。（Optionals）</p><h4 id="？"><a class="header-anchor" href="#？">¶</a>？</h4><p>在定义变量时添加一个问号。以为此变量为可选类型，如果后面，给该变量赋值x。那么他就是x，如果没有赋值，他就是nil。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">swift</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> optionalInt : <span class="type">Int?</span></span><br><span class="line"><span class="built_in">print</span>(optionalInt)</span><br><span class="line"><span class="comment">// 此时结果是nil</span></span><br></pre></td></tr></tbody></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">swift</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> optionalInt : <span class="type">Int?</span></span><br><span class="line">optionalInt = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(optionalInt)</span><br><span class="line"><span class="comment">//此时输出是Optional(1)</span></span><br></pre></td></tr></tbody></table></figure></div><p>但是现在会出现警告，就是虽然现在有值，（不管是不是nil都认为有值）。但是她现在是可选类型，应给他确定类型。</p><h4 id><a class="header-anchor" href="#">¶</a>!</h4><p>此时 ！就是用来强制解析：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">swift</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> optionalInt : <span class="type">Int?</span></span><br><span class="line">optionalInt = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(optionalInt!)</span><br><span class="line"><span class="comment">//此时输出是1</span></span><br></pre></td></tr></tbody></table></figure></div><p>此时optionalInt 是Int 类型。<br>所以有时候我们可以直接这么写：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">swift</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> optionalInt : <span class="type">Int!</span></span><br><span class="line">optionalInt = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(optionalInt)</span><br><span class="line"><span class="comment">//此时输出是1</span></span><br></pre></td></tr></tbody></table></figure></div><p>==注：使用!来获取一个不存在的可选值会导致运行时错误。使用!来强制解析值之前，一定要确定可选包含一个非nil的值。==<br>也就是说如果没有第二句赋值，此程序会崩掉。<br>所以使用！时要注意这点</p></body></html>]]></content>
      
      
      <categories>
          
          <category> IOS开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寒假计划与每日进度（总章程）</title>
      <link href="/2020/01/21/%E5%AF%92%E5%81%87%E8%AE%A1%E5%88%92%E4%B8%8E%E6%AF%8F%E6%97%A5%E5%AE%8C%E6%88%90%E6%83%85%E5%86%B5/"/>
      <url>/2020/01/21/%E5%AF%92%E5%81%87%E8%AE%A1%E5%88%92%E4%B8%8E%E6%AF%8F%E6%97%A5%E5%AE%8C%E6%88%90%E6%83%85%E5%86%B5/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">您好，请输入密码</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="0f601635d4c0e5c3309bd4d091d2957abaaf9e331c2b5123584fb5e2bb00d519">ba7233cb4492a779478ef44e61ef447c28141d18b1231ef6bbffa250b7c0f66f24db462cc1261ba70150ff3ac99f766c1f94890d60773646e2115b802c8b3a09db38fb51734a671df187131ec5d06cdb4e9cec757c91a89496f2dcca128ea3002b4daf37332a0a787c27bf74f71ff4ac29afa9804c123bd9854ddcb2ef037ba7934bcb6c5304027e68bb26674f5885b6e2a5b1e6aa76feffc847dbf54cd67550ad0fea75204ba84daf46ed589f24e794739b848736141324c5e96679ac8754ea67ce0aefc9f856b605b9fef5c6339da2779d72002db303a22ed327b682b9841b128dd482cd48333a37d8546a1cbfbc1c6808745196a829718459107716358b5a9da558b86067d208e4eb5905f277f94622ff2fd5a7fb19dd60b76e0ea1ea93452b4ffee1fab52d6fd0faed4b6304732256e3467dc21af6cd4c8cbab17ddab3aef7636612ea845399d4900c76e8b7446be175019dc98c65796f2a99185a61607244bd939dc91ee1a9ffe053a2bdb2a65d333e3934ba8813013efec3c372bd5a19f53ef564582a49fefda593f08f477115a7898e4d7f7da4e8cc724cc5ba40960792f7def8e8be83c332f6fa2ca4583d5c0db0ae5803e114c40de54a8c733b4c53c75f5ab6e55cc3011739d067c4febf7cba413efeb34ac07b73b06d9a1858766a5ebfd1da6f59e2385f68d8d1abfe39a7a09335246eb5f0cec872fb5fd6e5116cacbb4d42d5a7ea30b9bef6c56bdcbb48ca55dae54faac6ffdd2a5085693774bd099c432e6a3eea1ace037c6933cd0e29ea68c5c4200d0a795d21d728ce6a9820937e29ea1e1d63e3df26baff57a1bb4cc5de3198c75def46c06dc26f7f7af9b9e521d986d7789416ae553d24db59eeb29a843579a501b023630d3b6caee0d87f21ddab8fa0af6134e09b7944a8837423c317cc7a09a477653a3f8f6c338d64eda5106c1ae6db1b9554f3b57e84f757a15e31b278979dd215e90879da0180769543ffcbe5a9dfe6562f36dbf01be8a6fb710514305e00215500803a053400df18a048dd8d9e873517e69128132cf0b9de53c80bbe892be3a5f0f2e0d35df44a730d0af5a8da7e5d1e348a93e5ce722cdbdd63889ec6ae67227da17915106438cb0b505cb2785d4e6a57401d2d66f41c2d1c8cef170b482127bdcf87df1b89efbaec7ab030edfec601b11996c4df324c51358d8ad23d1a724976994e801740b907c2e91d99fc8a5fbc9059e9b50ec83a7f40da1f71d1b686f599a4ce9bf9eb4583138b61ab5bdd37f6c23b114cd47f5282ecebc57e7ba1ff241103e97a2ad397b97dc2600a4966b9b590f26435435224d3e5fdae5b9c8cd13b95e01ff5fca9dccc290d03b93457d42f324c50ab2792679d4c4e35a6ece9c52befa16fd04814031995d476b0919cd9c18a68a721f9b827e8031c9f41d8a063cad6a14169f08f81219c72a8af50bdf34ad6bbbbd75a243db76a461d18da62dcc289939b2e9518726725969aa81811329e4a947cdf9c4185af6c8f21f55e1b254c4534246048338cd5cc0f65f28c9168ad78b282992950dfa36934da68b384f7b804ec3d8bfa6eab2b75214ac4a7bc85e8079ed4ddedc31ac33fdafc8ef6d67111db0f44811d7c17f6226e90e3d04da56046459dcaed73e0d67266a095ed959090b3cae41ddc09920eab7d75d427643343fbb2c52bb4d5cebe3d8e34b7d16686971fdb832dbfb9bb5f9ec75142388651c93e08f26f70ade65c8fcd00db8173ad71bc46f0e300e803fab251977c56b183f8fff63ab6238d83449db56f6fcf663c4ba5c67a82dc7739e917e8c981eb3765ab1f86487ceb89af55a0a5c6a6dd6cec7425f671ed6db922841116522dc6c7a57fd7d6b9e2c81afefac1c55b3c07dc85f8f01f05b2240354dc95bad55d994b49fcda4f225118ac15fceb3b0ed9419848dbb8ec0961ae07094eefa6352e284a966f2c0685933940a6ef0c5225959ac6442ad7e8f67f856dc3a08e1f7603447e6bdee7b996c5f1c61db5035468879301d6624735cda838bde7422d3d0c08eab243ef27bb5b1df6999dde60c5d7dbf82d9622e4adbbe8e43cd62f134fbbe909f6c84b9b252931c169cf974eadac79dc1c0680f5678dd7fc872eb6b228793ff31c12f30246f48f3efaec87fe1d316a5c01831e6ed3644415a2eff9d078f36c0e979630f92766a5eb01076da6cff63db74c0e2b1f7e7e6fc0bb620ad6b9260f703a57be208b65b7008b97f315becf95ad54e3ddb44279b71ac86ac42e6578b0f119d8bd0b8ff52683a7bbff7c03fca3755267ccf2cae23b9573ae7712b3f4561ec48492de55ec9bc01170e9598ce8d98ede5a7886d3dfa9a099218d25bc57efa9b07e685db7afd6d43a716d1deb4d97343e777964d18693f358c71b023946b915941c78cbbdb5a2c4cee8e66247baeb3331b35c4e4341c245d6e3bb97e7bb668e090202b75efc7a8eb28f31294fd6a9ebcefbd2b3c17c8e8005d60423ca628c93371bc20f03eaa203e3a617474ecb5b75e9d8cab14d12de8e768fa2710a4b465ba24ac0d63b824b13b2fc3cd28d9f484f48b0aab8ebfb31c4a761c42fa8ea672f41c3e22e2516fb8f175cd4f6f80ce851014c8f87f030167dd96c11153a1ac156c927c35ec271a0547495cb9181a234d07fa766c86293ab11d801d55a8fa90398cbcf9349cafe75c4a4bfddaa0219de209664487801669a4085df544dcea23bc6997a218e1c061d2a7800bac92d8ef587147d8b4293aada43a5ca378548c1ac08e4c746f4fa68b2c1407f5dc8365216a6067e1e895d5b9692352df0daf1633c4d170696b1770de1604bcbba9c39cb675ce385986802078d1e500ce7b9eb99ac3ccdaeaf5e721526b13d37b809bf78936b7093f6e8cba93a676f29b06623d7c7d2a3d9673f2212cbc298059a8026c8a51419f3a03df545b3f76f763f0e49f5334ac641110bdb506c90a5d9c5bff9b2c845db26054687ea7da30186041214af629099baa1f90711b44e113da8af62bde91d59e162f5085cc9ed73f9a71cbfd8c48836ea1fff3980ebcd68b6deac8c87775d570cb0561a40fe57f5809ddfbee7e5423c842abfeb08cb48998dfd559ab2203d9114f506b24ffec832003209bb59935a2c374f5af47a79262ecb59d7ed600ea354562873f0acdb47b427cc3a17b336459ec621788dfc56193c0daa8bd9bd6cc5b9360143122406ad8bdceeea1e97f7f4f74354aa26116c919245a2e57504b45001a1d3533f1c7bbe545d5a25989c5867a8086c031453e14677b3c801378c61a82134da5f0e6ea3a9c68f807b9e7b0937c0ed0ec0cf777efd9729c18d473319e931e55b5d05865dd65210d2bcc36635f45874301bb9327e41125c8c70981404adf166acc9b277037ea6f5092dfb469beeed40b6b1eebf5755675aabd4aa0361c5b79b220f16e5231f02d157d5d5591bc99406388f9764be682a5fd0e9e80ddcb2594067ef161a7e6c2055d87ad77e26d2ac8c6df66cdcd9f38165833c76ab2a427ef77520ad1d95afa93a2fa7d561c986dc96e9cd9929e714c61ca0566667bb4b23583ba32f0ab600ddc85cbbab3ec91ce91058090685b476500c1c56a7f49bb581f483ae26253f9296cce1ca5c34e66c97d5785f52650dd7bd3f97e2e788a43dbbb95b62353d9113c6d9b6830d85e20757515f6a5bba99a2a950eb84440dfd7fcb8844a5e64c65f102b46b70b9168c65e2ccc857c79091a51189cf25ec5e0ff9507fea803c5579b2ee42b3a240d7c08f5452135b5f45d8b3182e9665782ba083bfe4340addf89280bdceb06903e76faf821e0b04e01aa106cc2b05060cb538c3fb3b2510e8a26d5107a98a185821a24c6fe857de587e0403b40feeaa701aeee544c38c812a915534b996efa237b80d395e73990917930bc39b1d5315f93b64aeb6e01e4a4071eb42ccb6dedfab74074f4f4e15aa2384075ba0ea24892555a0242d950e50997f967c3bc719cc6823165a5fefbc73b8a83358053375c1af1a83dd42091ebe6b26eb18d2514e8ee426a2a3eca1ba6b3e3b4f0d51ee5307b62fe8938973ed95ae6b45a161760335baa4c63045d4647a50ca3cdd1241493dadf151db5edc3c35e962cfff3484e47916a5f5c9b42127606dea3ba166a85ce1ac8b16f00051d0c0494edc3841610314dea100fc951a84f6e2096047374d168ed96855e176bd9979f5269fe44b4eda39c68fdb2875511fe58327816045a6ad13199e704be2ed95d6f5b5c552a17beaa65d58bee1b1a2ec1efe5cd4e83f73bdfef3e718f88d66c59247c18b76e823e3106cadc178c0b5cc23a9c47270d25b7eb8428d66b9ced96545d61120fd8b0fae9fa25480ebb8c0cdd9cf152536fd8252db3673a9bf274a526f26cb2fd73b312e20ce9b52ebc2587508b2dfd2fff64e13959013c05ae8f4d1ca9f9aad98dc26da02c958a17c024c8ae243549258bf40f28e951e252904501337e003f02450a5cc1008369c617677f31ec2238285057b6696025135dd6d7100f3b5c144293cfc6b31b241d1bba6b9fc258db2c98f7153277e5c1f4fffee7a5d64f072c2240907d71ed9cf57831c939b26f5885e192e80738bb0df7bf52a2762171554f95678b0b9e02019ec49bb7bdc863a7a6ea8c8252c30de55ae968dfa9f182254d9e485540b819d89136b6638a520a6c6276c1dfc47aab238e052e90168f98503f582ec981851b4e22350781bea1a736a9f5d1ab8720efd3d4bcfbac27750dea637480b9a10deeb83ff69c8012a2dc518e85dc3cbea8297a7ea54c2976270be12ec182ddd87f3a4758527a9cb804773ac942f3569dac1037bc46d5096bf64a70c0e25b4a6635f9008944ebf5a97b2d92a3398f259a565565f52811b4ddd4f5a3601d5b06d1f3344f1d6230b36ded4386259f61123a33c4681bbdb3cf3d67273388c9dea6b1be98e5cc59477a8a9974d7d122d0d2dbea17a4336a99477a69670427c775c1656e29ece7ba8798c618be0b54bb79d044d80a6fbf639e88cb31a28972d4442c9a5ac57897613a1346f95a039db174ab01c0276682d98e104113beb414b03f1ee23785aea8cbacef75e5462e5c2bf6b0c47927216a2e378bf1b259a11cf728c7fad0b61f107c2d00e05c97d456f90c9a354a707e527665bc1216603166ef4d1665c07984443783071bfe1575404a4986f7b4a7f4882252da37215a9d843d82afa1e408540bd1595ccd8a6b0e515f746d2ff1a3fad762ed9e54b4d6327333309371a</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> My Daily Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
            <tag> 寒假终极计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汉诺塔非递归实现 C语言版</title>
      <link href="/2020/01/21/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%9D%9E%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0c%E8%AF%AD%E8%A8%80%E7%89%88/"/>
      <url>/2020/01/21/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%9D%9E%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0c%E8%AF%AD%E8%A8%80%E7%89%88/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h1><em><strong>汉诺塔非递归实现 C语言版</strong></em></h1><p>我上一篇博客是汉诺塔C语言递归实现，非递归和递归想法一样。这里不再赘述，直接链接转到：</p><p><a href="https://blog.csdn.net/VistorsYan/article/details/102765478" target="_blank" rel="noopener">汉诺塔递归实现 C语言版</a></p><p>递归实现固然好理解，但是n的值越大，空间和时间上都是极大的消耗，最终可能导致程序直接崩溃。<br>在以后的做题或者是面试中，不推荐用递归方法做，所以要写出对应的非递归方法。</p><p>某次上课无意间听到老师说了这样一句话：任何递归法都可以用循环的方法进行非递归实现，然后回头找了找汉诺塔非递归的资料，整理整理，搞出了一个c实现的非递归方法</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include<stdio.h></stdio.h></span></span><br><span class="line"><span class="comment">#include <stdlib.h></stdlib.h></span></span><br><span class="line"><span class="comment">#define MaxSize 100</span></span><br><span class="line">typedef struct{</span><br><span class="line">     int N;</span><br><span class="line">     char A;        //起始柱</span><br><span class="line">     char B;        //借助柱</span><br><span class="line">     char C;        //目标柱</span><br><span class="line">}ElementType;</span><br><span class="line">typedef struct {</span><br><span class="line">    ElementType Data[MaxSize];</span><br><span class="line">    int top;</span><br><span class="line">}Stack;//汉诺塔问题的结构类型</span><br><span class="line">void Push(Stack *PtrS, ElementType item){</span><br><span class="line">     //入栈操作</span><br><span class="line">     <span class="keyword">if</span> (PtrS->top == MaxSize)</span><br><span class="line">     {</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"The stack is full!\n"</span>);</span><br><span class="line">         <span class="built_in">return</span>;</span><br><span class="line">     }</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">     {</span><br><span class="line">         PtrS->Data[++(PtrS->top)] = item;</span><br><span class="line">         <span class="built_in">return</span>;</span><br><span class="line">     }</span><br><span class="line">}</span><br><span class="line">ElementType Pop(Stack *PtrS){</span><br><span class="line">    <span class="keyword">if</span> (PtrS->top == -1)</span><br><span class="line">      {</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"The stack is empty!\n"</span>);</span><br><span class="line">          <span class="built_in">exit</span>(1);   //直接终止程序，一般不会出现这个错误</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      {</span><br><span class="line">          PtrS->top--;</span><br><span class="line">         <span class="built_in">return</span> (PtrS->Data[PtrS->top + 1]);        //或者是<span class="built_in">return</span> PtrS->Data[PtrS->top--];</span><br><span class="line">      }</span><br><span class="line">}</span><br><span class="line">//借助栈的非递归实现</span><br><span class="line"> void Hanoi(int n){</span><br><span class="line">    ElementType P, toPush;</span><br><span class="line">    Stack S;</span><br><span class="line"></span><br><span class="line">    P.N = n; P.A = <span class="string">'a'</span>; P.B = <span class="string">'b'</span>; P.C = <span class="string">'c'</span>;</span><br><span class="line">    S.top = -1;</span><br><span class="line"></span><br><span class="line">     Push(&S, P);</span><br><span class="line">     <span class="keyword">while</span> (S.top != -1)        //当堆栈不为空时</span><br><span class="line">     {</span><br><span class="line">         P = Pop(&S);//出栈</span><br><span class="line">         <span class="keyword">if</span> (P.N == 1)//当只剩一个盘子时，直接由当前柱移动到目的柱</span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">"%c -> %c\n"</span>, P.A, P.C);</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">         {</span><br><span class="line">             toPush.N = P.N - 1;</span><br><span class="line">             toPush.A = P.B; toPush.B = P.A; toPush.C = P.C;</span><br><span class="line">             Push(&S, toPush);        //将第三步(n - 1, b, a, c)入栈</span><br><span class="line">             toPush.N = 1;</span><br><span class="line">             toPush.A = P.A; toPush.B = P.B; toPush.C = P.C;</span><br><span class="line">             Push(&S, toPush);        //将第二步1, a, b, c)入栈</span><br><span class="line">             toPush.N = P.N - 1;</span><br><span class="line">             toPush.A = P.A; toPush.B = P.C; toPush.C = P.B;</span><br><span class="line">             Push(&S, toPush);        //将第一步(n - 1, a, c, b)入栈</span><br><span class="line">         }</span><br><span class="line">     }</span><br><span class="line"> }</span><br><span class="line">int <span class="function"><span class="title">main</span></span>(){</span><br><span class="line">    int n;</span><br><span class="line">    scanf(<span class="string">"%d"</span>, &n);</span><br><span class="line">    <span class="keyword">if</span> (n <= 0)<span class="built_in">return</span> 0;</span><br><span class="line">    <span class="keyword">else</span> Hanoi(n);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>还是三个步骤：<br>1.将n-1个盘子由a柱借助c柱移动到b柱<br>2.将最下面的盘子由a柱直接移动到c柱<br>3.将那n-1个盘子在由b柱借助a柱移动到c柱</p><p>因为这个是出栈时的操作，所以入栈时要到着写</p><h2 id="简要解释一下（因为跟递归思路差不多）"><a class="header-anchor" href="#简要解释一下（因为跟递归思路差不多）">¶</a>简要解释一下（因为跟递归思路差不多）</h2><p>如果n不等于一时，就意味着，以上的n-1个盘子，都要做上述所说的三个步骤，知道n等于1时，直接移动到目的柱。<br>因此，移动次数最多的是最上边的那个盘子，移动次数最少的是最下面的那个盘子，只需要移动一次</p><p>利用结构体数组更便于理解。</p><p>本文为原创，如有问题欢迎评论区留言。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My Daily Life Jan 20th</title>
      <link href="/2020/01/20/DailyLife--Jan--20th/"/>
      <url>/2020/01/20/DailyLife--Jan--20th/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2><p>没错今天非常的浑浑噩噩，上午基本没干什么，除了下载了一下vim编辑markdown文件的插件后，然后还非常的作。。。诶，具体的就不说了。好不容易坚持了一段时间，突然又放弃了。<br>下午貌似捣鼓网页捣鼓了半天，貌似却没啥成果。然后睡了一觉。有些疲惫。晚上也捣鼓了一些东西。貌似收获也不大。。</p><p>明天再写一篇文章记录一下假期任务和完成情况吧。</p><p>每天锻炼的项目只能多不能少。十点半前必须睡觉。</p><p>今天除了安装了一些必要插件外，令需要记得就是有关vim的快捷方式：</p><table><thead><tr><th>markdown命令</th><th>功能</th></tr></thead><tbody><tr><td>zr</td><td>降低整个缓冲区的折叠级别</td></tr><tr><td>zR</td><td>打开所有折叠</td></tr><tr><td>zm</td><td>增加整个缓冲区的折叠级别</td></tr><tr><td>zM</td><td>折叠所有内容</td></tr><tr><td>za</td><td>打开光标所在的折叠</td></tr><tr><td>zA</td><td>递归打开一个折痕</td></tr><tr><td>zc</td><td>关闭光标所在的折痕</td></tr><tr><td>zC</td><td>递归关闭光标所在的位置</td></tr></tbody></table><h3 id="Adobe账号"><a class="header-anchor" href="#Adobe账号">¶</a>Adobe账号</h3><p>还有一个 Adobe账号：3jkxtqhtq4@privaterelay.appleid.com</p><p>这搁谁谁能记得住阿</p><p>现在是22:30 准备去睡觉，多的就先不说了，每天早起规划第二天的任务，晚上打卡，完成情况。</p><h2 id="就先这样吧-晚安"><a class="header-anchor" href="#就先这样吧-晚安">¶</a>就先这样吧 晚安</h2></body></html>]]></content>
      
      
      <categories>
          
          <category> My Daily Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-5 修理牧场 (35分) 哈夫曼树例题 c与c++鸳鸯解法 详细解释</title>
      <link href="/2020/01/20/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91--%E4%BF%AE%E7%90%86%E7%89%A7%E5%9C%BA/"/>
      <url>/2020/01/20/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91--%E4%BF%AE%E7%90%86%E7%89%A7%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><p>农夫要修理牧场的一段栅栏，他测量了栅栏，发现需要N块木头，每块木头长度为整数Li个长度单位，于是他购买了一条很长的、能锯成N块的木头，即该木头的长度是Li​​的总和。</p><p>但是农夫自己没有锯子，请人锯木的酬金跟这段木头的长度成正比。为简单起见，不妨就设酬金等于所锯木头的长度。例如，要将长度为20的木头锯成长度为8、7和5的三段，第一次锯木头花费20，将木头锯成12和8；第二次锯木头花费12，将长度为12的木头锯成7和5，总花费为32。如果第一次将木头锯成15和5，则第二次锯木头花费15，总花费为35（大于32）。</p><p>请编写程序帮助农夫计算将木头锯成N块的最少花费。</p><h2 id="输入格式"><a class="header-anchor" href="#输入格式">¶</a>输入格式:</h2><p>输入首先给出正整数N（≤10000​​ ），表示要将木头锯成N块。第二行给出N个正整数（≤50），表示每段木块的长度。</p><h2 id="输出格式"><a class="header-anchor" href="#输出格式">¶</a>输出格式:</h2><p>输出一个整数，即将木头锯成N块的最少花费。</p><h2 id="输入样例"><a class="header-anchor" href="#输入样例">¶</a>输入样例:</h2><p>8<br>4 5 1 2 1 3 1 1</p><h2 id="输出样例"><a class="header-anchor" href="#输出样例">¶</a>输出样例:</h2><p>49</p><h1>思路</h1><h2 id="构造最优二叉树，将除叶节点外所有的节点权值加和。即为所求。"><a class="header-anchor" href="#构造最优二叉树，将除叶节点外所有的节点权值加和。即为所求。">¶</a>构造最优二叉树，将除叶节点外所有的节点权值加和。即为所求。</h2><p>实际上是没必要构造一颗树的，运用他的原理即可</p><p>其实这两个解法差不多，但是c<ins>更加的简单易于理解，在时间上也是很短的。c相对而言就比较暴力了。相当于对c</ins>解法的底层解释。注重基础。<br><code> </code></p><h2 id="c-解法"><a class="header-anchor" href="#c-解法">¶</a>c++解法</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></stdio.h></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><queue></queue></span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">priority_queue<<span class="keyword">int</span>,<span class="built_in">vector</span><<span class="keyword">int</span>>,greater<<span class="keyword">int</span>> > Q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">int</span> x,n,sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i<n;i++){< span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&x);</span><br><span class="line">        Q.push(x);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span>(Q.size()><span class="number">1</span>){</span><br><span class="line">        <span class="keyword">int</span> a=Q.top();</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="keyword">int</span> b=Q.top();</span><br><span class="line">        Q.pop();</span><br><span class="line">        Q.push(a+b);</span><br><span class="line">        sum+=a+b;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></n;i++){<></span></pre></td></tr></tbody></table></figure></div><p>在这里解释一下这句话</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">priority_queue<<span class="keyword">int</span>,<span class="built_in">vector</span><<span class="keyword">int</span>>,greater<<span class="keyword">int</span>> > Q;</span><br></pre></td></tr></tbody></table></figure></div><p>priority_queue<type, container, functional>，其中Type 为数据类型，Container为保存数据的容器，Functional 为元素比较方式。<br>Container必须是用数组实现的容器，比如vector,deque等等，但不能用 list。STL里面默认用的是vector。<br>greater 可以实现由底部到顶部大到小实现。<br>所以这道题的步骤就是，<br>push出两个最小值并相加，将相加的值加到sum并放回Q中，然后会重新排列大小。<br>以此类推</type,></p><p><a href="https://img-blog.csdnimg.cn/20191207174941948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191207174941948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a><br>不仅代码量很少，时间也是很短的，考试的时候可以使用，平时练习不建议，有点投机取巧。练习还是用c一步步实现他的每一个步骤。</p><h2 id="c解法"><a class="header-anchor" href="#c解法">¶</a>c解法</h2><p>用c语言其实就是对c++的具体实现，（可能我这个不是最好的解法。）但是每次取每次放都需要重新排序，这将是一件很累的事情。所以干脆就不排序了，直接放在那，取的时候再去判断最小值。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><stdio.h></stdio.h></span></span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10010</span>],n;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max 10000000</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findMin</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">min</span> = Max+<span class="number">1</span>,i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i<n; i++)< span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">min</span>>a[i]) <span class="built_in">min</span> = a[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> x)</span></span>{</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i<n; i++)< span><br><span class="line">        <span class="keyword">if</span> (a[i] == x) {</span><br><span class="line">            a[i] = Max;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span>{</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i<n; i++)< span><br><span class="line">        <span class="keyword">if</span> (a[i] == Max) {</span><br><span class="line">            a[i] = x;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">int</span> i,sum2 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i<n; i++)< span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&a[i]);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i<n; i++) {< span><br><span class="line">        <span class="keyword">int</span> x = findMin();</span><br><span class="line">        Delete(x);</span><br><span class="line">        <span class="keyword">int</span> y = findMin();</span><br><span class="line">        Delete(y);</span><br><span class="line">        add(x+y);</span><br><span class="line">        sum2+=x+y;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum2);</span><br><span class="line">}</span><br></n;></span></n;></span></n;></span></n;></span></n;></span></pre></td></tr></tbody></table></figure></div><p>这里注明一下：删除其实就是把现在这个数组里这个值（不一定是之前取的那个数）给赋值为非常大，这样下次寻找最小值就不会找到他。<br>如果有添加，那么之前一定有删除，直接把添加的值放在删除的值的地方就行了。<br>Max一定要特别大，要不然，最大值测试用例时，x+y的值甚至会大过Max，这样就出错了。<br>这个实现就很耗时了，算是锻炼思维把。<br><a href="https://img-blog.csdnimg.cn/20191207180030125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20191207180030125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><h1>如果有更好的解法，或者是有什么问题的话，欢迎留言。</h1></body></html>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTA 树种统计  c语言-------二叉搜索树 详细解释</title>
      <link href="/2020/01/20/%E6%A0%91%E7%A7%8D%E7%BB%9F%E8%AE%A1/"/>
      <url>/2020/01/20/%E6%A0%91%E7%A7%8D%E7%BB%9F%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h1>树种统计</h1><h2 id="这题乍一瞅写个树种，但是再一看貌似跟树没啥关系啊。"><a class="header-anchor" href="#这题乍一瞅写个树种，但是再一看貌似跟树没啥关系啊。">¶</a>这题乍一瞅写个树种，但是再一看貌似跟树没啥关系啊。</h2><p>随着卫星成像技术的应用，自然资源研究机构可以识别每一棵树的种类。请编写程序帮助研究人员统计每种树的数量，计算每种树占总数的百分比。</p><p>输入格式:<br>输入首先给出正整数N（≤10<br>​5<br>​​ ），随后N行，每行给出卫星观测到的一棵树的种类名称。种类名称由不超过30个英文字母和空格组成（大小写不区分）。</p><p>输出格式:<br>按字典序递增输出各种树的种类名称及其所占总数的百分比，其间以空格分隔，保留小数点后4位。</p><h2 id="第一眼直观感受是用数组常规排序？？？-但是看了一眼给的案例，这么老些，而且N是小于等于10的五次方。。用数组常规排序肯定超时。"><a class="header-anchor" href="#第一眼直观感受是用数组常规排序？？？-但是看了一眼给的案例，这么老些，而且N是小于等于10的五次方。。用数组常规排序肯定超时。">¶</a>第一眼直观感受是用数组常规排序？？？ 但是看了一眼给的案例，这么老些，而且N是小于等于10的五次方。。用数组常规排序肯定超时。</h2><h2 id="这么大的数据量要想排序并输出只能想到的是二分法。因为二分法时间复杂度O-logN-。根据二维图像，可以想象数据量越大，O-logN-会越来越趋近与O-1"><a class="header-anchor" href="#这么大的数据量要想排序并输出只能想到的是二分法。因为二分法时间复杂度O-logN-。根据二维图像，可以想象数据量越大，O-logN-会越来越趋近与O-1">¶</a><em><strong>这么大的数据量要想排序并输出只能想到的是二分法。因为二分法时间复杂度O(logN)。根据二维图像，可以想象数据量越大，O(logN)会越来越趋近与O(1)</strong></em></h2><h2 id="在回归这道题，数组里的二分法是去查找元素。。-而这道题是把元素按顺序输出，所以还是不行。。。。"><a class="header-anchor" href="#在回归这道题，数组里的二分法是去查找元素。。-而这道题是把元素按顺序输出，所以还是不行。。。。">¶</a>在回归这道题，数组里的二分法是去查找元素。。 而这道题是把元素按顺序输出，所以还是不行。。。。</h2><p>最后想了想二分法在树里的应用</p><h2 id="二叉搜索树"><a class="header-anchor" href="#二叉搜索树">¶</a>二叉搜索树</h2><p>在输入时就开始构造二叉搜索树。。</p><p>然后中序遍历输出就可以了。。。<br>左中右 正好是有小到大。。<br>至于后面那个频率，加个计数器，最后除以总数就可以了。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 思路：已二叉搜索树的方式保存输入的名称，并赋予一个计数器。然后中序遍历输出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><stdio.h></stdio.h></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><stdlib.h></stdlib.h></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string"><string.h></string.h></span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Null -1</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>{</span></span><br><span class="line">    <span class="keyword">char</span> data[<span class="number">31</span>];</span><br><span class="line">    <span class="keyword">int</span> left,right;</span><br><span class="line">    <span class="keyword">int</span> k;<span class="comment">//计数器</span></span><br><span class="line">}tree[<span class="number">100000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InVisit</span><span class="params">(struct TreeNode Tree,<span class="keyword">int</span> n)</span></span>{</span><br><span class="line">    <span class="keyword">if</span> (Tree.left == Null && Tree.right == Null) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s %.4f%%\n"</span>,Tree.data,Tree.k/(<span class="keyword">double</span>)n*<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (Tree.left!=Null) {</span><br><span class="line">        InVisit(tree[Tree.left],n);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s %.4f%%\n"</span>,Tree.data,Tree.k/(<span class="keyword">double</span>)n*<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">if</span> (Tree.right!=Null) {</span><br><span class="line">        InVisit(tree[Tree.right],n);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> n,i,temp = <span class="number">0</span>,flag = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&n);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i<n; i++) {< span><br><span class="line">        tree[i].k = <span class="number">0</span>;</span><br><span class="line">        tree[i].left = Null;</span><br><span class="line">        tree[i].right = Null;</span><br><span class="line">    }</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i<n; i++) {< span><br><span class="line">        gets(tree[i].data);</span><br><span class="line">        <span class="comment">//二叉搜索树插入 数组保存法</span></span><br><span class="line">        <span class="keyword">while</span> (flag) {</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(tree[i].data, tree[temp].data)<<span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">if</span> (tree[temp].left!=Null) {</span><br><span class="line">            temp = tree[temp].left;</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                tree[temp].left = i;</span><br><span class="line">                tree[i].k++;</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(tree[i].data, tree[temp].data)><span class="number">0</span>){</span><br><span class="line">            <span class="keyword">if</span> (tree[temp].right!=Null) {</span><br><span class="line">                temp = tree[temp].right;</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                tree[temp].right = i;</span><br><span class="line">                tree[i].k++;</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            tree[temp].k++;</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">        temp = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//中序遍历</span></span><br><span class="line">    InVisit(tree[<span class="number">0</span>],n);</span><br><span class="line">}</span><br></n;></span></n;></span></pre></td></tr></tbody></table></figure></div><p>这里我用的数组的方法保存树<br>当然也可以用链表储存，但是链表消耗内存过大。。。个人不太建议。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeeCode第二题常见报错</title>
      <link href="/2020/01/19/leeCode%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%981/"/>
      <url>/2020/01/19/leeCode%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%981/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><hr><h2 id="LeeCode第二题"><a class="header-anchor" href="#LeeCode第二题">¶</a>LeeCode第二题</h2><p>两数相加 c语言实现报错解决</p><hr><p>runtime error: member access within misaligned address 0xbebebebebebebebe for type ‘struct ListNode’, which requires 8 byte alignment (ListNode.c)<br>0xbebebebebebebebe: note: pointer points here<br><memory cannot be printed></memory></p><ul><li></li></ul><p>同样的思路，用Java实现可以运行，但是c语言却频频出现了上述所说的错误。困扰了我许多天，最后参考了一下csdn上大佬的想法，然后仔细在读这个错误，原因在你申请一个节点空间时，它的next指针也诞生出来了，注意这句note: pointer points here<br>说明有指针，但是你没有让他指向一个地址。所以出现这个错误，所以在你申请一个节点空间后，紧跟着把它的next赋值为空就可以了。</p><ul><li></li></ul><p>顺便呈上我的代码吧，思路就不多解释了，比较容易懂</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){</span><br><span class="line">    struct ListNode *p1,*p2,*p ,*h;</span><br><span class="line">    struct ListNode *head = malloc(sizeof(struct ListNode));</span><br><span class="line">    p1 = l1;</span><br><span class="line">    p2 = l2;</span><br><span class="line">    p = head;</span><br><span class="line"></span><br><span class="line">    int t = 0;</span><br><span class="line">    <span class="keyword">while</span> (p1||p2) {</span><br><span class="line">        int x = (p1!=NULL) ? p1->val:0;</span><br><span class="line">        int y = (p2!=NULL) ? p2->val:0;</span><br><span class="line">        int sum = x + y +t;</span><br><span class="line">        t = sum/10;</span><br><span class="line">        h = (struct ListNode*)malloc(sizeof(struct ListNode));</span><br><span class="line">        h->next = NULL;//赋值为空</span><br><span class="line">        p->next = h;</span><br><span class="line">        p = p->next;</span><br><span class="line">        h->val = sum%10;</span><br><span class="line">        <span class="keyword">if</span> (p1) p1 = p1->next;</span><br><span class="line">        <span class="keyword">if</span> (p2) p2 = p2->next;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (t>0) {</span><br><span class="line">        p->next = (struct ListNode*)malloc(sizeof(struct ListNode));</span><br><span class="line">        p = p->next;</span><br><span class="line">        p->next = NULL;</span><br><span class="line">        p->val = t;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">return</span> head->next;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>运行时间比较菜，如果有什么可以改进的话，或者更好的方法欢迎留言！！</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeeCode </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汉诺塔递归实现c语言版</title>
      <link href="/2020/01/19/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0c%E8%AF%AD%E8%A8%80%E7%89%88/"/>
      <url>/2020/01/19/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0c%E8%AF%AD%E8%A8%80%E7%89%88/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h2 id="汉诺塔问题-递归实现法"><a class="header-anchor" href="#汉诺塔问题-递归实现法">¶</a><em><strong>汉诺塔问题 递归实现法</strong></em></h2><p><strong>话不多说直接上代码</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include <stdio.h></stdio.h></span></span><br><span class="line">void Move(int n ,char from ,char to){</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c -> %c\n"</span>,from,to);</span><br><span class="line">}</span><br><span class="line">void hanoi(int n ,char from,char depend,char to){</span><br><span class="line">    <span class="keyword">if</span> (n == 1) {</span><br><span class="line">        //当剩一个盘子的时候，直接移动到目的柱</span><br><span class="line">        Move(1, from, to);</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        hanoi(n-1,from,to,depend);//将初始柱的前n-1个盘子借助目的塔移动到借用柱上</span><br><span class="line">        Move(n,from,to);              //将剩下的一个盘子移动到目的柱上</span><br><span class="line">        hanoi(n-1,depend,from,to);//将b柱n-1个盘子移动到借用a柱移动到c上</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">int <span class="function"><span class="title">main</span></span>() {</span><br><span class="line">    int n;</span><br><span class="line">    scanf(<span class="string">"%d"</span>,&n);</span><br><span class="line">    char x = <span class="string">'A'</span>,y = <span class="string">'B'</span>,z = <span class="string">'C'</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"盘子移动情况如下：\n"</span>);</span><br><span class="line">    hanoi(n, x, y, z);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>思路：<br>不管多少个盘子（一个盘子的时候除外），全部都看作是两个盘子<br>即 最下面的那一个，和其上面的(n-1)个。<br>这样两个盘子的时候，移动就非常简单了。</p><p><strong>总共有三步：</strong><br>1.将第一个(也就是n-1)个盘子借助C柱从A柱移动到B柱。<br>2.将最下面的那一个盘子直接从A柱移动到C柱。<br>3.最后将B柱的那些(n-1)个盘子借助A柱移动到C柱。</p><p>所以在入口参数的时候需要，起始柱，借助柱（有点绕口），目的柱。</p><p>刚开始可能有些看不太懂，可以先输入几个简单的数，用断点调试，看一下他的移动过程。<br>递归函数的终点就是只剩一个盘子的时候，直接移动到目的柱。</p><p><em><strong>如果明白了就不用看我下面的废话了</strong></em></p><p>假设有64个盘子，那么问题就成了移动63和最下面的盘子。分成了两组去完成我上述说的那三步。<br>接着63个盘子去做第一步时就已经开始了递归。<br>递归到下一级时，就意味着再把63个盘子看成一个整体。分成两部分，最下面的一块和上面的62块。去完成这件事，以此类推，直到第一块。<br>因为只有前62块都完成移动，才可以移动到第六十三块。</p><p>不要去想着这个过程，很容易绕晕的，只需要知道这个函数的功能就是移动盘子。</p><p>***下篇博客写汉诺塔非递归算法，c语言实现。 ***</p><blockquote><p>参考博客<br><a href="https://blog.csdn.net/csshuke/article/details/82630311" target="_blank" rel="noopener">https://blog.csdn.net/csshuke/article/details/82630311</a></p></blockquote></body></html>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac上好用的敲代码软件CodeRunner外加破解</title>
      <link href="/2020/01/13/Mac%E4%B8%8A%E5%A5%BD%E7%94%A8%E7%9A%84%E6%95%B2%E4%BB%A3%E7%A0%81%E8%BD%AF%E4%BB%B6CodeRunner/"/>
      <url>/2020/01/13/Mac%E4%B8%8A%E5%A5%BD%E7%94%A8%E7%9A%84%E6%95%B2%E4%BB%A3%E7%A0%81%E8%BD%AF%E4%BB%B6CodeRunner/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h1>Powerful IDE level code completion for most languages</h1><h2 id="有时候我们会一下子学好多语言，仅是用它写写算法而已。对于每一个语言都特意去下在一个IDE的话，无疑是件浪费时间和空间的事情，或许你可以用VS-Code-，但是插件的下载与安装也是比较麻烦的。"><a class="header-anchor" href="#有时候我们会一下子学好多语言，仅是用它写写算法而已。对于每一个语言都特意去下在一个IDE的话，无疑是件浪费时间和空间的事情，或许你可以用VS-Code-，但是插件的下载与安装也是比较麻烦的。">¶</a>有时候我们会一下子学好多语言，仅是用它写写算法而已。对于每一个语言都特意去下在一个IDE的话，无疑是件浪费时间和空间的事情，或许你可以用VS Code ，但是插件的下载与安装也是比较麻烦的。</h2><h2 id="我介绍一个万能IDE-Code-Runner"><a class="header-anchor" href="#我介绍一个万能IDE-Code-Runner">¶</a>我介绍一个万能IDE-----------> Code Runner</h2><p><a href="https://img-blog.csdnimg.cn/20200117085038328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200117085038328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a><br>他几乎支持的了所有语言，如果没有你想要的，你也可以手动添加。<br>他的界面如xcode一样，非常的美观，清楚。支持代码自动补全，同样也支持很多主题。</p><p>运行之后还会显示运行时间。。</p><h3 id="功能强大-仅有270多MB-是不是心动了呢"><a class="header-anchor" href="#功能强大-仅有270多MB-是不是心动了呢">¶</a>功能强大 仅有270多MB 是不是心动了呢?</h3><h1>然而</h1><p><a href="https://img-blog.csdnimg.cn/20200117085414258.png" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200117085414258.png" class="lazyload"></a><br>没错它是需要付费的。</p><h1>然而</h1><p>不废话—</p><h2 id="1-直接登录官网下载"><a class="header-anchor" href="#1-直接登录官网下载">¶</a>1. 直接登录官网下载</h2><h2 id="2-断网激活："><a class="header-anchor" href="#2-断网激活：">¶</a>2. 断网激活：</h2><p>安装成功后，选择输入激活码。并断网。激活码网上都有，我就不找啦。几乎是随便一个就可以。成功后会有一个successfully</p><h2 id="3-修改hosts文件："><a class="header-anchor" href="#3-修改hosts文件：">¶</a>3. 修改hosts文件：</h2><p>打开<br>终端，开启root权限：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></tbody></table></figure></div><p>输入密码后，打开hosts文件位置：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /private/etc</span><br></pre></td></tr></tbody></table></figure></div><p>然后用vim打开 hosts文件：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim hosts</span><br></pre></td></tr></tbody></table></figure></div><p>进入此文件后，在后面加上一行</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1       coderunnerapp.com</span><br></pre></td></tr></tbody></table></figure></div><p>然后保存退出。。。<br>（这块需要用到vim的一些简单操作，不会的话百度一下就OK，非常简单）<br>（注：修改成功以后他的官网就会进不去）</p><h3 id="重启coderunner-就可以使用啦。"><a class="header-anchor" href="#重启coderunner-就可以使用啦。">¶</a>重启coderunner 就可以使用啦。</h3></body></html>]]></content>
      
      
      <categories>
          
          <category> Mac骚操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于C指针----和指针的第一次亲密接触</title>
      <link href="/2020/01/13/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
      <url>/2020/01/13/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script></head><body><h2 id="先看代码："><a class="header-anchor" href="#先看代码：">¶</a>先看代码：</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string"><stdio.h></stdio.h></span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> *c;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输出每个变量的地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a的地址是 %p\n"</span>,&a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"b的地址是 %p\n"</span>,&b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"c的地址是 %p\n"</span>,&c);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*将a的地址赋予c*/</span></span><br><span class="line">    c = &a;<span class="comment">//此处需用到  ”&“来得到a的地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"c修改后的地址为 %p\n"</span>,c);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 通过c输出a的内容*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*c ---->%d\n"</span>,*c);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 通过c修改a的内容*/</span></span><br><span class="line">    *c = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a---->%d\n"</span>,a);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="然后我们看运行结果"><a class="header-anchor" href="#然后我们看运行结果">¶</a>然后我们看运行结果</h2><p><a href="https://img-blog.csdnimg.cn/20200115085336718.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200115085336718.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><h2 id="我们首先声明了int型变量-a-b-然后声明了”指向int-的指针“类型的变量c"><a class="header-anchor" href="#我们首先声明了int型变量-a-b-然后声明了”指向int-的指针“类型的变量c">¶</a>我们首先声明了int型变量 a,b 然后声明了”指向int 的指针“类型的变量c</h2><p>==我们暂且先将c理解为指向int 的指针==</p><h2 id="再看初始化完后内存中保存的样子在这里插入图片描述"><a class="header-anchor" href="#再看初始化完后内存中保存的样子在这里插入图片描述">¶</a>再看初始化完后内存中保存的样子<a href="https://img-blog.csdnimg.cn/20200115090658778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20200115090658778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></h2><p>在c语言中，会存在 int类型，double类型，等。。同样，c语言中也存在指针类型这样的类型。<br>指针类型并不是单独存在的，而是由其他类型派生出来的。。</p><p>==由引用类型T派生的指针类型有时候称为’（指向）T的指针‘==</p><p>因为指针类型是类型，所以他也像其他类型一样，有“指针类型的值和指针类型变量”，但有时，我们将“指针类型”，“指针类型变量”，“指针类型的值”简单统称为—指针</p><p>因此 c就是一个指针类型变量-----指向int的指针，但此时并为对它赋值。</p><p>接下来我们将a的地址赋予了c，此时c的值就是a的地址<a href="https://img-blog.csdnimg.cn/2020011509233464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" data-fancybox="group" data-caption="在这里插入图片描述" class="fancybox"><img alt="在这里插入图片描述" title="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/2020011509233464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Zpc3RvcnNZYW4=,size_16,color_FFFFFF,t_70" class="lazyload"></a></p><h2 id="接下来："><a class="header-anchor" href="#接下来：">¶</a>接下来：</h2><p>在指针前面加*，可以表示指针指向的变量，因为现在c指向a，所以<em>c就等同于a。同理，修改</em>c就相当于修改了a的值。</p><p>==这是对后两行输出做的解释==</p><h2 id="补充："><a class="header-anchor" href="#补充：">¶</a>补充：</h2><p>如果说c是 指向int的指针，但我们声明变量时一般要遵循：</p><h2 id="类型-变量名"><a class="header-anchor" href="#类型-变量名">¶</a>类型 变量名</h2><p>因此，我们似乎声明了一个名为*c的变量。</p><p>所以我们可以写成 ==int* c==的形式。这样更符合  ==类型 变量名==  的形式。</p><p>但之后就会出现问题：<br>数组也是C语言的一种类型。。如果按上述所说的话。<br>C语言声明数组时应该是：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] <span class="built_in">array</span>;</span><br></pre></td></tr></tbody></table></figure></div><p>很明显，会报错。这就产生了矛盾。。</p><p>反而，Java中可以这么写，但是Java为了让C程序员更好的转向Java。也兼容了c语言定义数组的写法。。</p><p>在这里需要插一句：</p><h2 id="C语言的语法本来就是不自然的，奇怪的而又变态的。"><a class="header-anchor" href="#C语言的语法本来就是不自然的，奇怪的而又变态的。">¶</a>C语言的语法本来就是不自然的，奇怪的而又变态的。</h2><p>之后我会出一篇关于C语法的博客专门研究这“变态的”c语法。。。</p><p>欢迎吐槽评论</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 征服C指针 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C指针 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
